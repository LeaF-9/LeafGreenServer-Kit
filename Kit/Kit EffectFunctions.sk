function applyEffect(player: entity, effect: potion effect type, tier: number, time: time span, replace: boolean = false, type: text = "normal"):
	if {_type} is "normal":
		if {_replace} is true:
			apply {_effect} {_tier} to {_player} for {_time} replacing existing effect
		else:
			apply {_effect} {_tier} to {_player} for {_time}
	else if {_type} is "ambient":
		if {_replace} is true:
			apply ambient {_effect} {_tier} to {_player} for {_time} replacing existing effect
		else:
			apply ambient {_effect} {_tier} to {_player} for {_time}
	else if {_type} is "none":
		if {_replace} is true:
			apply {_effect} {_tier} without particles to {_player} for {_time} replacing existing effect
		else:
			apply {_effect} {_tier} without particles to {_player} for {_time}

function resetEffect(player: player):
	execute console command "/effect clear %{_player}%"
	if {Class::%{_player}%} is set:
		load yml "plugins/skript-yaml/General Classes/Kit-%{Class::%{_player}%}%.yml" as "EffectCheck.%{_player}%"
		loop yaml node keys "effects" from "EffectCheck.%{_player}%":
			set {_effect} to potionChanger("%loop-key%")
			set {_level} to yml value "%loop-node%" from "EffectCheck.%{_player}%"
			# set {_level} to {_level} parsed as number
			apply infinite {_effect} {_level} without particles to {_player}

function checkEffects(player: player) :: potion effect types:
	set {_eff.player::*} to all potion effects of {_player}
	loop {_eff.player::*}:
		"%loop-value%" contains "infinity"
		add type of loop-value to {_returnElements::*}
	# 仕様が変わった際のメモ
	# if {Class::%{_player}%} is not set:
	# 	stop
	# load yml "plugins/skript-yaml/General Classes/Kit-%{Class::%{_player}%}%.yml" as "EffectCheck.%{_player}%"
	# loop yaml node keys "effects" from "EffectCheck.%{_player}%":
	# 	set {_effect} to potionChanger("%loop-key%")
	# 	add {_effect} to {_returnElements::*}
	return {_returnElements::*}