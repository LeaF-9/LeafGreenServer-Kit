on place of a tnt:
	if {Class::%player%} is "Bomber":
		cancel event
		remove a tnt from the player
		spawn a primed tnt
		set metadata value "attacker" of spawned primed tnt to "%player%"
		set metadata value "kit-bomber" of spawned primed tnt to 4

on leftclick holding a tnt:
	if {Class::%player%} is "Bomber":
		remove a tnt from player
		shoot a primed tnt from player at speed 1.1
		set metadata value "attacker" of shot primed tnt to "%player%"
		set metadata value "kit-bomber" of shot primed tnt to 4

on explode:
	cancel event
	metadata value "kit-bomber" of event-entity is set
	set {_entity} to event-entity
	set {_loc} to event-location
	set {_attacker} to metadata value "attacker" of {_entity} parsed as player
	set {_power} to metadata value "kit-bomber" of {_entity}
	set {_bool} to metadata value "TrueTeam" of {_entity}
	if {_bool} is not set:
		set {_bool} to false
	kitExplosion({_attacker}, {_power}, {_loc}, {_bool})

on damage of player:
	if damage was caused by block explosion or entity explosion:
		if metadata value "firework" of projectile is true:
			stop
		cancel event

function kitExplosion(attacker: player, power: number, loc: location, bool: boolean = false):
	set {_round} to {_power} * 2
	playSound("entity.generic.explode", {_power}, 1, {_loc})
	if {_power} < 2:
		spawnParticle(explosion, {_loc})
	else:
		spawnParticle(explosion_emitter, {_loc})
	loop all entities in radius {_round} around {_loc}:
		kitCheckTeam(loop-entity, {_attacker}, false, {_bool}) is true
		if checkEntityType(loop-entity, player) is false:
			set {_distance} to distance between {_loc} and loop-entity
			set {_impact} to ({_round} - {_distance})
			set {_damage} to {_impact} + 0.1
			kitDamage({_attacker}, loop-entity, {_damage}, true)
			continue
		# ダメージ処理
		set {_distance} to distance between {_loc} and loop-entity  # 距離
		set {_expose} to kitCalcExpose(loop-entity, {_loc})
		set {_impact} to ({_round} - {_distance}) / 2 * {_expose}
		set {_damage} to {_impact} + 0.1
		kitDamage({_attacker}, loop-entity, {_damage}, true)
		set {_hit} to true
	if {_hit} is true:
		playSound("entity.experience_orb.pickup", 1, 2, {_attacker}, true)

local function kitCalcExpose(player: player, center: location) :: number:
	set {_playerloc} to location of {_player}
	if location of block at {_player} is location of block at {_center}:
		set {_expose} to 1
	else:
		set {_checklocs::*} to exposeLocs({_player}, {_playerloc})
		set {_blocked} to size of {_checklocs::*}
		loop {_checklocs::*}:
			set {_loc} to loop-value
			set {_blockfinder} to setDirToVec({_center}, setVector({_center}, {_loc}))
			set {_distance} to distance between {_loc} and {_center}
			set {_loopnum} to round({_distance} * 5)
			set {_ln} to 0
			delete {_bl}
			loop {_loopnum} times:
				{_bl} is not set
				add 1 to {_ln}
				set {_checkblock} to location {_distance} / {_loopnum} * {_ln} meters in front of {_blockfinder}
				if block at {_checkblock} is not passable:
					subtract 1 from {_blocked}
					set {_bl} to true
		set {_size} to size of {_checklocs::*}
		set {_expose} to {_blocked} / {_size}
	# 爆破耐性の確認
	set {_level} to 0
	if level of blast protection of helmet of {_player} > {_level}:
		set {_level} to level of blast protection of helmet of {_player}
	if level of blast protection of chestplate of {_player} > {_level}:
		set {_level} to level of blast protection of chestplate of {_player}
	if level of blast protection of leggings of {_player} > {_level}:
		set {_level} to level of blast protection of leggings of {_player}
	if level of blast protection of boots of {_player} > {_level}:
		set {_level} to level of blast protection of boots of {_player}
	set {_return} to {_expose} - {_level} * 0.1
	if {_return} < 0:
		set {_return} to 0
	return {_return}



local function exposeLocs(player: player, loc: location) :: locations:
	set {_max.y} to 1.8
	if {_player} is sneaking:
		set {_max.y} to 1.5
	set {_max.x} to 0.5
	loop 8 times:
		set {_el} to {_loc}
		add a random number between 0 and {_max.y} to y-pos of {_el}
		add a random number between {_max.x} * -1 and {_max.x} to x-pos of {_el}
		add a random number between {_max.x} * -1 and {_max.x} to z-pos of {_el}
		add {_el} to {_exposes::*}
	return {_exposes::*}