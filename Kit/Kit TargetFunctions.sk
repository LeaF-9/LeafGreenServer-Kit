local function kitTargetPlayer(player: player, distance: number, ally: boolean = false):
	set {_dis} to round({_distance})
	set {_baseloc} to head of {_player}
	loop {_dis} times:
		{_ng} is not set
		{_target} is not set
		set {_loc} to location (loop-number) meters in front of {_baseloc}
		if block at {_loc} is not passable:
			set {_ng} to true
		else:
			loop all players in radius 3 around {_loc}:
				{_target} is not set
				kitCheckAlive(loop-player) is true
				kitCheckTeam(loop-player, {_player}, {_ally}) is true
				loop-player is not {_player}
				set {_target} to loop-player
	if {_target} is set:
		set {_skillTarget} to getKitStats({_player}, "SkillTarget")
		if {_skillTarget} is set:
			set {_former} to {_skillTarget}
			packetUnglowing({_player}, {_former})
		setKitStats({_player}, "SkillTarget", {_target})
		if {_ally} is true:
			set {_color} to rgb(0, 255, 0)
		else:
			set {_color} to rgb(255, 0, 0)
		packetGlowing({_player}, {_target}, {_color})
	else:
		set {_skillTarget} to getKitStats({_player}, "SkillTarget")
		if {_skillTarget} is set:
			set {_former} to {_skillTarget}
			deleteKitStats({_player}, "SkillTarget")
			packetUnglowing({_player}, {_former})

local function kitTargetLocation(player: player, distance: number):
	set {_dustColor} to rgb(255, 255, 0)
	set {_dustColor} to rgb(0, 255, 255) if {_distance} <= 5

	set {_baseloc} to head of {_player}
	delete {_ok}
	set {_dis} to round({_distance}) * 10 
	loop {_dis} times:
		{_ok} is not set
		set {_met} to loop-number / 10
		set {_loc} to location {_met} meters in front of {_baseloc}
		if block at {_loc} is not passable:  # 固形ブロックであれば
			set {_ok} to true  # 固形ブロックが見つかったことを感知 / このloopを止める変数
			delete {_blockok}
			delete {_bn}
			loop 5 times:  # 0.5m上まで感知可能
				add 0.1 to {_bn}
				set {_bl} to location {_bn} meters above {_loc}
				if block at {_bl} is passable:
					set {_blockok} to true  #有効ブロック感知時有効
					set {_loc} to {_bl}
					set (y-pos of {_loc}) to ((y-pos of (location of (block at {_bl}))) - 0.5)  # y座標を地面にあわせる
	if {_ok} is not set:  # 前方に固形ブロックが見つからなかった場合
		delete {_blockok}
		delete {_bn}
		loop 50 times:  # 5m下まで感知可能
			{_blockok} is not set
			add 0.1 to {_bn}
			set {_bl} to location {_bn} meters below {_loc}
			if block at {_bl} is not passable:
				set {_blockok} to true
				set {_loc} to location 0.1 meters above {_bl}
				set y-pos of {_loc} to ((y-pos of (location of (block 0.1 meters above {_bl}))) - 0.5)
	
	if {_blockok} is not set:
		deleteKitStats({_player}, "SkillLocation")
		stop

	set {_rad} to 0
	set yaw of {_loc} to 0
	set pitch of {_loc} to 0
	setKitStats({_player}, "SkillLocation", {_loc})

	set {_rotatevec} to vector(1, 0, 0)
	loop 36 times:
		rotate {_rotatevec} around y-axis by {_rad}
		set {_el} to {_loc} ~ {_rotatevec}
		spawnParticle_Dust({_dustColor}, 0.5, {_el}, {_player})
		add 10 to {_rad}

local function kitTargetAround(player: player, distance: number, isTeam: boolean = false):
	set {_dustColor} to rgb(255, 0, 0)
	set {_dustColor} to rgb(0, 255, 0) if {_isTeam} is true

	set {_baseloc} to location 1 meter above {_player}
	set {_rad} to 0
	set {_rotatevec} to vector({_distance}, 0, 0)
	set {_loopnum} to 100
	set {_addrad} to 360 / {_loopnum}

	loop {_loopnum} times:
		rotate {_rotatevec} around y-axis by {_rad}
		set {_el} to {_loc} ~ {_rotatevec}
		spawnParticle_Dust({_dustColor}, 0.7, {_el}, {_player})
		add {_addrad} to {_rad}

local function kitTargetReset(player: player):
	set {_skillTarget} to getKitStats({_player}, "SkillTarget")
	if {_skillTarget} is set:
		set {_former} to {_skillTarget}
		deleteKitStats({_player}, "SkillTarget")
		packetUnglowing({_player}, {_former})
	set {_skillLocation} to getKitStats({_player}, "SkillLocation")
	if {_skillLocation} is set:
		deleteKitStats({_player}, "SkillLocation")

function kitTargetTimer(player: player):
	set {_class} to {Class::%{_player}%}
	# Thiefの場合は常時発動の関数
	if {_class} is "Thief":
		kitTargetTimer_Thief({_player})
		stop

	# ターゲットのリストを作成
	set {_targettypes::*} to getTypes()
	# ターゲットを発動するスキルの確認
	loop all items in {_player}'s inventory:
		# アイテム一覧を保存 (keyが存在するアイテムのみ)
		set {_itemkey} to getNamespacedKey(loop-item, "item-key", "string")
		continue if {_itemkey} is not set
		set {_loadouts::%{_itemkey}%} to true

		# どのターゲットタグが存在しているか確認
		delete {_existtarget}
		loop {_targettypes::*}:
			set {_loop-type} to loop-value-2
			set {_typevalue} to getTypeValue(loop-item, {_loop-type})
			continue if {_typevalue} is not set

			# 存在時はその値を保存
			set {_existtarget} to true
			set {_existtype::%{_loop-type}%} to true
			set {_targetvalue.%{_loop-type}%::%{_itemkey}%} to {_typevalue}
		
		# ターゲットタグが無いアイテムは一覧から削除
		delete {_loadouts::%{_itemkey}%} if {_existtarget} is not set
	
	stop if size of {_loadouts::*} is 0  # 該当するアイテムが無ければ処理停止

	# 存在しないターゲットタグを削除
	loop {_targettypes::*}:
		set {_loop-type} to loop-value
		remove {_loop-type} from {_targettypes::*} if {_existtype::%{_loop-type}%} is not set

	while {Class::%{_player}%} is {_class}:
		set {_tool} to {_player}'s tool
		set {_itemkey} to getNamespacedKey({_tool}, "item-key", "string")
		if {_loadouts::%{_itemkey}%} is not set:
			kitTargetReset({_player})
			wait a tick
			continue
		
		loop {_targettypes::*}:
			set {_loop-type} to loop-value
			set {_meter} to {_targetvalue.%{_loop-type}%::%{_itemkey}%}
			continue if {_meter} is not set

			if any:
				{_loop-type} contains "location"
				{_loop-type} contains "around"
			then:
				kitTargetReset({_player})

			kitTargetPlayer({_player}, {_meter}, true) if {_loop-type} is "target-ally"
			kitTargetPlayer({_player}, {_meter}) if {_loop-type} is "target-enemy"

			kitTargetLocation({_player}, {_meter}) if {_loop-type} is "target-location"
			
			kitTargetAround({_player}, {_meter}, true) if {_looptype} is "around-ally"
			kitTargetAround({_player}, {_meter}) if {_loop-type} is "around-enemy"
		wait a tick
	kitTargetReset({_player})

local function kitTargetTimer_Thief(player: player):
	set {_targettypes::*} to getTypes()
	while {Class::%{_player}%} is "Thief":
		set {_tool} to {_player}'s tool
		set {_itemkey} to getNamespacedKey({_tool}, "item-key", "string")
		# Loadoutでないアイテムは除外
		if {_itemkey} is not set:
			kitTargetReset({_player})
			wait a tick
			continue

		# Item一覧に含まれていない場合の処理
		if {_items::%{_itemkey}%} is not set:
			set {_items::%{_itemkey}%} to true
			# 役割の確認
			loop {_targettypes::*}:
				set {_loop-type} to loop-value
				set {_typevalue} to getTypeValue({_tool}, {_loop-type})
				continue if {_typevalue} is not set

				# 役割の値を保存
				set {_item.role::%{_itemkey}%} to true
				# ##### 注意 #####
				# このrolevalueは{_loop-type}と{_itemkey}の位置が逆になります
				# これはアイテムごとにループされる役割を減らすための処置です
				set {_rolevalue.%{_itemkey}%::%{_loop-type}%} to {_typevalue}

		# 役割が無ければスキップ
		if {_item.role::%{_itemkey}%} is not set:
			kitTargetReset({_player})
			wait a tick
			continue

		# 役割のあるアイテムを持っていた際の処理
		loop {_rolevalue.%{_itemkey}%::*}:
			set {_loop-type} to loop-index
			set {_meter} to loop-value

			if any:
				{_loop-type} contains "location"
				{_loop-type} contains "around"
			then:
				kitTargetReset({_player})

			kitTargetPlayer({_player}, {_meter}, true) if {_loop-type} is "target-ally"
			kitTargetPlayer({_player}, {_meter}) if {_loop-type} is "target-enemy"

			kitTargetLocation({_player}, {_meter}) if {_loop-type} is "target-location"
			
			kitTargetAround({_player}, {_meter}, true) if {_looptype} is "around-ally"
			kitTargetAround({_player}, {_meter}) if {_loop-type} is "around-enemy"
		wait a tick
	kitTargetReset({_player})

local function getTypes() :: texts:
	add "target-ally" to {_types::*}
	add "target-enemy" to {_types::*}
	add "around-ally" to {_types::*}
	add "around-enemy" to {_types::*}
	add "target-location" to {_types::*}
	return {_types::*}

local function getTypeValue(item: item, type: text) :: number:
	set {_value} to getNamespacedKey({_item}, {_type}, "float")
	return {_value}