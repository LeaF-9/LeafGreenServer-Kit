# Thiefのスキル Ver1.0.0

# Weapons
function kitWeaponThief(player: player):
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	checkCT({_player}, name of {_player}'s tool) is true
	if {_item.num} is 2:
		kitWeapon_Thief_2({_player})
	else if {_item.num} is 3:
		if {_player} is sneaking:
			kitWeapon_Thief_3({_player})
	else if {_item.num} is 4:
		kitWeapon_Thief_4({_player})
	else if {_item.num} is 5:
		kitWeapon_Thief_5({_player})

function kitWeapon_Thief_2(player: player):
	toolCT({_player}, "Thief", 2, "Weapon.main")
	kitMsg({_player}, "§eポケットから §a§l宝石 §eがこぼれ出た!")
	loop all players in radius 10 around {_player}:
		loop-player is not {_player}
		metadata value "gametype" of loop-player is "Kit"
		playSound("entity.item.pickup", 1, 0.5, loop-player)
		drop an emerald block named "%{_player}%" at loop-player
		set metadata value "gametype" of last dropped item to "Kit"
		set metadata value "delete" of last dropped item to "%{_player}%"
		drawDot count 1, particle "happyvillager", center last dropped item, visibleRange 30

on pick up emerald block:
	if name of item is "%player%":
		set {_now} to now
		set {Stats.%player%::JewelrySword} to {_now}
		loop all items in player's inventory:
			name of loop-item contains "Jewelry Sword"
			enchant loop-item with sharpness 1
		playSound("block.enchantment_table.use", 1, 2, player)
		loop 5 times:
			set {_el} to aroundEffect(player)
			drawDot count 1, particle "mobspell", RGB 0, 255, 127, center {_el}, visibleRange 30
		wait a tick
		remove all emerald block named "%name of item%" from player
		wait 5 seconds
		{Stats.%player%::JewelrySword} is {_now}
		delete {Stats.%player%::JewelrySword}
		loop all items in player's inventory:
			name of loop-item contains "Jewelry Sword"
			disenchant loop-item
	else:
		cancel event

function kitWeapon_Thief_3(player: player):
	toolCT({_player}, "Thief", 3, "Weapon.main")
	kitMsg({_player}, "§b矢 §9を取り出した!")
	set {_amount} to amount of arrow in {_player}'s inventory
	add 10 to {_amount}
	set {_s} to 35
	set {_a} to 0
	loop {_amount} times:
		add 1 to {_a}
		set slot {_s} of {_player} to {_a} of arrow
		if {_a} is 64:
			subtract 1 from {_s}
			set {_a} to 0

function kitWeapon_Thief_4(player: player):
	toolCT({_player}, "Thief", 4, "Weapon.main")
	shoot a snowball from {_player} at speed 1.2
	set metadata value "kit-thornyrose" of shot snowball to "%{_player}%"
	set item of shot snowball to red dye
	drawDot count 1, particle "redstone", RGB 255, 0, 0, center shot snowball, visibleRange 30, keepFor 1 second
	playSound("entity.arrow.shoot", 1, 0.5, {_player})

on projectile hit:
	projectile is a snowball
	metadata value "kit-thornyrose" of projectile is set
	playSound("entity.generic.explode", 1, 2, projectile)
	loop all entities in radius 5 around projectile:
		kitCheckTeam(loop-entity, shooter, false) is true
		apply blindness 1 to loop-entity for 3 seconds
	loop all blocks in radius 5 around projectile:
		loop-block is passable
		chance of 50%:
			set {_el} to location of loop-block
			add a random number between -0.5 and 0.5 to x-coordinate of {_el}
			add a random number between -0.5 and 0.5 to y-coordinate of {_el}
			add a random number between -0.5 and 0.5 to z-coordinate of {_el}
			drawDot count 1, particle "smoke", center {_el}, visibleRange 30
	set {_baseloc} to location of projectile
	set {_m} to 0
	set {_rad} to 0
	loop 20 times:
		playSound("block.grass.step", 0.8, 1, {_baseloc})
		add 0.25 to {_m}
		loop 10 times:
			add 40 to {_rad}
			set {_el} to {_baseloc}
			add {_m} * sin({_rad}) to x-coordinate of {_el}
			add {_m} * cos({_rad}) to z-coordinate of {_el}
			drawDot count 1, particle "happyvillager", center {_el}, visibleRange 30
		wait a tick
	playSound("block.grass.break", 1, 1, {_baseloc})
	loop all entities in radius 5 around projectile:
		kitCheckTeam(loop-entity, shooter, false) is true
		kitDamage(shooter, loop-entity, 2)
	set {_y} to 0
	loop 5 times:
		add 1 to {_y}
		loop 10 times:
			add 36 to {_rad}
			set {_el} to {_baseloc}
			add 5 * sin({_rad}) to x-coordinate of {_el}
			add 5 * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "happyvillager", center {_el}, visibleRange 30

on damage of player:
	attacker is set
	metadata value "gametype" of victim is "Kit"
	if {Class::%victim%} is "Thief":
		set {_tool} to victim's tool
		kitItemAllChecker({_tool}, "Thief", "Weapon.main", 4) is true
		set {_c} to kitPercentDuel(attacker, victim, 20, false)
		chance of {_c}%:
			kitDamage(victim, attacker, 2)
	if {Class::%attacker%} is "Thief":
		set {_tool} to attacker's tool
		kitItemAllChecker({_tool}, "Thief", "Weapon.main", 5) is true
		{Stats.%attacker%::LuckyPunch} is set
		set {_dmg} to {Stats.%attacker%::LuckyPunch} * 0.5
		set damage to damage + {_dmg}

function kitWeapon_Thief_5(player: player):
	toolCT({_player}, "Thief", 5, "Weapon.main")
	if {Stats.%{_player}%::LuckyPunch} is not set:
		set {Stats.%{_player}%::LuckyPunch} to 0
	set {_luck} to a random integer between 0 and 1
	if {_luck} is 0:
		if {Stats.%{_player}%::LuckyPunch} < 5:
			add 1 to {Stats.%{_player}%::LuckyPunch}
			kitMsg({_player}, "§6§l運試し! §aあなたは幸運になった! §elevel: §l%{Stats.%{_player}%::LuckyPunch}%")
		else:
			kitMsg({_player}, "§cこれ以上§a§l幸運§cにはなりません!")
	else:
		if {Stats.%{_player}%::LuckyPunch} > -5:
			subtract 1 from {Stats.%{_player}%::LuckyPunch}
			kitMsg({_player}, "§6§l運試し! §2あなたは不運になった... §elevel: §l%{Stats.%{_player}%::LuckyPunch}%")
		else:
			kitMsg({_player}, "§cこれ以上§2§l不運§cにはなりません!")
	if {Stats.%{_player}%::LuckyPunch} >= 0:
		set {_lucky} to {Stats.%{_player}%::LuckyPunch}
		kitLuck({_player}, {_lucky})
	else:
		set {_lucky} to {Stats.%{_player}%::LuckyPunch} * -1
		kitBadLuck({_player}, {_lucky})

function kitSkillThief(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_player}'s tool) is true:
		if {_item.num} is 1:
			kitSkill_Thief_1({_player})
			return true
		else if {_item.num} is 2:
			kitSkill_Thief_2({_player})
			return true
		else if {_item.num} is 3:
			kitSkill_Thief_3({_player})
			return true
		else if {_item.num} is 4:
			kitSkill_Thief_4({_player})
			return true
		else if {_item.num} is 5:
			kitSkill_Thief_5({_player})
			return false
		else if {_item.num} is 6:
			kitSkill_Thief_6({_player})
			return true
		else if {_item.num} is 7:
			kitSkill_Thief_7({_player})
			return true
		else if {_item.num} is 8:
			kitSkill_Thief_8({_player})
			return true

function kitSkill_Thief_1(player: player):
	set {_tool} to {_player}'s tool
	remove {_tool} from {_player}
	if type of {_tool} is bonemeal:
		set {_item} to a red dye named "<##FF0000>Disguise Team" with lore lore of {_tool}
		set {_item} to kitItemTagChanger({_item}, "Thief", "Skill", 1)
		kitMsg({_player}, "§c赤チーム §7に擬態した!")
		equip {_player} with leather cap
		dye {_player}'s helmet (255, 0, 0)
		drawDot count 1, particle "redstone", RGB 255, 0, 0, center location 2 meters above {_player}, visibleRange 30, keepFor 20 ticks
		apply invisibility 1 to {_player} for 10 seconds replacing existing effect
		set {team::%{_player}%} to "red"
	else if {_tool} is red dye:
		set {_item} to a blue dye named "<##0000FF>Disguise Team" with lore lore of {_tool}
		set {_item} to kitItemTagChanger({_item}, "Thief", "Skill", 1)
		kitMsg({_player}, "§9青チーム §7に擬態した!")
		equip {_player} with leather cap
		dye {_player}'s helmet (0, 0, 255)
		drawDot count 1, particle "redstone", RGB 0, 0, 255, center location 2 meters above {_player}, visibleRange 30, keepFor 20 ticks
		apply invisibility 1 to {_player} for 10 seconds replacing existing effect
		set {team::%{_player}%} to "blue"
	else if {_tool} is blue dye:
		set {_item} to a yellow dye named "<##FFFF00>Disguise Team" with lore lore of {_tool}
		set {_item} to kitItemTagChanger({_item}, "Thief", "Skill", 1)
		kitMsg({_player}, "§e黄チーム §7に擬態した!")
		equip {_player} with leather cap
		dye {_player}'s helmet (255, 255, 0)
		drawDot count 1, particle "redstone", RGB 255, 255, 0, center location 2 meters above {_player}, visibleRange 30, keepFor 20 ticks
		apply invisibility 1 to {_player} for 10 seconds replacing existing effect
		set {team::%{_player}%} to "yellow"
	else if {_tool} is yellow dye:
		set {_item} to a light green dye named "<##00FF00>Disguise Team" with lore lore of {_tool}
		set {_item} to kitItemTagChanger({_item}, "Thief", "Skill", 1)
		kitMsg({_player}, "§a緑チーム §7に擬態した!")
		equip {_player} with leather cap
		dye {_player}'s helmet (0, 255, 0)
		drawDot count 1, particle "redstone", RGB 0, 255, 0, center location 2 meters above {_player}, visibleRange 30, keepFor 20 ticks
		apply invisibility 1 to {_player} for 10 seconds replacing existing effect
		set {team::%{_player}%} to "green"
	else if {_tool} is light green dye:
		set {_item} to a red dye named "<##FF0000>Disguise Team" with lore lore of {_tool}
		set {_item} to kitItemTagChanger({_item}, "Thief", "Skill", 1)
		kitMsg({_player}, "§c赤チーム §7に擬態した!")
		equip {_player} with leather cap
		dye {_player}'s helmet (255, 0, 0)
		drawDot count 1, particle "redstone", RGB 255, 0, 0, center location 2 meters above {_player}, visibleRange 30, keepFor 20 ticks
		apply invisibility 1 to {_player} for 10 seconds replacing existing effect
		set {team::%{_player}%} to "red"
	give {_item} to {_player}

function kitSkill_Thief_2(player: player):
	if {Stats.%{_player}%::SkillTarget} is set:
		set {_tool} to {_player}'s tool
		set {_tg} to {Stats.%{_player}%::SkillTarget}
		if {Class::%{_tg}%} is "Thief":
			set action bar of {_player} to "§c§lThiefからはスキルを盗むことが出来ません!"
			stop
		if {TrueTeam::%{_tg}%} is {TrueTeam::%{_player}%}:
			set action bar of {_player} to "§c§l同じチームのプレイヤーからは盗めません!"
			stop
		toolCT({_player}, "Thief", 2)
		if {Class::%{_tg}%} is "Werewolf":
			if {Stats.%{_tg}%::Instinct} is true:
				set {_type} to "Werewolf_Instinct"
			else:
				set {_type} to {Class::%{_tg}%}
		else if {Class::%{_tg}%} is "Vampire":
			if {Stats.%{_tg}%::BatMode} is true:
				set {_type} to "Vampire_Bat"
			else:
				set {_type} to {Class::%{_tg}%}
		else:
			set {_type} to {Class::%{_tg}%}
		loop 3 times:
			set {_skill} to kitPlayerSkillItem({_tg}, {_type}, loop-number)
			add {_skill} to {_skills::*}
		loop {_skills::*}:
			{_tg}'s inventory contains loop-value
			add loop-value to {_own::*}
		if size of {_own::*} is not 0:
			remove {_tool} from {_player}
			set {Stats.%{_player}%::Stealing} to true
			set {Stats.%{_tg}%::Stealed} to true
			set {_item} to a random item out of {_own::*}
			kitItemTargetTimer({_player}, {_item})
			set {_name} to name of {_item}
			kitMsg({_player}, "§d%{_tg}% §bから §a%{_name}% §bを盗みました!")
			message formatted "§a%{_name}% §cが盗まれた!" to {_tg}
			playSound("entity.experience_orb.pickup", 1, 2, {_player})
			give {_item} to {_player}
			remove all {_item} from {_tg}
			wait 10 seconds
			if {Stats.%{_player}%::Stealing} is true:
				remove all {_item} from {_player}
				give {_tool} to {_player}
				delete {Stats.%{_player}%::Stealed}
			if {Stats.%{_tg}%::Stealed} is true:
				give {_item} to {_tg}
				delete {Stats.%{_tg}%::Stealed}
		else:
			kitMsg({_player}, "§8スキルを上手く盗めませんでした...")
	else:
		send action bar "§c§l対象が存在しません!" to {_player}

function kitSkill_Thief_3(player: player):
	if {Stats.%{_player}%::Stealing.Perfect Steal} is true:
		kitStealItem({_player}, "Perfect Steal")
	else:
		if {Stats.%{_player}%::SkillTarget} is set:
			set {_tool} to {_player}'s tool
			set {_tg} to {Stats.%{_player}%::SkillTarget}
			if {TrueTeam::%{_tg}%} is {TrueTeam::%{_player}%}:
				set action bar of {_player} to "§c§l同じチームのプレイヤーからは盗めません!"
				stop
			toolCT({_player}, "Thief", 3)
			playSound("entity.item.pickup", 1, 2, {_player})
			kitMsg({_player}, "§6%{_tg}% §bのスキルを全部しまいこんだ!")
			message formatted "§dスキルを全部盗まれてしまった!" to {_tg}
			set {Stats.%{_tg}%::Stealed.Perfect Steal} to true
			set {Stats.%{_player}%::Stealing.Perfect Steal} to true
			if {Class::%{_tg}%} is "Werewolf":
				if {Stats.%{_tg}%::Instinct} is true:
					set {_type} to "Werewolf_Instinct"
				else:
					set {_type} to {Class::%{_tg}%}
			else if {Class::%{_tg}%} is "Vampire":
				if {Stats.%{_tg}%::BatMode} is true:
					set {_type} to "Vampire_Bat"
				else:
					set {_type} to {Class::%{_tg}%}
			else:
				set {_type} to {Class::%{_tg}%}
			loop 3 times:
				set {_skill} to kitPlayerSkillItem({_tg}, {_type}, loop-number)
				add {_skill} to {_skills::*}
			loop {_skills::*}:
				{_tg}'s inventory contains loop-value
				add loop-value to {_own::*}
			loop {_own::*}:
				remove loop-value from {_tg}
			set {StealItem-Perfect Steal.%{_player}%::*} to {_own::*}
			set {_lootitem} to a bundle named "%display name of {_tool}% §b[§eloot§b]" with lore lore of {_tool}
			set {_lootitem} to kitItemTagChanger({_lootitem}, "Thief", "Skill", 3)
			remove {_tool} from {_player}
			give {_lootitem} to {_player}
			wait 7 seconds
			if {Stats.%{_tg}%::Stealed.Perfect Steal} is true:
				loop {_own::*}:
					give loop-value to {_tg}
				delete {Stats.%{_tg}%::Stealed.Perfect Steal}
			if {Stats.%{_player}%::Stealing.Perfect Steal} is true:
				remove {_lootitem} from {_player}
				give {_tool} to {_player}
				delete {StealItem-Perfect Steal.%{_player}%::*}
				delete {Stats.%{_player}%::Stealing.Perfect Steal}
		else:
			send action bar "§c§l対象が存在しません!" to {_player}

function kitSkill_Thief_4(player: player):
	toolCT({_player}, "Thief", 4)
	kitMsg({_player}, "§b戦線離脱を試みた!")
	playSound("entity.wither.shoot", 1, 2, {_player})
	set {Stats.%{_player}%::Invincible} to true
	make a fake explosion at {_player}
	push {_player} upwards at speed 1.3
	push {_player} backwards at speed 1
	apply speed 3 to {_player} for 3 seconds replacing existing effect
	wait a second
	delete {Stats.%{_player}%::Invincible}
	wait 2 seconds
	remove speed from {_player}
	apply speed 2 to {_player} for 10000000000 seconds replacing existing effect

function kitSkill_Thief_5(player: player):
	if {Stats.%{_player}%::Stealing.Job Switch} is true:
		kitStealItem({_player}, "Job Switch")
	else:
		set {_tool} to {_player}'s tool
		toolCT({_player}, "Thief", 5)
		kitMsg({_player}, "§2光線を発射します...")
		set {_baseloc} to location of head of {_player}
		loop 30 times:
			{_tg} is not set
			add 1 to {_front}
			add 40 to {_rad}
			set {_loc} to location {_front} meters in front of {_baseloc}
			loop all players in radius 2 around {_loc}:
				kitCheckTeam(loop-player, {_player}, false, true) is true
				{_tg} is not set
				set {_tg} to loop-player
			playSound("entity.experience_orb.pickup", 1, 0.05 * {_front}, {_loc})
			drawDot count 1, particle "happyvillager", center {_loc}, visibleRange 50
		# 円を描くパーティクル ##########
			set {_eb} to {_loc}
			set {_m1} to {_eb}
			set {_p} to pitch of {_m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_m1} to {_p}
			set {_test1} to 0.5 * cos({_rad})
			set {_t1} to location {_test1} meters in front of {_m1}
			set {_m2} to {_eb}
			set pitch of {_m2} to 0
			set {_test2} to 0.5 * sin({_rad})
			set {_t2} to location {_test2} meters to the right of {_m2}
			set x-coordinate of {_eb} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_eb}
			set y-coordinate of {_eb} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_eb}
			set z-coordinate of {_eb} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_eb}
			drawDot count 1, particle "happyvillager", center {_eb}, visibleRange 50
		# #############################
			wait a tick
		if {_tg} is set:
			playSound("entity.player.levelup", 1, 1, {_tg})
			playSound("entity.player.levelup", 1, 1, {_player})
			kitMsg({_player}, "§6%{_tg}% §aの職を奪った!")
			message formatted "§3職を奪われてしまった!" to {_tg}
			set {_class} to {Class::%{_tg}%}
			set {Stats.%{_tg}%::Stealed.Job Switch} to true
			set {Stats.%{_player}%::Stealing.Job Switch} to true
		# Needyにする処理 ##############
			set {_jewel} to saveJewels({_tg})
			set {_gem} to saveGems({_tg})
			set {_wool} to saveWools({_tg})
			set {_spwool} to saveSpecialWool({_tg})
			set {_th} to {_tg}'s health
			execute console command "/skclass %{_tg}% Kit-Needy"
			set {_tg}'s health to {_th}
			giveEmJItems({_tg}, {_jewel}, {_gem})
			giveStWItems({_tg}, {_wool}, {_spwool})
		# lootアイテムを渡す処理 ########
			set {_skills::*} to kitSkillList({_class})
			loop {_skills::*}:
				add 1 to {_sknum}
				set {_skills::%loop-index%} to kitItemTagChanger({_skills::%loop-index%}, {_class}, "Skill", {_sknum})
			set {StealItem-Job Switch.%{_player}%::*} to {_skills::*}
			set {_lootitem} to a bundle named "%display name of {_tool}% §b[§eloot§b]" with lore lore of {_tool}
			set {_lootitem} to kitItemTagChanger({_lootitem}, "Thief", "Skill", 5)
			remove {_tool} from {_player}
			give {_lootitem} to {_player}
		# #############################
			wait 5 seconds
			if {Stats.%{_tg}%::Stealed.Job Switch} is true:
				set {_jewel} to saveJewels({_tg})
				set {_gem} to saveGems({_tg})
				set {_wool} to saveWools({_tg})
				set {_spwool} to saveSpecialWool({_tg})
				execute console command "/class %{_class}% %{_tg}% false"
				giveEmJItems({_tg}, {_jewel}, {_gem})
				giveStWItems({_tg}, {_wool}, {_spwool})
				delete {Stats.%{_tg}%::Stealed.Job Switch}
			if {Stats.%{_player}%::Stealing.Job Switch} is true:
				remove {_lootitem} from {_player}
				give {_tool} to {_player}
				delete {StealItem-Job Switch.%{_player}%::*}
				delete {Stats.%{_player}%::Stealing.Job Switch}

function kitSkill_Thief_6(player: player):
	kitOpenSkinScanner({_player})

function kitOpenSkinScanner(player: player):
	wait a tick
	open chest with 3 row named "§6§lSkin Scanner" to {_player}
	wait a tick
	set {_slot} to 0
	loop all players in radius 30 around {_player}:
		metadata value "gametype" of loop-player is "Kit"
		loop-player is not {_player}
		set slot {_slot} of {_player}'s current inventory to loop-player's head named "§f§l%name of loop-player%"
		add 1 to {_slot}

function kitSetSkinScanner(player: player, target: player):
	toolCT({_player}, "Thief", 6)
	set {_Class} to {Class::%{_target}%}
	set {_CLS} to {CLS::%{_target}%}
	set {Stats.%{_player}%::FakePlayer} to {_target}
	set {Stats.%{_player}%::FakeClass} to {_Class}
	set {Stats.%{_player}%::FakeCLS} to {_CLS}
	execute console command "/disguiseplayer %{_player}% Player %{_target}%"
	kitMsg({_player}, "§6§l%{_target}% §bに変装しました...")
	playSound("block.enchantment_table.use", 1, 0.5, {_player})
	execute console command "/skclass %{_player}% Kit-%{_Class}%"
	set {_weapon.main} to kitPlayerWeaponItem({_target}, {_Class}, "main")
	give {_weapon.main} to {_player}
	set {_weapon.sub} to kitPlayerWeaponItem({_target}, {_Class}, "sub")
	set {_player}'s offhand tool to {_weapon.sub}
	loop 3 times:
		set {_skill} to kitPlayerSkillItem({_target}, {_Class}, loop-number)
		give {_skill} to {_player}
		kitItemTargetTimer({_player}, {_skill})
	set {_el} to location 1 meter above {_player}
	loop 30 times:
		draw 1 happyvillager particle at {_el} with direction randomVector({_el}) and speed 0.3, keepFor 1 tick
	wait 30 seconds
	if {Stats.%{_player}%::FakePlayer} is set:
		execute console command "/undisplayer %{_player}%"
		delete {Stats.%{_player}%::FakePlayer}
		delete {Stats.%{_player}%::FakeClass}
		delete {Stats.%{_player}%::FakeCLS}
		kitMsg({_player}, "§c§l変装が解除された!")
		execute console command "/skclass %{_player}% Kit-Thief"
		set {_weapon.main} to kitPlayerWeaponItem({_player}, "Thief", "main")
		give {_weapon.main} to {_player}
		set {_weapon.sub} to kitPlayerWeaponItem({_player}, "Thief", "sub")
		set {_player}'s offhand tool to {_weapon.sub}
		loop 3 times:
			set {_skill} to kitPlayerSkillItem({_player}, "Thief", loop-number)
			give {_skill} to {_player}

on damage of player:
	attacker is set
	{Stats.%victim%::FakePlayer} is set
	kitCheckTeam(victim, attacker, false) is true
	apply glowing 1 to victim for 1 second replacing existing effect


function kitSkill_Thief_7(player: player):
	if {Stats.%{_player}%::Stealing.Theft Declaration} is true:
		kitStealItem({_player}, "Theft Declaration")
	else:
		set {_tool} to {_player}'s tool
		toolCT({_player}, "Thief", 7)
		kitMsg({_player}, "§9予告状を出した...")
		playSound("entity.arrow.shoot", 1, 0.5, {_player})
		set {_from} to location of head of {_player}
		set {_to} to location 30 meters in front of {_from}
		set {_vector} to setVector({_from}, {_to})
		drop a paper named "%{_player}%" at location of head of {_player}
		set metadata value "gametype" of last dropped item to "Kit"
		set metadata value "unpickable" of last dropped item to "true"
		set metadata value "theft-declaration" of last dropped item to "%{_player}%"
		drawDot count 1, particle "cloud", center last dropped item, visibleRange 30, keepFor 3 seconds
		set velocity of last dropped item to {_vector}
		wait 3 seconds
		loop all entities:
			metadata value "gametype" of loop-entity is "Kit"
			metadata value "theft-declaration" of loop-entity is "%{_player}%"
			set {_baseloc} to location of loop-entity
			delete loop-entity
		set yaw of {_baseloc} to yaw of {_player}
		set pitch of {_baseloc} to pitch of {_player}
		teleport {_player} to {_baseloc}
		make a fake explosion at {_baseloc}
		kitEffect_TheftDeclaration({_baseloc})
		kitMsg({_player}, "§c予告の通り窃盗を行なう!")
		playSound("entity.zombie_villager.converted", 1, 2, {_baseloc})
		set {Stats.%{_player}%::Stealing.Theft Declaration} to true
		loop all players in radius 10 around {_baseloc}:
			kitCheckTeam({_player}, loop-player, false, true) is true
			message formatted "§bスキル§cを盗まれてしまった!" to loop-player
			set {_skillnum} to a random integer between 1 and 3
			if {Class::%loop-player%} is "Werewolf":
				if {Stats.%loop-player%::Instinct} is true:
					set {_type} to "Werewolf_Instinct"
				else:
					set {_type} to {Class::%loop-player%}
			else if {Class::%loop-player%} is "Vampire":
				if {Stats.%loop-player%::BatMode} is true:
					set {_type} to "Vampire_Bat"
				else:
					set {_type} to {Class::%loop-player%}
			else:
				set {_type} to {Class::%loop-player%}
			set {_skill} to kitPlayerSkillItem(loop-player, {_type}, {_skillnum})
			if loop-player's inventory contains {_skill}:
				add {_skill} to {_skills::*}
				add {_skill} to {_stealskill.%loop-player%::*}
				remove {_skill} from loop-player
			loop 2 times:
				set {_c} to kitPercentDuel({_player}, loop-player, 30, true)
				chance of {_c}%:
					add 1 to {_skillnum}
					if {_skillnum} > 3:
						set {_skillnum} to 1
					set {_skill} to kitPlayerSkillItem(loop-player, {_type}, {_skillnum})
					if loop-player's inventory contains {_skill}:
						add {_skill} to {_skills::*}
						add {_skill} to {_stealskill.%loop-player%::*}
						remove {_skill} from loop-player
			set {Stats.%loop-player%::Stealed.Theft Declaration} to true
			add loop-player to {_stealed::*}
		set {StealItem-Theft Declaration.%{_player}%::*} to {_skills::*}
		set {_lootitem} to a bundle named "%display name of {_tool}% §b[§eloot§b]" with lore lore of {_tool}
		set {_lootitem} to kitItemTagChanger({_lootitem}, "Thief", "Skill", 7)
		remove {_tool} from {_player}
		give {_lootitem} to {_player}
		wait 10 seconds
		loop all players:
			{_stealed::*} contains loop-player
			if {Stats.%loop-player%::Stealed.Theft Declaration} is true:
				loop {_stealskill.%loop-player%::*}:
					give loop-value-2 to loop-player
				delete {Stats.%loop-player%::Stealed.Theft Declaration}
		if {Stats.%{_player}%::Stealing.Theft Declaration} is true:
			remove {_lootitem} from {_player}
			give {_tool} to {_player}
			delete {StealItem-Theft Declaration.%{_player}%::*}
			delete {Stats.%{_player}%::Stealing.Theft Declaration}

on damage of dropped item:
	metadata value "theft-declaration" of victim is set
	cancel event

function kitEffect_TheftDeclaration(loc: location):
	set {_rad} to 0
	loop 10 times:
		set {_m} to 11 - loop-number
		loop 10 times:
			set {_el} to {_loc}
			add 36 to {_rad}
			add {_m} * sin({_rad}) to x-coordinate of {_el}
			add {_m} * cos({_rad}) to z-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 255, 255, 255, center {_el}, visibleRange 30
		add 10 to {_rad}
		wait a tick

function kitSkill_Thief_8(player: player):
	if {Stats.%{_player}%::SkillLocation} is set:
		toolCT({_player}, "Thief", 8)
		set {_now} to now
		set {Stats.%{_player}%::FenceMarker-Time} to {_now}
		kitFakeDeleteData({_player}, "Fence Marker")
		set {_loc.base} to {Stats.%{_player}%::SkillLocation}
		kitFakeBlock({_player}, {_loc.base}, "minecraft:end_rod", "Fence Marker")
		set {_loc.top} to location 1 meter above {_loc.base}
		kitFakeBlock({_player}, {_loc.top}, "minecraft:dead_fire_coral_fan", "Fence Marker")
		set {Stats.%{_player}%::FenceMarker} to {_loc.top}
		kitMsg({_player}, "§7盗品売買所§5を設置しました...")
		playSound("entity.witch.celebrate", 1, 0.9, {_loc.base})
		while {Stats.%{_player}%::FenceMarker-Time} is {_now}:
			wait a second
			delete {_exist}
			loop all entities:
				type of loop-entity is armor stand
				metadata value "kit-armor" of loop-entity is "Fence Marker"
				metadata value "Fence Marker" of loop-entity is "%{_player}%"
				set {_exist} to true
			if {_exist} is true:
				kitFakeReload({_player}, "Fence Marker")
			else:
				delete {Stats.%{_player}%::FenceMarker}
				delete {Stats.%{_player}%::FenceMarker-Time}
	else:
		send action bar "§c§l発動地点が有効ではありません!" to {_player}

on leftclick holding an ender rod:
	metadata value "gametype" of player is "Kit"
	set {_tool} to player's tool
	kitItemAllChecker({_tool}, "Thief", "Skill", 8) is true
	if {Stats.%player%::FenceMarker} is set:
		open chest with 3 row named "§d§lFence Marker" to player
		wait a tick
		loop all players in radius 15 around {Stats.%player%::FenceMarker}:
			kitCheckTeam(loop-player, player, false, true) is true
			{Class::%loop-player%} is not "Thief"
			if {Class::%loop-player%} is "Werewolf":
				if {Stats.%loop-player%::Instinct} is true:
					set {_type} to "Werewolf_Instinct"
				else:
					set {_type} to {Class::%loop-player%}
			else if {Class::%loop-player%} is "Vampire":
				if {Stats.%loop-player%::BatMode} is true:
					set {_type} to "Vampire_Bat"
				else:
					set {_type} to {Class::%loop-player%}
			else:
				set {_type} to {Class::%loop-player%}
			set {_num} to 0
			loop 3 times:
				add 1 to {_num}
				set {_skill} to kitPlayerSkillItem(loop-player, {_type}, {_num})
				if loop-player's inventory contains {_skill}:
					set {_lore::*} to lore of {_skill}
					add "§5§m------------------------------" to {_lore::*}
					add "§f[§b§lスキル情報§f]" to {_lore::*}
					add "§6所持者§7: §e%loop-player%" to {_lore::*}
					add "§6キット§7: §e%{_type}%" to {_lore::*}
					add "§6ナンバー§7: §e%{_num}%" to {_lore::*}
					set lore of {_skill} to {_lore::*}
					add {_skill} to {_skills::*}
		set {_slot} to 0
		loop {_skills::*}:
			set slot {_slot} of player's current inventory to loop-value
			add 1 to {_slot}
	else:
		send action bar "§c§lマーカーを設置してください!" to player

# Stealed Item管理 #######################

on inventory click:
	metadata value "gametype" of player is "Kit"
	type of event-inventory is chest inventory
	if inventory name of event-inventory contains "§e§lLoot Item§8:":
		cancel event
		set {_skill} to clicked item
		{_skill} is set
		"%type of {_skill}%" is not "air"
		if kitItemKitChecker({_skill}) is not "Thief":
			set {_inv} to inventory name of event-inventory
			replace "§e§lLoot Item§8: §6" with "" in {_inv}
			if {Stats.%player%::Stealing.%{_inv}%} is true:
				set {Stats.%player%::UsingSteal.%{_inv}%} to true
				delete {Stats.%player%::Stealing.%{_inv}%}
				delete {StealItem-%{_inv}%.%player%::*}
				loop all items in player's inventory:
					name of loop-item contains "%{_inv}%"
					name of loop-item contains "§b[§eloot§b]"
					set {_lootitem} to loop-item
				remove {_lootitem} from player
				give {_skill} to player
				kitItemTargetTimer(player, {_skill})
				kitMsg(player, "§b選択スキルを§6§l獲得§bしました!")
				close player's inventory
				wait 10 seconds
				if {Stats.%player%::UsingSteal.%{_inv}%} is true:
					delete {Stats.%player%::UsingSteal.%{_inv}%}
					if {_inv} is "Perfect Steal":
						set {_skillnum} to 3
					else if {_inv} is "Job Switch":
						set {_skillnum} to 5
					else if {_inv} is "Theft Declaration":
						set {_skillnum} to 7
					set {_return} to kitSkillItem("Thief", {_skillnum})
					set {_return} to kitItemTagChanger({_return}, "Thief", "Skill", {_skillnum})
					remove {_skill} from player
					give {_return} to player
			else:
				kitMsg(player, "§c§l既にスキルを返却済です!")
		else:
			kitMsg(player, "§c§lThiefのスキルを盗むことは出来ません!")
# Skill 6
	else if inventory name of event-inventory is "§6§lSkin Scanner":
		cancel event
		set {_playeritem} to clicked item
		{_playeritem} is set
		"%type of {_playeritem}%" is not "air"
		set {_target} to display name of {_playeritem}
		replace "§f§l" with "" in {_target}
		set {_target} to {_target} parsed as player
		kitSetSkinScanner(player, {_target})
		close player's inventory
# Skill 8
	else if inventory name of event-inventory is "§d§lFence Marker":
		cancel event
		if {Stats.%player%::FenceMarker} is set:
			set {_fakeskill} to clicked item
			{_fakeskill} is set
			"%type of {_fakeskill}%" is not "air"
			close player's inventory
			set {_lore::*} to lore of {_fakeskill}
			loop {_lore::*}:
				if loop-value contains "§6所持者§7: §e":
					set {_target} to loop-value
					replace "§6所持者§7: §e" with "" in {_target}
					set {_target} to {_target} parsed as player
				else if loop-value contains "§6キット§7: §e":
					set {_type} to loop-value
					replace "§6キット§7: §e" with "" in {_type}
				else if loop-value contains "§6ナンバー§7: §e":
					set {_skillnum} to loop-value
					replace "§6ナンバー§7: §e" with "" in {_skillnum}
					set {_skillnum} to {_skillnum} parsed as number
			set {_skill} to kitPlayerSkillItem({_target}, {_type}, {_skillnum})
			if {_target}'s inventory contains {_skill}:
				kitItemTargetTimer(player, {_skill})
				kitMsg(player, "§8Fence Marker§dより §a%display name of {_skill}% §dを強奪した!")
				message formatted "§a%display name of {_skill}% §1を奪われた!" to {_target}
				playSound("entity.item.pickup", 1, 0.5, player)
				playSound("entity.witch.drink", 1, 0.9, {Stats.%player%::FenceMarker})
				set {_from} to {Stats.%player%::FenceMarker}
				set {_to} to location of head of {_target}
				set {_vector} to setVector({_from}, {_to})
				set yaw of {_from} to yaw of {_vector}
				set pitch of {_from} to pitch of {_vector}
				set {_dis} to round(distance between {_from} and {_to})
				loop {_dis} times:
					set {_el} to location loop-number meters in front of {_from}
					drawDot count 1, particle "smoke", center {_el}, visibleRange 30
				loop all items in player's inventory:
					{_deleted} is not set
					kitItemAllChecker(loop-item, "Thief", "Skill", 8) is true
					set {_deleted} to true
					set {_tool} to loop-item
					remove loop-item from player
				set {Stats.%player%::Stealing.Fence Marker} to true
				set {Stats.%{_target}%::Stealed.Fence Marker} to true
				give {_skill} to player
				remove all {_skill} from {_target}
				wait 10 seconds
				if {Stats.%player%::Stealing.Fence Marker} is true:
					remove {_skill} from player
					give {_tool} to player
					delete {Stats.%player%::Stealing.Fence Marker}
				if {Stats.%{_target}%::Stealed.Fence Marker} is true:
					give {_skill} to {_target}
					delete {Stats.%{_target}%::Stealed.Fence Marker}
			else:
				send action bar "§c§l既にそのプレイヤーはスキルを所持していません!" to player
		else:
			send action bar "§c§l既にマーカーが破壊されています!" to player

function kitStealItem(player: player, inv: text):
	wait a tick
	open chest with 3 row named "§e§lLoot Item§8: §6%{_inv}%" to {_player}
	wait a tick
	set {_slot} to 0
	loop {StealItem-%{_inv}%.%{_player}%::*}:
		set slot {_slot} of {_player}'s current inventory to loop-value
		add 1 to {_slot}

# #########################################

on damage of player:
	if damage was caused by fall:
		{CLS::%victim%} is "THI"
		cancel event

function kitTimerThief(player: player):
	set {_timer} to 0
	while {Class::%{_player}%} is "Thief":
		set {_tool} to {_player}'s tool
		add 1 to {_timer}
		if kitItemTypeChecker({_tool}) is "Weapon.main":
			if kitItemNumberChecker({_tool}) is not 5:
				stop
		if {_timer} > 30:
			set {_timer} to 0
			if {Stats.%{_player}%::LuckyPunch} is set:
				if {Stats.%{_player}%::LuckyPunch} > 0:
					subtract 1 from {Stats.%{_player}%::LuckyPunch}
					kitMsg({_player}, "§6運の調整が入った! §elevel: §l%{Stats.%{_player}%::LuckyPunch}%")
				else if {Stats.%{_player}%::LuckyPunch} < 0:
					add 1 to {Stats.%{_player}%::LuckyPunch}
					kitMsg({_player}, "§6運の調整が入った! §elevel: §l%{Stats.%{_player}%::LuckyPunch}%")
				if {Stats.%{_player}%::LuckyPunch} >= 0:
					set {_lucky} to {Stats.%{_player}%::LuckyPunch}
					kitLuck({_player}, {_lucky})
				else:
					set {_lucky} to {Stats.%{_player}%::LuckyPunch} * -1
					kitBadLuck({_player}, {_lucky})
		wait a second

# Ultimate
function kitUltThief(player: player):
	message "§c周辺10mの敵のKitをNeedyに変更し,2ダメージを与えます!" to {_player}
	message "§c効果を付与した敵の人数に応じて自身の体力を回復します!" to {_player}
	loop all players in radius 10 around {_player}:
		if kitCheckTeam(loop-player, {_player}, false, true) is true:
			make a fake explosion at loop-player
			drawDot count 1, particle "blockcrack", material oak log, center loop-player, visibleRange 30, keepFor 100 ticks
			add loop-player to {_hit::*}
			if {Class::%loop-player%} is "Werewolf":
				if {Stats.%loop-player%::Instinct} is true:
					set {_class} to "Werewolf_Instinct"
				else:
					set {_class} to {Class::%loop-player%}
			else if {Class::%loop-player%} is "Vampire":
				if {Stats.%loop-player%::BatMode} is true:
					set {_class} to "Vampire_Bat"
				else:
					set {_class} to {Class::%loop-player%}
			else:
				set {_class} to {Class::%loop-player%}
			set {Stats.%loop-player%::ThiefUlt} to {_class}
			set {_jewel} to saveJewels(loop-player)
			set {_gem} to saveGems(loop-player)
			set {_wool} to saveWools(loop-player)
			set {_spwool} to saveSpecialWool(loop-player)
			set {_th} to loop-player's health
			execute console command "/skclass %loop-player% Kit-Needy"
			set loop-player's health to {_th}
			giveEmJItems(loop-player, {_jewel}, {_gem})
			giveStWItems(loop-player, {_wool}, {_spwool})
			kitDamage({_player}, loop-player, 2, true)
			heal {_player} by 1 heart
	wait 10 seconds
	loop {_hit::*}:
		{Stats.%loop-value%::ThiefUlt} is set
		set {_jewel} to saveJewels(loop-value)
		set {_gem} to saveGems(loop-value)
		set {_wool} to saveWools(loop-value)
		set {_spwool} to saveSpecialWool(loop-value)
		set {_th} to loop-value's health
		execute console command "/class %{Stats.%loop-value%::ThiefUlt}% %loop-value% false"
		set loop-value's health to {_th}
		giveEmJItems(loop-value, {_jewel}, {_gem})
		giveStWItems(loop-value, {_wool}, {_spwool})
		delete {Stats.%loop-value%::ThiefUlt}