function kitFakeBlock(player: player, location: location, block: block data, transformation: objects, metadata: text) :: entity:
	set {_team} to getTeam({_player}, true)
	set {_rgb} to kitTeamRGB({_team})
	set {_color} to {_rgb}.asBukkitColor()

	spawn a block display at {_location}
	set {_blockdisplay} to spawned block display
	set metadata value "gametype" of {_blockdisplay} to "Kit"
	set metadata value "kit-block" of {_blockdisplay} to {_metadata}
	set metadata value {_metadata} of {_blockdisplay} to "%{_player}%"

	setBrightness({_blockdisplay})
	{_blockDisplay}.setGlowColorOverride({_color})
	{_blockdisplay}.setTeleportDuration(1)
	{_blockdisplay}.setInterpolationDuration(1)
	{_blockdisplay}.setViewRange(1000)
	setTransformation({_blockdisplay}, {_transformation::1}, {_transformation::2}, {_transformation::3}, {_transformation::4})
	setDisplayBlock({_blockdisplay}, {_block})

	return {_blockdisplay}

function kitFakeItem(player: player, location: location, item: item type, transformation: objects, metadata: text) :: entity:
	set {_team} to getTeam({_player}, true)
	set {_rgb} to kitTeamRGB({_team})
	set {_color} to {_rgb}.asBukkitColor()

	spawn an item display at {_location}
	set {_itemdisplay} to spawned item display
	set metadata value "gametype" of {_itemdisplay} to "Kit"
	set metadata value "kit-item" of {_itemdisplay} to {_metadata}
	set metadata value {_metadata} of {_itemdisplay} to "%{_player}%"

	setBrightness({_itemdisplay})
	{_itemdisplay}.setGlowColorOverride({_color})
	{_itemdisplay}.setTeleportDuration(1)
	{_itemdisplay}.setInterpolationDuration(1)
	{_itemdisplay}.setViewRange(1000)
	setTransformation({_itemdisplay}, {_transformation::1}, {_transformation::2}, {_transformation::3}, {_transformation::4})
	setDisplayItem({_itemdisplay}, {_item})

	return {_itemdisplay}

function kitTransformation(left_rotation: text, right_rotation: text, translation: text, scale: text) :: text:
	set {_transformation} to "{left_rotation:%{_left_rotation}%,right_rotation:%{_right_rotation}%,translation:%{_translation}%,scale:%{_scale}%}"
	return {_transformation}

command /kit-createdisplaytest <text> <text> <text> <text> <text> <text>:
	aliases: /kit-cdt
	usage: /kit-displaytest <block/item> <object> <left> <right> <translation> <scale>
	executable by: player
	permission: sk.admin
	trigger:
		message formatted "§c§lこのコマンドを使う際には更新作業をお願いします" to {_player}
		stop

		set {_arg} to arg 1
		set {_object} to arg 2
		set {_left_rotation} to arg 3
		set {_right_rotation} to arg 4
		set {_translation} to arg 5
		set {_scale} to arg 6
		set {_transformation} to kitTransformation({_left_rotation}, {_right_rotation}, {_translation}, {_scale})
		if {_arg} is "block":
			kitFakeBlock(player, location of player, {_object}, {_transformation}, "display-test")
		else if {_arg} is "item":
			kitFakeItem(player, location of player, {_object}, {_transformation}, "display-test")
		else:
			message formatted "§b§lBlock§9/§b§lItem§cのいずれかを選択してください" to player
			stop

command /kit-deletedisplaytest:
	aliases: /kit-ddt
	permission: sk.admin
	trigger:
		set {_display.block} to 0
		loop all block displays:
			metadata value "display-test" of loop-block display is "%player%"
			add 1 to {_display.block}
			delete loop-block display
		set {_display.item} to 0
		loop all item displays:
			metadata value "display-test" of loop-item display is "%player%"
			add 1 to {_display.item}
			delete loop-item display
		set {_display.all} to {_display.block} + {_display.item}
		message formatted "§6§l%{_display.all}% §aの§eテストディスプレイ§aを削除しました§b:" to player
		message formatted "§9Block§b: §e§l%{_display.block}%" to player
		message formatted "§9Item§b: §e§l%{_display.item}%" to player

function kitFakeCheck(player: player, metadata: text) :: boolean:
	set {_bool} to false
	loop all block displays:
		metadata value "kit-block" of loop-block display is {_metadata}
		metadata value {_metadata} of loop-block display is "%{_player}%"
		set {_bool} to true
	loop all item displays:
		metadata value "kit-item" of loop-item display is {_metadata}
		metadata value {_metadata} of loop-item display is "%{_player}%"
		set {_bool} to true
	return {_bool}

function kitFakeDelete(player: offline player):
	loop all block displays:
		metadata value "kit-block" of loop-block display is set
		set {_metadata} to metadata value "kit-block" of loop-block display
		# EngineerのUltは破壊しない
		if {_metadata} is "Machine-Transport Lift":
			continue

		metadata value {_metadata} of loop-block display is "%{_player}%"
		delete loop-block display
	loop all item displays:
		metadata value "kit-item" of loop-item display is set
		set {_metadata} to metadata value "kit-item" of loop-item display
		metadata value {_metadata} of loop-item display is "%{_player}%"
		delete loop-item display

function kitFakeDeleteData(player: offline player, metadata: text):
	loop all block displays:
		metadata value "kit-block" of loop-block display is {_metadata}
		metadata value {_metadata} of loop-block display is "%{_player}%"
		delete loop-block display
	loop all item displays:
		metadata value "kit-item" of loop-item display is {_metadata}
		metadata value {_metadata} of loop-item display is "%{_player}%"
		delete loop-item display

function kitFakeDeleteAll():
	loop all block displays:
		metadata value "kit-block" of loop-block display is set
		delete loop-block display
	loop all item displays:
		metadata value "kit-item" of loop-item display is set
		delete loop-item display

on arm swing:
	set {_hand} to event.getHand()
	if "%{_hand}%" is not "hand_slot":
		stop
	set {_tg} to checkPunchMachine(player)
	if {_tg} is not set:
		stop
	set {_metadata} to metadata value "kit-block" of {_tg}
	if {_metadata} is not set:
		set {_metadata} to metadata value "kit-item" of {_tg}
	set {_target} to metadata value {_metadata} of {_tg}
	set {_target} to {_target} parsed as offline player
	if kitCheckTeam(player, {_target}, false) is true:
		make a fake explosion at location of {_tg}
		kitMsg({_target}, "§9§l%{_metadata}% §cが破壊された!")
		message formatted "§e%{_target}%§aの§9§l%{_metadata}%§aを破壊しました!" to player
		kitFakeDeleteData({_target}, {_metadata})
	else:
		message formatted "§c§l味方の設置物は破壊できません!" to player

local function checkPunchMachine(player: player) :: entity:
	set {_baseloc} to location of head of {_player}
	set {_meter} to 0.3
	set {_meter.max} to 3
	set {_loopcount} to round({_meter.max} / {_meter})
	loop {_loopcount} times:
		if {_returnentity} is set:
			continue
		set {_m.current} to {_meter} * loop-number
		set {_loc} to location {_m.current} meters in front of {_baseloc}
		if block at {_loc} is not passable:
			stop
		loop all entities in radius 1 around {_loc}:
			if checkEntityType(loop-entity, block display) is true:
				metadata value "kit-block" of loop-entity is set
				set {_returnentity} to loop-entity
			else if checkEntityType(loop-entity, item display) is true:
				metadata value "kit-item" of loop-entity is set
				set {_returnentity} to loop-entity
	return {_returnentity}

on projectile hit:
	loop all entities in radius 3 around projectile:
		delete {_target}
		delete {_metadata}
		if checkEntityType(loop-entity, block display) is true:
			if metadata value "kit-block" of loop-entity is not set:
				stop
			set {_metadata} to metadata value "kit-block" of loop-entity
			set {_target} to metadata value {_metadata} of loop-entity
		else if checkEntityType(loop-entity, item display) is true:
			if metadata value "kit-item" of loop-entity is not set:
				stop
			set {_metadata} to metadata value "kit-item" of loop-entity
			set {_target} to metadata value {_metadata} of loop-entity
		else:
			stop
		set {_target} to {_target} parsed as offline player
		if kitCheckTeam(shooter, {_target}, false) is true:
			make a fake explosion at location of loop-entity
			if {_breaks::*} does not contain {_metadata}:
				kitFakeDeleteData({_target}, {_metadata})
				add {_metadata} to {_breaks::*}
				kitMsg({_target}, "§9§l%{_metadata}% §cが破壊された!")
				message "§e%{_target}%§aの§9§l%{_metadata}%§aを破壊しました!" to shooter
		else:
			message "§c§l味方の設置物は破壊できません!" to shooter
