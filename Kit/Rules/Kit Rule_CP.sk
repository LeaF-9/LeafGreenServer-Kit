aliases:
	coreblock = minecraft:iron_block, minecraft:gold_block, minecraft:diamond_block, minecraft:air, minecraft:bedrock

function kitSetHologram_CP(stage: text):
	loop {Kit-GameStageAreas::*}:
		set {_paloc} to loop-value
		set {_loc} to location 0.25 meters below {_paloc}
		set {_nameloc} to location 3.5 meters above {_paloc}
		set {_typeloc} to location 3.3 meters above {_paloc}
		set {_type} to {Kit-GameStageType::%loop-index%}
		if {_type} is "Iron":
			set {_color} to "§8"
		else if {_type} is "Gold":
			set {_color} to "§6"
		else if {_type} is "Diamond":
			set {_color} to "§b"
		set {_nbt} to nbt compound from "{NoGravity:1b,Size:0.5,Invulnerable:1,PersistenceRequired:1,NoAI:1,Silent:1,Glowing:1,DropItem:0,active_effects:[{id:invisibility,duration:12000,amplifier:0,show_particles:0b}],Team:""kit-white""}"
		spawn a magma cube at {_loc} with nbt {_nbt}
		set metadata value "gametype" of spawned magma cube to "Kit"
		set metadata value "kit-areaname" of spawned magma cube to "%loop-index%"
		set {_nbt} to nbt compound from "{Invulnerable:1b,PersistenceRequired:1b,NoBasePlate:1b,NoGravity:1b,Invisible:1b,Marker:1b}"
		spawn an armor stand at {_nameloc} with nbt {_nbt}
		set spawned armor stand's display name to "§f§l%loop-index%"
		set metadata value "gametype" of spawned armor stand to "Kit"
		set metadata value "paname" of spawned armor stand to "%loop-index%"
		set {_nbt} to nbt compound from "{Invulnerable:1b,PersistenceRequired:1b,NoBasePlate:1b,NoGravity:1b,Invisible:1b,Marker:1b}"
		spawn an armor stand at {_typeloc} with nbt {_nbt}
		set spawned armor stand's display name to "%{_color}%%{_type}% Area"
		set metadata value "gametype" of spawned armor stand to "Kit"

function kitChangeHologram_CP(team: text, area: text):
	set {_color} to kitTeamColor({_team})
	loop all entities:
		type of loop-entity is an armor stand
		metadata value "paname" of loop-entity is "%{_area}%"
		set loop-entity's display name to "%{_color}%§l%{_area}%"
	loop all magma cubes:
		metadata value "kit-areaname" of loop-magma cube is "%{_area}%"
		delete loop-magma cube
	set {_loc} to {Kit-GameStageAreas::%{_area}%}
	add -0.25 to y-coordinate of {_loc}
	set {_nbt} to nbt compound from "{NoGravity:1b,Size:0.5,Invulnerable:1,PersistenceRequired:1,NoAI:1,Silent:1,Glowing:1,DropItem:0,active_effects:[{id:invisibility,duration:12000,amplifier:0,show_particles:0b}],Team:""kit-%{_team}%""}"
	spawn a magma cube at {_loc} with nbt {_nbt}
	set metadata value "gametype" of spawned magma cube to "Kit"
	set metadata value "kit-areaname" of spawned magma cube to "%{_area}%"

# TeamBuff適用
on damage of player:
	{Kit-tochu} is true
	{Kit-GameStage::rule} is "DTC"
	if {Join::%victim%} is "Kit":
		delete {_ok}
		loop {Kit-GameStageAreas::*}:
			set {_ok} to kitCheckInPlayer_CP(victim, loop-index)
		if {_ok} is true:
			set damage to damage / {Kit-TeamBuff::%{TrueTeam::%victim%}%}
	if {Join::%attacker%} is "Kit":
		delete {_ok}
		loop {Kit-GameStageAreas::*}:
			set {_ok} to kitCheckInPlayer_CP(attacker, loop-index)
		if {_ok} is true:
			set damage to damage * {Kit-TeamBuff::%{TrueTeam::%attacker%}%}

function kitDeathEvent_CP(attacker: player, victim: player, supporters: players):
	# Death情報の更新
	add 1 to {Kit-Death.personal::%{_victim}%}
	kitScorePersonal({_victim}, 1, "§4%{Kit-Kill.personal::%{_victim}%}% §7/ §1%{Kit-Death.personal::%{_victim}%}%")
	set {Kit-KD.personal::%{_victim}%} to {Kit-Kill.personal::%{_victim}%} / {Kit-Death.personal::%{_victim}%}
	# Kill情報の更新
	add 1 to {Kit-Kill.personal::%{_attacker}%}
	kitScorePersonal({_attacker}, 1, "§4%{Kit-Kill.personal::%{_attacker}%}% §7/ §1%{Kit-Death.personal::%{_attacker}%}%")
	set {Kit-KD.personal::%{_attacker}%} to {Kit-Kill.personal::%{_attacker}%} / {Kit-Death.personal::%{_attacker}%}

function kitCheckArea_CP():
	loop {Kit-GameStageAreas::*}:
		set {_teamcolor::red} to 0
		set {_teamcolor::blue} to 0
		set {_teamcolor::yellow} to 0
		set {_teamcolor::green} to 0
		set {_teamnum} to 0
#	周辺の矢の削除 (on projectile hitのループ対策)
		# loop all projectiles in radius 3 around loop-value:
		# 	loop-projectile is an arrow or a spectral arrow
		# 	delete loop-projectile
		loop all players:
			kitCheckInPlayer_CP(loop-player, loop-index) is true
			set {_team} to {TrueTeam::%loop-player%}
			add 1 to {_teamcolor::%{_team}%}
		set {_max} to max({_teamcolor::red}, {_teamcolor::blue}, {_teamcolor::yellow}, {_teamcolor::green})
		if {_teamcolor::red} is {_max}:
			set {_win} to "red"
			add 1 to {_teamnum}
		if {_teamcolor::blue} is {_max}:
			set {_win} to "blue"
			add 1 to {_teamnum}
		if {_teamcolor::yellow} is {_max}:
			set {_win} to "yellow"
			add 1 to {_teamnum}
		if {_teamcolor::green} is {_max}:
			set {_win} to "green"
			add 1 to {_teamnum}
		if {_teamnum} is 1:
			kitExecuteArea_CP({_win}, loop-index)

function kitExecuteArea_CP(team: text, pa: text):
	set {_true} to 0
	set {_false} to 0
	set {_red} to "&c"
	set {_blue} to "&9"
	set {_yellow} to "&e"
	set {_green} to "&a"
	set {_type} to {Kit-GameStageType::%{_pa}%}
	set {_typecolor} to kitSetTypeColor_CP({_type})
	# set {_pa} to setCasePA({_pa})
	set {_loc} to {Kit-GameStageAreas::%{_pa}%}
	set {_range} to {Kit-GameStageRange::%{_pa}%}
	set {_blockrange} to {Kit-GameStageRange::%{_pa}%} + 1
# 占領されているかどうかのチェック
	if {Kit-AreaSecure::%{_pa}%} is set:
# 占領が自チームであるかどうかのチェック
		if {Kit-AreaSecure::%{_pa}%} is {_team}:
			stop
# 占領解除が自チームであるかどうかのチェック
		if {Kit-AreaRelease::%{_pa}%} is {_team}:
			stop
#	占領が自チームでなければ占領解除
		set {Kit-AreaRelease::%{_pa}%} to {_team}
		# エリア内の変更ブロック全てを保存してループ
		set {_cpblocks::*} to kitCompileBlocksInArea_CP({_pa})
		loop {_cpblocks::*}:
			# 範囲内のプレイヤーをループ
			loop all players:
				kitCheckInPlayer_CP(loop-player, {_pa}) is true
				kitCheckAlive(loop-player) is true
				if {TrueTeam::%loop-player%} is not {Kit-AreaSecure::%{_pa}%}:
					add 1 to {_true}
				else:
					add 1 to {_false}
			# 人数同数であればループする
			if {_true} = {_false}:
				while {_true} = {_false}:
					set {_true} to 0
					set {_false} to 0
					loop all players:
						kitCheckInPlayer_CP(loop-player, {_pa}) is true
						if {TrueTeam::%loop-player%} is not {Kit-AreaSecure::%{_pa}%}:
							add 1 to {_true}
						else:
							add 1 to {_false}
					set {_tf} to {_true} + {_false}
					if {_tf} = 0:
						set {_false} to 100
					wait a tick
			#　占領解除の人数が足りている場合
			if {_true} > {_false}:
				set {_true} to 0
				set {_false} to 0
			# 足りていない場合は元のチーム色に戻す
			else:
				loop {_cpblocks::*}:
					set block at loop-value-2 to kitSetColorBlock_CP(block at loop-value-2, {Kit-AreaSecure::%{_pa}%})
				delete {Kit-AreaRelease::%{_pa}%}
			# 占領解除がなお自チームのものである場合
			if {Kit-AreaRelease::%{_pa}%} is {_team}:
				set block at loop-value to kitSetColorBlock_CP(block at loop-value, "white")
				set {_dif} to {Kit-PRank::%{Kit-AreaSecure::%{_pa}%}%} - {Kit-PRank::%{Kit-AreaRelease::%{_pa}%}%}
				if {_dif} > 0:
					add 1 to {_dif}
					set {_dtick} to "%{_dif}% ticks" parsed as time span
				else:
					set {_dtick} to a tick
				wait {_dtick}
			# そうでなければコードストップ
			else:
				stop
		delete {Kit-AreaSecure::%{_pa}%}
		delete {Kit-AreaRelease::%{_pa}%}
		gameMsg("Kit", "§e§l!§6§l!§c§l! %{_typecolor}%§l%{_pa}% §5の占領が解除されました! §e§l!§6§l!§c§l!")
		kitChangeHologram_CP("white", {_pa})
		loop all players in radius {_range} around {_loc}:
			{TrueTeam::%loop-player%} is {_team}
			# execute console command "/givecoin %loop-player% 3 占領解除"
	# 占領中が自チームであればコードストップ
	if {Kit-AreaOccupy::%{_pa}%} is {_team}:
		stop
	# 占領の開始
	set {Kit-AreaOccupy::%{_pa}%} to {_team}
	set {_cpblocks::*} to kitCompileBlocksInArea_CP({_pa})
	loop {_cpblocks::*}:
		loop all players:
			kitCheckInPlayer_CP(loop-player, {_pa}) is true
			if {TrueTeam::%loop-player%} is {Kit-AreaOccupy::%{_pa}%}:
				add 1 to {_true}
			else:
				add 1 to {_false}
		# 人数同数であればループする
		if {_true} = {_false}:
			while {_true} = {_false}:
				set {_true} to 0
				set {_false} to 0
				loop all players:
					kitCheckInPlayer_CP(loop-player, {_pa}) is true
					if {TrueTeam::%loop-player%} is {Kit-AreaOccupy::%{_pa}%}:
						add 1 to {_true}
					else:
						add 1 to {_false}
				set {_tf} to {_true} + {_false}
				if {_tf} = 0:
					set {_false} to 100
				wait a tick
		# 占領解除の人数が足りているかどうか
		if {_true} > {_false}:
			set {_true} to 0
			set {_false} to 0
		# 足りていなければ白色に戻す
		else:
			loop {_cpblocks::*}:
				set block at loop-value-2 to kitSetColorBlock_CP(block at loop-value-2, "white")
			delete {Kit-AreaOccupy::%{_pa}%}
		# 占領中がなお自チームであるかどうか
		if {Kit-AreaOccupy::%{_pa}%} is {_team}:
			set block at loop-value to kitSetColorBlock_CP(block at loop-value, {_team})
			set {_preotick} to {Kit-GameStageTime::%{_pa}%}
			set {_mf} to false
			loop all players:
				kitCheckInPlayer_CP(loop-player, {_pa}) is true
				{TrueTeam::%loop-player%} is {_team}
				if loop-player has mining fatigue:
					set {_mf} to true
			if {_mf} is true:
				add 1 to {_preotick}
			set {_otick} to "%{_preotick}% ticks" parsed as time span
			wait {_otick}
#	そうでなければコードストップ
		else:
			stop
	set {Kit-AreaSecure::%{_pa}%} to {_team}
	delete {Kit-AreaOccupy::%{_pa}%}
	gameMsg("Kit", "§e§l!§6§l!§c§l! %{_typecolor}%§l%{_pa}% §aが <%{_team}%>%{_team}% §aに占領されました! §e§l!§6§l!§c§l!")
	kitChangeHologram_CP({_team}, {_pa})
	# loop all players:
	# 	{TrueTeam::%loop-player%} is {_team}
	# 	kitCheckInPlayer(loop-player, {_pa}) is true
	# 	if {_type} is "Iron":
	# 		execute console command "/givecoin %loop-player% 5 アイアン占領"
	# 	else if {_type} is "Gold":
	# 		execute console command "/givecoin %loop-player% 7 ゴールド占領"
	# 	else if {_type} is "Diamond":
	# 		execute console command "/givecoin %loop-player% 10 ダイヤ占領"

function kitSetTypeColor_CP(type: text) :: text:
	if {_type} is "Iron":
		set {_color} to "§8"
	else if {_type} is "Gold":
		set {_color} to "§6"
	else if {_type} is "Diamond":
		set {_color} to "§b"
	return {_color}

function kitSetColorBlock_CP(block: block, color: text) :: item:
	if {Kit-GameStage::color-%{_color}%} is set:
		return {Kit-GameStage::color-%{_color}%}
	else:
		if type of {_block} is wool:
			set {_pb} to "%{_color}% wool" parsed as item
			return {_pb}
		else if type of {_block} is hard clay:
			set {_pb} to "%{_color}% hard clay" parsed as item
			return {_pb}
		else if type of {_block} is glass:
			set {_pb} to "%{_color}% glass" parsed as item
			return {_pb}
		else if type of {_block} is concrete:
			set {_pb} to "%{_color}% concrete" parsed as item
			return {_pb}
		else if type of {_block} is concrete powder:
			set {_pb} to "%{_color}% concrete powder" parsed as item
			return {_pb}

# プレイヤーが領域内にいるかどうか確認する関数
function kitCheckInPlayer_CP(player: player, areaname: text) :: boolean:
	if {Join::%{_player}%} is not "Kit":
		return false
	if metadata value "gametype" of {_player} is not "Kit":
		return false
	if kitCheckAlive({_player}) is false:
		return false
	set {_loc} to {Kit-GameStageAreas::%{_areaname}%}
	add 0.5 to y-pos of {_loc}
	set {_form} to {Kit-GameStageForm::%{_areaname}%}
	set {_range} to {Kit-GameStageRange::%{_areaname}%}
	if {_form} is "sphere":
		if y-pos of {_player} < y-pos of {_loc}:
			return false
		if distance between {_loc} and {_player} > {_range}:
			return false
		return true
	else if {_form} is "cuboid":
		set {_loc.player} to location of {_player}
		# loc.1 (negative)
		set {_loc.1} to {_loc}
		subtract {_range} from x-pos of {_loc.1}
		subtract {_range} from z-pos of {_loc.1}
		# loc.2 (positive)
		set {_loc.2} to {_loc}
		add {_range} to x-pos of {_loc.2}
		add {_range} to z-pos of {_loc.2}
		add 5 to y-pos of {_loc.2}
		if {_loc.player} is not within {_loc.1} and {_loc.2}:
			return false
		return true
	else:
		return false

# エリア内のブロック地点をまとめて出力する関数
function kitCompileBlocksInArea_CP(areaname: text) :: locations:
	set {_loc} to {Kit-GameStageAreas::%{_areaname}%}
	set {_form} to {Kit-GameStageForm::%{_areaname}%}
	set {_range} to {Kit-GameStageRange::%{_areaname}%} + 1
	if {_form} is "sphere":
		loop all blocks in radius {_range} around {_loc}:
			loop-block is not coreblock
			block below loop-block is glowstone
			add location of loop-block to {_locs::*}
	else if {_form} is "cuboid":
		# loc.1 (negative)
		set {_loc.1} to {_loc}
		subtract {_range} from x-pos of {_loc.1}
		subtract {_range} from z-pos of {_loc.1}
		# loc.2 (positive)
		set {_loc.2} to {_loc}
		add {_range} to x-pos of {_loc.2}
		add {_range} to z-pos of {_loc.2}
		add {_range} * 2 + 1 to y-pos of {_loc.2}
		loop all blocks within {_loc.1} and {_loc.2}:
			loop-block is not coreblock
			block below loop-block is glowstone
			add location of loop-block to {_locs::*}
	return {_locs::*}

function kitTimer_CP():
	while {Kit-tochu} is true:
		# CPのプレイヤー数をチェック
		kitCheckArea_CP()
		# チーム順位を設定
		loop {Kit-TeamPoint::*}:
			set {_list::%loop-index%} to loop-value
		delete {_rank}
		loop 4 times:
			add 1 to {_rank}
			set {_high} to 0
			loop {_list::*}:
				loop-value-2 > {_high}
				set {_high} to loop-value-2
				set {_highteam} to loop-index
			if {_high} is not 0:
				set {Kit-PRank::%{_highteam}%} to {_rank}
				delete {_list::%{_highteam}%}
				delete {_highteam}
			else:
				loop {_list::*}:
					set {Kit-PRank::%loop-index%} to 4
		# TeamPoint更新
		loop {Kit-GameStageAreas::*}:
			{Kit-AreaSecure::%loop-index%} is set
			if {Kit-GameStageType::%loop-index%} is "Iron":
				set {_point} to 1 * {Kit-TeamBuff::%{Kit-AreaSecure::%loop-index%}%}
			else if {Kit-GameStageType::%loop-index%} is "Gold":
				set {_point} to 3 * {Kit-TeamBuff::%{Kit-AreaSecure::%loop-index%}%}
			else if {Kit-GameStageType::%loop-index%} is "Diamond":
				set {_point} to 5 * {Kit-TeamBuff::%{Kit-AreaSecure::%loop-index%}%}
			add {_point} to {Kit-TeamPoint::%{Kit-AreaSecure::%loop-index%}%}
		# 勝敗決定
		loop {Kit-TeamPoint::*}:
			if loop-value >= {Kit-GameStage::goal}:
				add loop-index to {Kit-WinTeam::*}
				gameMsg("Kit", "§c§l試合終了!")
				stopTimer("Kit-CP")
				stop
		# Scoreboard更新
		add 1 to {_sc}
		if {_sc} > 10:
			set {_sc} to 1
			loop all players:
				{Join::%loop-player%} is "Kit"
				scoreboard_Wipe(loop-player)
		else if {_sc} = 6:
			loop all players:
				{Join::%loop-player%} is "Kit"
				scoreboard_Wipe(loop-player)
		if {_sc} <= 5:
			kitChangeScoreboard_CP("point")
		else:
			kitChangeScoreboard_CP("area")
		wait a second

function kitChangeScoreboard_CP(type: text):
	if {_type} is "point":
		loop all players:
			if {Join::%loop-player%} is "Kit":
				scoreboard_UpdateTitle(loop-player, "§a§lKit PvP")
				if {Kit-GameStage::team} is "4" or 4:
					scoreboard_UpdateLine(loop-player, "§c赤§7: §6%floor({Kit-TeamPoint::red})%", 7)
					scoreboard_UpdateLine(loop-player, "§9青§7: §6%floor({Kit-TeamPoint::blue})%", 6)
					scoreboard_UpdateLine(loop-player, "§e黄§7: §6%floor({Kit-TeamPoint::yellow})%", 5)
					scoreboard_UpdateLine(loop-player, "§a緑§7: §6%floor({Kit-TeamPoint::green})%", 4)
				else:
					scoreboard_UpdateLine(loop-player, "§c赤§7: §6%floor({Kit-TeamPoint::red})%", 7)
					scoreboard_UpdateLine(loop-player, "§9青§7: §6%floor({Kit-TeamPoint::blue})%", 6)
				scoreboard_UpdateLine(loop-player, " ", 3)
				scoreboard_UpdateLine(loop-player, "§6あなたの戦績", 2)
				scoreboard_UpdateLine(loop-player, "§4%{Kit-Kill.personal::%loop-player%}% §7/ §1%{Kit-Death.personal::%loop-player%}%", 1)
	else if {_type} is "area":
		loop all players:
			if {Join::%loop-player%} is "Kit":
				scoreboard_UpdateTitle(loop-player, "§a§lKit PvP")
				set {_slot} to 16
				loop {Kit-GameStageAreas::*}:
					delete {_team}
					subtract 1 from {_slot}
					set {_pa} to loop-index
					set {_team} to {Kit-AreaSecure::%{_pa}%}
					if {_team} is set:
						set {_color} to kitTeamColor({_team})
					else:
						set {_color} to "<##FFFFFF>"
					if {Kit-GameStageType::%{_pa}%} is "Iron":
						set {_ct} to "8"
					else if {Kit-GameStageType::%{_pa}%} is "Gold":
						set {_ct} to "6"
					else if {Kit-GameStageType::%{_pa}%} is "Diamond":
						set {_ct} to "b"
					scoreboard_UpdateLine(loop-player, "§%{_ct}%- %{_color}%%{_pa}%", {_slot})