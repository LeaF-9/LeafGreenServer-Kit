options:
	prefix: §e[§aCTF§e]§r

# 用意すべきyaml項目:
# - Kit-GameStageFlags::*

function kitDeathEvent_CTF(attacker: player, victim: player, supporters: players):
	# Death情報の更新
	add 1 to {Kit-Death.personal::%{_victim}%}
	kitScorePersonal({_victim}, 1, "§4%{Kit-Kill.personal::%{_victim}%}% §7/ §1%{Kit-Death.personal::%{_victim}%}%")
	set {Kit-KD.personal::%{_victim}%} to {Kit-Kill.personal::%{_victim}%} / {Kit-Death.personal::%{_victim}%}
	# Kill情報の更新
	add 1 to {Kit-Kill.personal::%{_attacker}%}
	kitScorePersonal({_attacker}, 1, "§4%{Kit-Kill.personal::%{_attacker}%}% §7/ §1%{Kit-Death.personal::%{_attacker}%}%")
	set {Kit-KD.personal::%{_attacker}%} to {Kit-Kill.personal::%{_attacker}%} / {Kit-Death.personal::%{_attacker}%}

# Flag所持者のダメージを変更する処理
on damage of player:
	{Kit-FlagHolder} is victim
	attacker is set
	set {_calc} to kitFlagDamage_CTF(victim)
	setDamageModification_MUL(victim, {_calc})

# Flag所持者のダメージ倍率を計算する関数
local function kitFlagDamage_CTF(player: player) :: number:
	set {_percent} to 1

	set {_team} to {TrueTeam::%{_player}%}
	set {_point} to {Kit-FlagPoint::%{_team}%}
	set {_average} to average({Kit-FlagPoint::*})
	set {_percent} to {_point} / {_average}
	if {_percent} < 0.5:
		set {_percent} to 0.5

	return {_percent}

# ---Respawn Timeを延長する処理---
on death of player:
	{Kit-tochu} is true
	{Kit-GameStage::rule} is "CTF"
	# ---victimがFlagHolderであった場合の処理---
	kitFlagDrop_CTF(victim)
	# ---------------------------------------
	if {Kit-FlagHolder} is set:
		{Kit-FlagHolder} is not victim
		if kitCheckTeam(victim, {Kit-FlagHolder}, true, true) is true:
			set {_dis} to 10000
			loop {Kit-GameStageRespawns.%{TrueTeam::%{Kit-FlagHolder}%}%::*}:
				set {_d} to distance between {Kit-FlagHolder} and loop-value
				if {_d} < {_dis}:
					set {_dis} to {_d}
			if {_dis} <= 30:
				set {_addTime} to round(30 - {_dis})
				set {_respawnTime} to 10 + {_addTime}
			else:
				set {_respawnTime} to 10
			# --- !!! 注意 !!! この値更新がリスポーン時間変更に間に合うかどうか不明! 確認が必要 ---
			set {-Stats.%victim%::SpawnTime} to {_respawnTime}
			# --------------------------------------------------------------------------
# ------------------------------

function kitFlagSpawn_CTF(location: location, color: text = "white", former: text = "<none>"):  # Flagを対象地点にスポーンさせる関数
	set {_mgloc} to {_location}
	set pitch of {_mgloc} to 0
	set {_transformation} to kitTransformation("[0f,0f,0f,1f]", "[0f,0f,0f,1f]", "[0f,0.5f,0f]", "[1f,1f,1f]")
	set {_nbt} to nbt compound from "{PersistenceRequired:1,Glowing:1,transformation:%{_transformation}%,item:{id:""%{_color}%_banner"",Count:1b},Team:""kit-%{_color}%""}"
	spawn an item display at {_mgloc} with nbt {_nbt}
	set metadata value "gametype" of spawned item display to "Kit"
	set metadata value "flag-color" of spawned item display to {_color}
	set metadata value "flag-former" of spawned item display to {_former}
	if {_color} is "white":
		joinPlayerMsg("Kit", "{@prefix} §f§lFlag §bがスポーンしました!")

function kitFlagGet_CTF(player: player):  # プレイヤーがFlagを獲得した際の処理を行う関数
	# Flag所持者のデータ更新
	set {Kit-FlagHolder} to {_player}
	# Kit変更処理
	set {Class::%{_player}%} to "Flag"
	set {CLS::%{_player}%} to "FLA"
	set {_team} to {TrueTeam::%{_player}%} in strict proper case
	execute console command "/skclass %{_player}% Kit-Flag-%{_team}%"
	# メッセージ通知
	joinPlayerMsg("Kit", "{@prefix} §6§l%{_player}% §bが§f§lFlag§bを獲得しました!")
	# タイトル通知
	set {_color} to kitTeamColor({_team})
	set {_title} to "%{_color}%§l%{_player}% §6が §f§lFlag §6を獲得しました!"
	loop all players:
		metadata value "gametype" of loop-player is "Kit"
		if {_player} is loop-player:  # Flagを獲得した本人
			send title {_title} with subtitle "§b敵に奪われないよう逃げ回ろう!" to loop-player for 5 seconds
		else:
			if kitCheckTeam({_player}, loop-player, true, true) is true:  # 味方がFlagを獲得した場合
				send title {_title} with subtitle "§bFlag所有者を敵から守り抜こう!" to loop-player for 5 seconds
			else:  # 敵がFlagを所有した場合
				send title {_title} with subtitle "§bFlag所有者を倒して奪い取ろう!" to loop-player for 5 seconds
		# ---音の演出---
		playSound("block.note_block.chime", 1, 1, loop-player, true)
		# -------------
	

function kitFlagDrop_CTF(holder: player):  # holderがflagを持っていた際にFlagを落とす処理を行なう関数
	if {Kit-FlagHolder} is {_holder}:
		delete {Kit-FlagHolder}
		set {_team} to {TrueTeam::%{_holder}%}
		set {_baseloc} to location of {_holder}
		loop all players:
			metadata value "gametype" of loop-player is "Kit"
			# ---Flagが落ちたことを知らせる全体メッセージ---
			set {_title} to "§f§lFlag §cが§4§lドロップ§cした!"
			send title {_title} to loop-player for 1 second
			# ----------------------------------------
			# ---Flagが落ちたことを知らせる全体サウンド---
			playSound(entity.blaze.hurt, 1, 0.5, loop-player, true)
			# --------------------------------------
		# ---Holderが死んだ位置の確認---
		if block at {_baseloc} is lava:  # 死んだ位置が溶岩の中
			# ---溶岩外までドロップ位置を変更---
			set {_true} to false
			set {_loc} to {_baseloc}
			while {_true} is false:
				set {_loc} to location 1 meters above {_loc}
				if block at {_loc} is not lava:
					set {_true} to true
				else if y-coordinate of {_loc} > 320:
					set {_true} to true
			if {_true} is true:
				set {_baseloc} to {_loc}
			# -----------------------------
		if block at {_baseloc} is not passable:  # 死んだ位置がブロックで埋まっている
			# ---ブロック外までドロップ位置を変更---
			set {_true} to false
			set {_loc} to {_baseloc}
			while {_true} is false:
				set {_loc} to location 1 meters above {_loc}
				if block at {_loc} is passable:
					set {_true} to true
				else if y-coordinate of {_loc} > 320:
					set {_true} to true
			if {_true} is true:
				set {_baseloc} to {_loc}
			# --------------------------------
		if y-coordinate of {_baseloc} > 320:  # 死んだ位置が天空
			joinPlayerMsg("Kit", "§6§lFlag所持者§cの死亡地点が不正であった為,§f§lFlag§cの所有権は消滅しました")
		else if y-coordinate of {_baseloc} < -64:  # 死んだ位置が奈落
			joinPlayerMsg("Kit", "§6§lFlag所持者§cの死亡地点が不正であった為,§f§lFlag§cの所有権は消滅しました")
		else:
			kitFlagSpawn_CTF({_baseloc}, {_team}, "%{_holder}%")
		# ---------------------------

# Flagの獲得範囲を示すパーティクル演出
local function kitFlagParticle_CTF(baseloc: location, color: text):
	if {_color} is "white":
		set {_hex} to rgb(255, 255, 255)
	else if {_color} is "red":
		set {_hex} to rgb(255, 0, 0)
	else if {_color} is "blue":
		set {_hex} to rgb(0, 0, 255)
	else if {_color} is "yellow":
		set {_hex} to rgb(255, 255, 0)
	else if {_color} is "green":
		set {_hex} to rgb(0, 255, 0)
	else:
		set {_hex} to rgb(255, 0, 255)
	loop 20 times:
		set {_rad} to 0
		loop 36 times:
			set {_el} to {_baseloc}
			add 10 to {_rad}
			add 1.5 * sin({_rad}) to x-pos of {_el}
			add 1.5 * cos({_rad}) to z-pos of {_el}
			spawnParticle_Dust({_hex}, 0.5, {_el})
		wait a tick

function kitTimer_CTF():
	while {Kit-tochu} is true:
		# ---Flagが存在するかチェック---
		delete {_flag.entity}
		delete {_flag.color}
		delete {_flag.player}
		loop all entities:
			metadata value "flag-color" of loop-entity is set
			set {_flag.entity} to loop-entity
			set {_flag.color} to metadata value "flag-color" of loop-entity
			set {_flag.former} to metadata value "flag-former" of loop-entity
		# --------------------------
		# ---Flagが存在する場合 獲得の処理---
		if {_flag.entity} is set:
			set {_flag.location} to location of {_flag.entity}
			set {_dis} to 100
			# ---Flag取得者の確認---
			loop all players in radius 1.5 around {_flag.location}:
				metadata value "gametype" of loop-player is "Kit"
				gamemode of loop-player is survival
				{_flag.former} is not "%loop-player%"
				set {_d} to distance between {_flag.location} and location of loop-player
				if {_dis} > {_d}:
					set {_dis} to {_d}
					set {_flag.player} to loop-player
			# --------------------
			# ---Flag取得者が存在した場合---
			if {_flag.player} is set:
				# ---中央地点のFlagの場合---
				if {_flag.color} is "white":
					kitFlagGet_CTF({_flag.player})
				# -----------------------
				# ---色の付いたFlagの場合---
				else:
					# ---同じチーム色のFlagだった場合---
					if {TrueTeam::%{_flag.player}%} is {_flag.color}:
						kitFlagGet_CTF({_flag.player})  # 再取得の処理
					# ------------------------------
					# ---異なるチーム色のFlagだった場合---
					else:
						set {_flag.spawntimer} to 0  # 次に中央スポーンする時間を測るタイマーの設定
						joinPlayerMsg("Kit", "§f§lFlag §7が奪取されました! §b10秒後に再度スポーンします...")
						# ---音の演出---
						loop all players:
							metadata value "gametype" of loop-player is "Kit"
							playSound("entity.blaze.death", 1, 0.5, loop-player, true)
						# -------------
						# ---リスポーン時間の再調整---
						loop all players:
							{TrueTeam::%loop-player%} is {_flag.color}
							{Kit-Spawning::%loop-player%} > 100
							set {Kit-Spawning::%loop-player%} to 100
						# ------------------------
					# --------------------------------
				# -------------------------
				loop all entities:
					metadata value "flag-color" of loop-entity is set
					delete loop-entity
			else:  # 取得者が存在しなかった場合は獲得範囲を表示
				kitFlagParticle_CTF({_flag.location}, {_flag.color})
			# ---------------------------
		# ---------------------------------
		# ---Flagとその所有者どちらも存在しない場合の処理---
		else if {Kit-FlagHolder} is not set:
			if {_flag.spawntimer} is not set:
				set {_flag.spawntimer} to 0
			add 1 to {_flag.spawntimer}
			if {_flag.spawntimer} >= 10:
				delete {_flag.spawntimer}
				set {_flag.spawnloc} to a random location out of {Kit-GameStageFlags::*}
				kitFlagSpawn_CTF({_flag.spawnloc})
		# -------------------------------------------
		# ---Flagを取得中のポイント処理---
		if {Kit-FlagHolder} is set:
			set {_holder.teamcolor} to {TrueTeam::%{Kit-FlagHolder}%}
			add {Kit-TeamBuff::%{_holder.teamcolor}%} to {Kit-FlagPoint::%{_holder.teamcolor}%}
			add 1 to {Kit-Hold.personal::%{Kit-FlagHolder}%}
			# ---スコアボード設定---
			set {_point.rounded} to floor({Kit-FlagPoint::%{_holder.teamcolor}%})
			if {_holder.teamcolor} is "red":
				kitScoreGlobal(7, "§c赤§7: §6%{_point.rounded}%")
			else if {_holder.teamcolor} is "blue":
				kitScoreGlobal(6, "§9青§7: §6%{_point.rounded}%")
			else if {_holder.teamcolor} is "yellow":
				kitScoreGlobal(5, "§e黄§7: §6%{_point.rounded}%")
			else if {_holder.teamcolor} is "green":
				kitScoreGlobal(4, "§a緑§7: §6%{_point.rounded}%")
			# -------------------
			# ---サウンド設定---
			# 処理保留
			# ----------------
			# ---勝利ポイントに達した際の処理---
			if {Kit-FlagPoint::%{_holder.teamcolor}%} >= {Kit-GameStage::goal}:
				add {_holder.teamcolor} to {Kit-WinTeam::*}
				gameMsg("Kit", "§c§l試合終了!")
				stopTimer("Kit-CTF")
				stop
			# -----------------------------
		# ----------------------------
		wait a second