# Weapons
on damage of player:
	if {Class::%attacker%} is "Paladin":
		if damage was caused by attack:
			set {_tool} to attacker's tool
			kitItemAllChecker({_tool}, "Paladin", "Weapon.main", 2) is true
			attacker is alive
			set {_c} to kitPercent(attacker, 30, true)
			chance of {_c}%:
				kitHeal(attacker, 1)
		else if damage was caused by projectile:
			metadata value "angelic-bow" of projectile is "true"
			attacker is alive
			heal attacker by 1 heart
	if {Class::%victim%} is "Paladin":
		damage was caused by potion
		victim is blocking
		set {_tool} to victim's offhand tool
		kitItemAllChecker({_tool}, "Paladin", "Weapon.sub", 3) is true
		set {_c} to kitPercent(victim, 80, true)
		chance of {_c}%:
			cancel event
			set {_y} to -1
			loop 3 times:
				set {_c} to 0
				loop 3 times:
					add 1 to {_c}
					set {_color::%{_c}%} to a random integer between 0 and 255
				set {_el} to location of victim
				add 1 to {_y}
				add {_y} to y-coordinate of {_el}
				add a random number between -1 and 1 to x-coordinate of {_el}
				add a random number between -1 and 1 to z-coordinate of {_el}
				drawDot count 1, particle "mobspell", RGB {_color::1}, {_color::2}, {_color::1}, center {_el}, visibleRange 30
			playSound("block.conduit.activate", 1, 2, victim)

function kitWeaponPaladin(player: player):
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	checkCT({_player}, name of {_player}'s tool) is true
	if {_item.num} is 5:
		kitWeapon_Paladin_5({_player})

function kitWeapon_Paladin_5(player: player):
	toolCT({_player}, "Paladin", 5, "Weapon.main")
	kitMsg({_player}, "<##1e90ff>周辺に妖精の力を分配します!")
	playSound("entity.illusioner.cast_spell", 1, 0.5, {_player})
	loop all entities in radius 10 around {_player}:
		if kitCheckTeam(loop-entity, {_player}, true) is true:
			setSupporter(loop-entity, {_player})
			apply regeneration 3 to loop-entity for 5 seconds
			message formatted "<##1e90ff>%{_player}% <##00ffbf>より妖精の再生力が付与された!" to loop-entity
			add loop-entity to {_loc.a::*}
		else if kitCheckTeam(loop-entity, {_player}, false) is true:
			LastKiller(loop-entity, {_player})
			apply poison 3 to loop-entity for 5 seconds
			message formatted "<##1e90ff>%{_player}% <##ff00bf>より妖精のいたずらが付与された!" to loop-entity
			add loop-entity to {_loc.e::*}
	set {_loc} to location of {_player}
	loop 5 times:
		loop all blocks in radius 10 around {_loc}:
			loop-block is passable
			chance of 1%:
				set {_r} to a random integer between 0 and 255
				set {_g} to a random integer between 0 and 255
				set {_b} to a random integer between 0 and 255
				drawDot count 1, particle "mobspell", RGB {_r}, {_g}, {_b}, center location of loop-block, visibleRange 30
				set {_p} to a random number between 0.5 and 2
				playSound("entity.firework_rocket.twinkle", 0.1, {_p}, location of loop-block)
		loop {_loc.a::*}:
			loop 3 times:
				set {_l} to aroundEffect(loop-value-2)
				set {_rb} to a random integer between 0 and 200
				drawDot count 1, particle "mobspell", RGB {_rb}, 255, {_rb}, center {_l}, visibleRange 30
		loop {_loc.e::*}:
			loop 3 times:
				set {_l} to aroundEffect(loop-value-2)
				set {_gb} to a random integer between 0 and 200
				drawDot count 1, particle "mobspell", RGB 255, {_gb}, {_gb}, center {_l}, visibleRange 30
		wait a tick

# Skills
function kitSkillPaladin(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_player}'s tool) is true:
		if {_item.num} is 1:
			kitSkill_Paladin_1({_player})
		else if {_item.num} is 2:
			kitSkill_Paladin_2({_player})
		else if {_item.num} is 3:
			kitSkill_Paladin_3({_player})
		else if {_item.num} is 4:
			kitSkill_Paladin_4({_player})
		else if {_item.num} is 5:
			kitSkill_Paladin_5({_player})
		else if {_item.num} is 6:
			kitSkill_Paladin_6({_player})
		else if {_item.num} is 7:
			kitSkill_Paladin_7({_player})
		else if {_item.num} is 8:
			kitSkill_Paladin_8({_player})
	return true

on leftclick holding a emerald:
	set {_tool} to player's tool
	kitItemAllChecker({_tool}, "Paladin", "Skill", 1) is true
	{Stats.%player%::Guarding} is true
	loop all players:
		{Stats.%loop-player%::AllySafeguard} is player
		set {_tp} to loop-player
	delete {Stats.%{_tp}%::AllySafeguard}
	delete {Stats.%player%::Guarding}
	kitMsg(player, "§e護衛状態を解除しました")
	send action bar "§e§l%player% §6§lの護衛が解除されました" to {_tp}

function kitSkill_Paladin_1(player: player):
	if {Stats.%{_player}%::SkillTarget} is set:
		toolCT({_player}, "Paladin", 1)
		set {_tp} to {Stats.%{_player}%::SkillTarget}
		set {Stats.%{_player}%::Guarding} to true
		set {Stats.%{_tp}%::AllySafeguard} to {_player}
		kitMsg({_player}, "§a守る相手を§6%{_tp}%§aに設定しました!")
		send action bar "§a%{Stats.%{_tp}%::AllySafeguard}% §7が護衛してくれるそうです!" to {_tp}
		loop 5 times:
			set {_el} to aroundEffect({_tp})
			drawDot count 1, particle "happyvillager", center {_el}, visibleRange 30
	else:
		send action bar "§c§l対象のプレイヤーがいません" to {_player}

on damage of player:
	if {Stats.%victim%::AllySafeguard} is set:
		damage cause is not fall, void, lava, flame or suffocation
		loop all players:
			{Stats.%victim%::AllySafeguard} is loop-player
			distance between loop-player and victim <= 15
			set {_per} to kitPercent(loop-player, 50, true)
			chance of {_per}%:
				setSupporter(victim, loop-player)
				set {_dl} to damage * 0.8
				cancel the event
				playSound("entity.iron_golem.hurt", 1, 1, victim)
				kitDamage(attacker, loop-player, {_dl})
				send action bar "§2%loop-player% §7が§cダメージを受け持ってくれました!" to victim
				send action bar "§6%victim% §aを護衛しました!" to loop-player
				loop 10 times:
					set {_el} to aroundEffect(loop-player)
					drawDot count 1, particle "happyvillager", center {_el}, visibleRange 30

on death of player:
	loop all players:
		{Stats.%loop-player%::AllySafeguard} is victim
		delete {Stats.%loop-player%::AllySafeguard}

function kitSkill_Paladin_2(player: player):
	if {_player}'s health <= 5:
		send action bar "§c§l体力が少なすぎます!" to {_player}
	else:
		toolCT({_player}, "Paladin", 2)
		subtract 5 from {_player}'s health
		loop all players:
			loop-player is not {_player}
			kitCheckTeam(loop-player, {_player}, true) is true
			loop-player is alive
			kitHeal(loop-player, 3)
			setSupporter(loop-player, {_player})
			message "§a%{_player}% §cが体力を回復してくれました!" to loop-player
		kitMsg({_player}, "§c体力を削って味方全員の体力を回復しました!")
		playSound("entity.vex.hurt", 1, 0.5, {_player})

function kitSkill_Paladin_3(player: player):
	setCT({_player}, name of {_player}'s tool, 60)
	set {Stats.%{_player}%::FairyProtection} to true
	set {Stats.%{_player}%::Resurrection} to true
	kitMsg({_player}, "§d妖精の加護を受けました!")
	apply regeneration 2 to {_player} for 5 seconds
	playSound("entity.firework_rocket.twinkle", 1, 1.5, {_player})
	loop 100 times:
		if {Stats.%{_player}%::FairyProtection} is true:
			set {_effloc} to location of {_player}
			add 18 to {_rad}
			add 0.02 to {_y}
			add {_y} to y-coordinate of {_effloc}
			add 0.5 * sin({_rad}) to x-coordinate of {_effloc}
			add 0.5 * cos({_rad}) to z-coordinate of {_effloc}
			drawDot count 1, particle "mobspell", RGB 255, 20, 147, center {_effloc}, visibleRange 30
			wait a tick
	delete {Stats.%{_player}%::Resurrection}
	if {Stats.%{_player}%::FairyProtection} is true:
		delete {Stats.%{_player}%::FairyProtection}
		kitMsg({_player}, "§e妖精は去っていきました")

on damage of player:
	{Stats.%victim%::FairyProtection} is true
	attacker is set
	apply poison 2 to attacker for 2 seconds replacing existing effect

on death of player:
	{Stats.%victim%::FairyProtection} is true
	kitMsg(victim, "§a妖精が命を分け与えてくれた!")
	playSound("entity.player.levelup", 1, 0.5, victim)
	wait 3 ticks
	kitBadLuck(victim, 3)
	set victim's health to 5
	setCT(victim, "§dFairy Protection", 80)
	set victim's leggings to air
	set slot 1 of victim to air

function kitSkill_Paladin_4(player: player):
	toolCT({_player}, "Paladin", 4)
	kitMsg({_player}, "§e守護の力を分け与えます...")
	playSound("entity.iron_golem.death", 1, 1, {_player})
	kitEffect_SpriteTalisman_1({_player})
	loop all players in radius 10 around {_player}:
		kitCheckTeam(loop-player, {_player}, true) is true
		setSupporter(loop-player, {_player})
		apply resistance 1 to loop-player for 10 seconds
		set {Stats.%loop-player%::SpriteTalisman} to true
		add loop-player to {_effects::*}
	loop 100 times:
		loop {_effects::*}:
			set {_loc} to location of loop-value-2
			set {_vector} to {_loc}
#			座標の設定　主軸{_loc}{_w}{_vw}
			set {_x} to x-coordinate of {_loc}
			set {_y} to y-coordinate of {_loc} + 0.2
			set {_z} to z-coordinate of {_loc}
#			軸の設定　座標{_A}{_vwA}
			set {_A} to {_loc}
			set {_vyA} to 0
			set pitch of {_A} to 0
			set {_vxA1} to location 1 meters to the right of {_A}
			set {_vzA1} to location 1 meters in front of {_A}
#			方向ベクトル{_vwnw}
			set {_vxnx} to x-coordinate of {_vxA1} - {_x}
			set {_vxnz} to z-coordinate of {_vxA1} - {_z}
			set {_vznx} to x-coordinate of {_vzA1} - {_x}
			set {_vznz} to z-coordinate of {_vzA1} - {_z}
			set {_s} to a random number between 0 and 360
			set {_t} to a random number between -1 and 1
			set {_ax} to ({_vxnx} * cos({_s}) + {_vznx} * sin({_s})) * 1.2
			set {_az} to ({_vxnz} * cos({_s}) + {_vznz} * sin({_s})) * 1.2
			set x-coordinate of {_vector} to {_x} + {_ax}
			set y-coordinate of {_vector} to {_y} + {_t}
			set z-coordinate of {_vector} to {_z} + {_az}
			drawDot count 1, particle "redstone", RGB 160, 255, 160, center {_vector}, visibleRange 100, keepFor 0.1 seconds
		wait 2 ticks
	loop {_effects::*}:
		delete {Stats.%loop-value%::SpriteTalisman}

function kitEffect_SpriteTalisman_1(player: player):
	set {_loc} to location of {_player}
	set {_vector} to {_loc}
#	座標の設定　主軸{_loc}{_w}{_vw}
	set {_x} to x-coordinate of {_loc}
	set {_y} to y-coordinate of {_loc} + 0.2
	set {_z} to z-coordinate of {_loc}
#	軸の設定　座標{_A}{_vwA}
	set {_A} to {_loc}
	set {_vyA} to 0
	set pitch of {_A} to 0
	set {_vxA1} to location 1 meters to the right of {_A}
	set {_vzA1} to location 1 meters in front of {_A}
#	方向ベクトル{_vwnw}
	set {_vxnx} to x-coordinate of {_vxA1} - {_x}
	set {_vxnz} to z-coordinate of {_vxA1} - {_z}
	set {_vznx} to x-coordinate of {_vzA1} - {_x}
	set {_vznz} to z-coordinate of {_vzA1} - {_z}
#	発動直後の耐性付与演出ty平面でy=2-0.02t^2
	set {_t} to 0
	loop 10 times:
		set {_ax} to {_vxnx} * cos({_t}) + {_vznx} * sin({_t})
		set {_az} to {_vxnz} * cos({_t}) + {_vznz} * sin({_t})
		set {_s} to 0
		loop 10 times:
			set x-coordinate of {_vector} to {_x} + {_ax} * {_s}
			set y-coordinate of {_vector} to {_y} + 2 - 0.02 * {_s} ^ 2
			set z-coordinate of {_vector} to {_z} + {_az} * {_s}
			drawDot count 1, particle "redstone", RGB 192, 255, 192, center {_vector}, visibleRange 100, keepFor 1 seconds
			add 1 to {_s}
		set {_s} to 0
		loop 5 times:
			set {_ax} to {_vxnx} * cos({_s} + {_t} * 0.5) + {_vznx} * sin({_s} + {_t} * 0.5)
			set {_az} to {_vxnz} * cos({_s} + {_t} * 0.5) + {_vznz} * sin({_s} + {_t} * 0.5)
			set x-coordinate of {_vector} to {_x} + {_ax} * 10
			set y-coordinate of {_vector} to {_y} - {_t} * 0.02
			set z-coordinate of {_vector} to {_z} + {_az} * 10
			drawDot count 1, particle "redstone", RGB 160, 255, 160, center {_vector}, visibleRange 100, keepFor 0.1 seconds
			add 72 to {_s}
		add 36 to {_t}
		wait a tick

function kitEffect_SpriteTalisman_2(player: player):
	set {_loc} to location of {_player}
	set {_x} to x-coordinate of {_loc}
	set {_y} to y-coordinate of {_loc} + 0.7
	set {_z} to z-coordinate of {_loc}
	loop 3 times:
		set {_s} to a random number between -2 and 2
		set {_t} to a random number between -0.7 and 0.7
		set {_u} to a random number between -2 and 2
		set {_p} to 0
		loop 5 times:
			add 0.2 to {_p}
			set x-coordinate of {_vector} to {_x} + {_s} * {_p}
			set y-coordinate of {_vector} to {_y} + {_t} * {_p}
			set z-coordinate of {_vector} to {_z} + {_u} * {_p}
			drawDot count 1, particle "redstone", RGB 192, 255, 192, center {_vector}, visibleRange 100, keepFor 0.1 seconds
		wait a tick

on damage of player:
	{Stats.%victim%::SpriteTalisman} is true
	set {_c} to kitPercentDuel(attacker, victim, 10, false)
	chance of {_c}%:
		cancel event
		playSound("entity.iron_golem.damage", 1, 1.5, victim)
		kitEffect_SpriteTalisman_2(victim)

function kitSkill_Paladin_5(player: player):
	toolCT({_player}, "Paladin", 5)
	kitMsg({_player}, "§8周辺の味方の気配を消します!")
	playSound("entity.wither.ambient", 1, 1, {_player})
	apply glowing 1 to {_player} for 3 seconds
	apply resistance 1 to {_player} for 3 seconds
	loop all players in radius 5 around {_player}:
		loop-player is not {_player}
		kitCheckTeam({_player}, loop-player, true) is true
		setSupporter(loop-player, {_player})
		kitInvisible(loop-player, 3 seconds)
		message formatted "§9透明化を§b%{_player}%§9に付与してもらった!" to loop-player
	set {_to} to vector of location of {_player}
	loop all players in radius 10 around {_player}:
		kitCheckTeam(loop-player, {_player}, false) is true
		set {_from} to vector of location of loop-player
		set {_vector} to {_to} -- {_from}
		set {_vector} to normalized {_vector}
		set {_yaw} to yaw of {_vector}
		set {_pitch} to pitch of {_vector}
		set {_loc} to location of loop-player
		set yaw of {_loc} to {_yaw}
		set pitch of {_loc} to {_pitch}
		teleport loop-player to {_loc}

# function kitRainLocation(red: number, green: number, blue: number, loc: location):
# 	set {_effloc} to {_loc}
# 	set {_ok} to true
# 	while {_ok} is true:
# 		set {_effloc} to location 0.5 meters below {_effloc}
# 		if block at {_effloc} is not passable:
# 			set {_ok} to false
# 		if y-coordinate of {_effloc} <= 0:
# 			set {_ok} to false
# 		drawDot count 1, particle "redstone", RGB {_red}, {_green}, {_blue}, center {_effloc}, visibleRange 30, keepFor 2 ticks
# 		wait a tick

options:
	height: 0.6
	distance: 0.6

function kitSkill_Paladin_6(player: player):
	if {_player} is sneaking:
		toolCT({_player}, "Paladin", 6)
		kitMsg({_player}, "<##fcc800>妖精のバリアを張りました!")
		playSound("entity.illusioner.prepare_mirror", 1, 2, {_player})
		set {Stats.%{_player}%::PlankBarrier} to true
		kitEffect_PlankBarrier_1({_player}, location of {_player})
	else if {Stats.%{_player}%::SkillTarget} is set:
		set {_target} to {Stats.%{_player}%::SkillTarget}
		toolCT({_player}, "Paladin", 6)
		kitMsg({_player}, "§a%{_target}% §eに盾の妖精の加護を与えます...")
		message formatted "§6妖精が盾を張る準備をしています...!" to {_target}
		loop 100 times:
			if {_exist} is not set:
				loop all projectiles in radius 8 around {_target}:
					shooter of loop-projectile is not {_player}
					kitCheckTeam(shooter of loop-projectile, {_target}, false) is true
					set {_exist} to true
					set {_to} to location of loop-projectile
				set {_el} to location of {_target}
				add a random number between -1 and 1 to x-coordinate of {_el}
				add a random number between -1 and 1 to z-coordinate of {_el}
				add a random number between -0.5 and 2.5 to y-coordinate of {_el}
				drawDot count 1, particle "redstone", RGB 255, 191, 128, center {_el}, visibleRange 50
				wait a tick
		if {_exist} is true:
			playSound("entity.illusioner.prepare_mirror", 1, 1.5, {_target})
			set {_from} to location of {_target}
			set {_vector} to setVector({_from}, {_to})
			set yaw of {_from} to yaw of {_vector}
			set pitch of {_from} to pitch of {_vector}
			kitEffect_PlankBarrier_1({_player}, {_from})
			set {Stats.%{_player}%::PlankBarrier} to true
			message formatted "§e妖精が盾を展開した!" to {_target}
		else:
			playSound("entity.illusioner.prepare_mirror", 1, 2, {_target})
			kitEffect_PlankBarrier_1({_player}, location of {_target})
			set {Stats.%{_player}%::PlankBarrier} to true
			message formatted "§e妖精が盾を展開した..." to {_target}
	else:
		send action bar "§c§l対象のプレイヤーがいません" to {_player}

function kitEffect_PlankBarrier_1(player: player, l: location):
	set {_l1} to location 1 meters in front of {_l}
	set {_l2} to location {@height} meters below {_l1}
	set {_l3} to location {@height} * 2 meters below {_l1}
	set {_l4} to location {@distance} meters to the left of {_l1}
	set {_l5} to location {@height} meters below {_l4}
	set {_l6} to location {@height} * 2 meters below {_l4}
	set {_l7} to location {@distance} meters to the right of {_l1}
	set {_l8} to location {@height} meters below {_l7}
	set {_l9} to location {@height} * 2 meters below {_l7}
	loop 9 times:
		set {_loc} to location 2.5 meters above {_l%loop-number%}
		drawDot count 1, particle "happyvillager", center {_loc}, visibleRange 30
		set {_nbt} to nbt compound from "{Invulnerable:1b,PersistenceRequired:1b,NoBasePlate:1b,NoGravity:1b,Invisible:1b,Marker:1b,Pose:{Head:[0f,0f,0f]},HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ArmorDropChances:[0.085F,0.085F,0.085F,0.0F]}"
		spawn an armor stand at {_l%loop-number%} with nbt {_nbt}
		set metadata value "prank-barrier" of spawned armor stand to "%{_player}%"
		set metadata value "pb-number" of spawned armor stand to "%loop-number%"
		set metadata value "gametype" of spawned armor stand to "Kit"
		set helmet of spawned armor stand to yellow glass pane
		set {_sl} to {_l%loop-number%}
		add 2 to y-coordinate of {_sl}
		spawn a slime at {_sl} with nbt compound from "{NoGravity:1b,Size:0.5,PersistenceRequired:1,NoAI:1,Silent:1,DropItem:0,Team:""noCollision"",ActiveEffects:[{Id:14,Amplifier:0,Duration:12000,ShowParticles:0b}]}"
		set metadata value "prank-barrier" of spawned slime to "%{_player}%"
		set metadata value "pb-number" of spawned slime to "%loop-number%"
		set metadata value "gametype" of spawned slime to "Kit"
		set spawned slime's display name to "%{_player}%"

on damage of slime:
	metadata value "prank-barrier" of victim is set
	set {_name} to display name of victim
	if {team::%{_name}%} is not {team::%attacker%}:
		set {_pbnum} to metadata value "pb-number" of victim
		delete victim
		playSound("block.glass.break", 1, 1.5, victim)
		loop all entities:
			type of loop-entity is an armor stand
			metadata value "prank-barrier" of loop-entity is "%{_name}%"
			metadata value "pb-number" of loop-entity is "%{_pbnum}%"
			delete loop-entity
		loop 3 times:
			set {_el} to location of victim
			add a random number between -0.5 and 0.5 to x-coordinate of {_el}
			add a random number between -0.5 and 0.5 to y-coordinate of {_el}
			add a random number between -0.5 and 0.5 to z-coordinate of {_el}
			drawDot count 1, particle "critmagic", center {_el}, visibleRange 30
	else if {team::%{_name}%} is {team::%attacker%}:
		cancel event

on death of player:
	{Stats.%victim%::PlankBarrier} is true
	loop all entities:
		metadata value "prank-barrier" of loop-entity is "%victim%"
		delete loop-entity

function kitSkill_Paladin_7(player: player):
	toolCT({_player}, "Paladin", 7)
	kitMsg({_player}, "§1周りのダメージを全て受け持ちます!")
	playSound("entity.ravager.roar", 1, 1.5, {_player})
	loop 100 times:
		delete {_eg::*}
		loop 10 times:
			set {_el} to location of {_player}
			add a random number between -7 and 7 to x-coordinate of {_el}
			add a random number between -0.5 and 0.5 to y-coordinate of {_el}
			add a random number between -7 and 7 to z-coordinate of {_el}
			drawDot count 1, particle "mobspell", RGB 77, 77, 255, center {_el}, visibleRange 30
		loop all players in radius 7 around {_player}:
			loop-player is not {_player}
			kitCheckTeam(loop-player, {_player}, true) is true
			set {_eg::%id of loop-player%} to true
			if {_jb::%id of loop-player%} is not set:
				set {_jb::%id of loop-player%} to true
				set {Stats.%loop-player%::RecipientGenie} to {_player}
		loop all players:
			metadata value "gametype" of loop-player is "Kit"
			{_eg::%id of loop-player%} is not set
			{_jb::%id of loop-player%} is true
			delete {_jb::%id of loop-player%}
			delete {Stats.%loop-player%::RecipientGenie}
		wait a tick
	loop all players:
		{_eg::%id of loop-player%} is true
		{_jb::%id of loop-player%} is true
		delete {Stats.%loop-player%::RecipientGenie}

on damage of player:
	{Stats.%victim%::RecipientGenie} is set
	set {_dmg} to damage * 0.5
	cancel event
	playSound("entity.ravager.hurt", 1, 1, victim)
	kitDamage(attacker, {Stats.%victim%::RecipientGenie}, {_dmg}, true)
	set {_from} to location of {Stats.%victim%::RecipientGenie}
	add 1 to y-coordinate of {_from}
	set {_baseloc} to location of victim
	set {_to} to location of victim
	add 1 to y-coordinate of {_to}
	set {_dis} to round(distance between {_from} and {_to})
	set {_vector} to setVector({_from}, {_to})
	set yaw of {_from} to yaw of {_vector}
	set pitch of {_from} to pitch of {_vector}
	set {_m} to 0
	loop {_dis} times:
		add 1 to {_m}
		set {_el} to location {_m} meters in front of {_from}
		drawDot count 1, particle "critmagic", center {_el}, visibleRange 30
	set {_y} to 0
	loop 8 times:
		set {_rad} to 0
		loop 6 times:
			set {_el} to {_baseloc}
			add 60 to {_rad}
			add sin({_rad}) to x-coordinate of {_el}
			add cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 100, 100, 255, center {_el}, visibleRange 30
		add 0.25 to {_y}

function kitSkill_Paladin_8(player: player):
	toolCT({_player}, "Paladin", 8)
	kitMsg({_player}, "§d幸運の妖精が飛び回ります!")
	playSound("entity.player.levelup", 1, 0.5, {_player})
	set {_baseloc} to location of head of {_player}
	set {_baserad} to 0
	set {_rad} to 0
	set {_m} to 0
	set {_pnum} to 0
	loop 20 times:
		add 0.5 to {_m}
		set {_baseel} to location {_m} meters in front of {_baseloc}
		delete {_pixieloc::*}
		set {_ln} to 3 - {_pnum}
		loop {_ln} times:
			set {_pl} to {_baseel}
			add 120 to {_baserad}
			set {_m1} to {_pl}
			set {_p} to pitch of {_m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_m1} to {_p}
			set {_test1} to 5 * cos({_baserad})
			set {_t1} to location {_test1} meters in front of {_m1}
			set {_m2} to {_pl}
			set pitch of {_m2} to 0
			set {_test2} to 5 * sin({_baserad})
			set {_t2} to location {_test2} meters to the right of {_m2}
			set x-coordinate of {_pl} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_pl}
			set y-coordinate of {_pl} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_pl}
			set z-coordinate of {_pl} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_pl}
			add {_pl} to {_pixieloc::*}
			loop 3 times:
				set {_el} to {_pl}
				add 120 to {_rad}
				set {_m1} to {_el}
				set {_p} to pitch of {_m1}
				if {_p} < 0:
					set {_p} to -1 * 90 - {_p}
					set {_y} to yaw of {_m1}
					add 180 to {_y}
					if {_y} >= 360:
						set {_y} to {_y} - 360
					set yaw of {_m1} to {_y}
				else:
					set {_p} to {_p} - 90
				set pitch of {_m1} to {_p}
				set {_test1} to 0.5 * cos({_rad})
				set {_t1} to location {_test1} meters in front of {_m1}
				set {_m2} to {_el}
				set pitch of {_m2} to 0
				set {_test2} to 0.5 * sin({_rad})
				set {_t2} to location {_test2} meters to the right of {_m2}
				set x-coordinate of {_el} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_el}
				set y-coordinate of {_el} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_el}
				set z-coordinate of {_el} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_el}
				drawDot count 1, particle "redstone", RGB 255, 192, 203, center {_el}, visibleRange 50
		loop all players in radius 5 around {_baseel}:
			{_pnum} < 3
			{_pixie::%loop-player%} is not set
			loop-player is not {_player}
			kitCheckTeam(loop-player, {_player}, true) is true
			set {_pixie::%loop-player%} to true
			add 1 to {_pnum}
			set {_indnum} to 4 - {_pnum}
			set {_fromloc} to {_pixieloc::%{_indnum}%}
			kitEffect_FortunatePixie_1({_player}, loop-player, {_fromloc})
		add 30 to {_baserad}
		add 20 to {_rad}
		wait a tick
	loop 200 times:
		loop all players:
			{Stats.%loop-player%::FortunatePixie} is {_player}
			set {_al} to location of loop-player
			add a random number between -1 and 1 to x-coordinate of {_al}
			add a random number between -1 and 1 to z-coordinate of {_al}
			add a random number between -0.5 and 2.5 to y-coordinate of {_al}
			drawDot count 1, particle "mobspell", RGB 255, 153, 170, center {_al}, visibleRange 50
		wait a tick
	loop all players:
		{Stats.%loop-player%::FortunatePixie} is {_player}
		delete {Stats.%loop-player%::FortunatePixie}
		message formatted "§e幸運の妖精は消え去りました..." to loop-player

function kitEffect_FortunatePixie_1(player: player, target: player, from: location):
	set {_rad} to 0
	loop 20 times:
		set {_to} to location of head of {_target}
		set {_dis} to distance between {_from} and {_to} / 20 * loop-number
		set {_vector} to setVector({_from}, {_to})
		set yaw of {_from} to yaw of {_vector}
		set pitch of {_from} to pitch of {_vector}
		set {_baseel} to location {_dis} meters in front of {_from}
		playSound("block.amethyst_cluster.hit", 1, 1, {_baseel})
		loop 3 times:
			add 120 to {_rad}
			set {_el} to {_baseel}
			set {_m1} to {_el}
			set {_p} to pitch of {_m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_m1} to {_p}
			set {_test1} to 0.5 * cos({_rad})
			set {_t1} to location {_test1} meters in front of {_m1}
			set {_m2} to {_el}
			set pitch of {_m2} to 0
			set {_test2} to 0.5 * sin({_rad})
			set {_t2} to location {_test2} meters to the right of {_m2}
			set x-coordinate of {_el} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_el}
			set y-coordinate of {_el} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_el}
			set z-coordinate of {_el} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 255, 153, 238, center {_el}, visibleRange 50
		add 20 to {_rad}
		wait a tick
	message formatted "§a幸運の妖精が身を護ってくれます!" to {_target}
	set {Stats.%{_target}%::FortunatePixie} to {_player}
	playSound("block.amethyst_cluster.break", 1, 0.5, {_target})
	if {Kit-Luck::%{_target}%} < 1:
		kitLuck({_target}, 1)

on damage of player:
	{Stats.%{_target}%::FortunatePixie} is set
	set {_dmg} to damage
	cancel event
	playSound("block.enchantment_table.use", 1, 0.9, victim)
	kitHeal(victim, {_dmg})
	message formatted "§d§l妖精が痛みを癒やしに変換してくれた!" to victim
	loop 10 times:
		set {_al} to location of victim
		add a random number between -1 and 1 to x-coordinate of {_al}
		add a random number between -1 and 1 to z-coordinate of {_al}
		add a random number between -0.5 and 2.5 to y-coordinate of {_al}
		drawDot count 1, particle "mobspell", RGB 255, 0, 213, center {_al}, visibleRange 50

function kitUltPaladin(player: player):
	message "§c10ダメージを吸収するバリアを10秒間味方全員に張ります!" to {_player}
	message "§cバリア崩壊時,保持者に再生能力 Iを10秒,破壊者に毒 Iを10秒付与します!" to {_player}
	loop all players:
		{TrueTeam::%loop-player%} is {TrueTeam::%{_player}%}
		{Stats.%loop-player%::NoSupport} is not set
		if loop-player is not {_player}:
			setSupporter(loop-player, {_player})
			message formatted "<##e95388>§l%{_player}% <##ea618e>§lより妖精の加護を受け取りました!" to loop-player
		add loop-player to {_palult::*}
		set {Stats.%loop-player%::Ult_Paladin} to 10
	loop 200 times:
		loop {_palult::*}:
			if {Stats.%loop-value-2%::Ult_Paladin} is set:
				chance of 20%:
					playSound("entity.bee.sting", 0.6, 2, loop-value-2)
				set {_num} to 0
				loop 3 times:
					add 1 to {_num}
					set {_color::%{_num}%} to a random integer between 0 and 255
				set {_el} to aroundEffect(loop-value-2)
				drawDot count 1, particle "mobspell", RGB {_color::1}, {_color::2}, {_color::3}, center {_el}, visibleRange 30
			else:
				remove loop-value-2 from {_palult::*}
		wait a tick
	loop {_palult::*}:
		delete {Stats.%loop-value%::Ult_Paladin}
		message formatted "<##915da3>妖精の加護は消滅しました" to loop-value

on damage of player:
	if {Stats.%victim%::Ult_Paladin} is set:
		cancel event
		playSound("entity.iron_golem.repair", 1, 2, victim)
		if damage cause is not fall:
			set {_ulthp} to {Stats.%victim%::Ult_Paladin} - damage
		if {_ulthp} <= 0:
			delete {Stats.%victim%::Ult_Paladin}
			message formatted "<##4d4398>加護が崩れた! <##dc6b9a>妖精の回復魔法が付与されます...!" to victim
			apply regeneration 1 to victim for 10 seconds
			if attacker exists:
				apply poison 1 to attacker for 10 seconds
				message formatted "<##8d93c8>妖精のいたずらが身体を蝕む..." to attacker
			loop 5 times:
				set {_baseloc} to location of victim
				set {_rad} to 0
				add 0.4 to {_high}
				loop 10 times:
					add 36 to {_rad}
					set {_el} to {_baseloc}
					add 0.5 * sin({_rad}) to x-coordinate of {_el}
					add 0.5 * cos({_rad}) to z-coordinate of {_el}
					add {_high} to y-coordinate of {_el}
					set {_num} to 0
					loop 3 times:
						add 1 to {_num}
						set {_color::%{_num}%} to a random integer between 0 and 255
					drawDot count 1, particle "mobspell", RGB {_color::1}, {_color::2}, {_color::3}, center {_el}, visibleRange 30
				wait a tick
		else:
			set {Stats.%victim%::Ult_Paladin} to {_ulthp}