options:
	interval: 5 ticks

on join:
	while player is online:
		set {_health} to health of player
		add (absorption hearts of player) * 0.5 to {_health}
		set score "§4❤" below player to {_health} for player
		wait {@interval}



# --- Health Displays ---

# Damage
function kitHealthDisplay_Damage(entity: entity, amount: number, event: object = "none"):
	if:
		{_event} is not "none"
		{_event}.isCancelled() is true
		display name of {_entity} is not "Test-Stand"
	then:
		stop

	set {_l} to randomDisplayLocation({_entity})

	set {_display} to "§4❤%{_amount}%"
	set {_textDisplay} to spawnHealthDisplay({_l}, {_display})
	set {_uuid} to a random uuid
	set metadata value "health-display-uuid" of {_textDisplay} to {_uuid}
	loop 2 times:
		wait a tick
		set {_ml} to location of {_textDisplay}
		add 0.25 to y-pos of {_ml}
		teleport {_textDisplay} to {_ml}
	loop 4 times:
		wait a tick
		set {_ml} to location of {_textDisplay}
		add -0.125 to y-pos of {_ml}
		teleport {_textDisplay} to {_ml}
	wait 6 ticks
	loop all text displays:
		loop-text display is {_textDisplay}
		delete loop-text display

# Heal
function kitHealthDisplay_Heal(entity: entity, amount: number):
	set {_l} to randomDisplayLocation({_entity})

	set {_display} to "§a❤%{_amount}%"
	set {_textDisplay} to spawnHealthDisplay({_l}, {_display})
	set {_uuid} to a random uuid
	set metadata value "health-display-uuid" of {_textDisplay} to {_uuid}
	loop 10 times:
		wait a tick
		set {_ml} to location of {_textDisplay}
		add 0.5 / 20 to y-pos of {_ml}
		teleport {_textDisplay} to {_ml}

	loop all text displays:
		loop-text display is {_textDisplay}
		delete loop-text display

# Health Boost
function kitHealthDisplay_HealthBoost(entity: entity, amount: number):
	set {_l} to randomDisplayLocation({_entity})

	set {_display} to "§d❤%{_amount}%"
	set {_textDisplay} to spawnHealthDisplay({_l}, {_display})
	set {_uuid} to a random uuid
	set metadata value "health-display-uuid" of {_textDisplay} to {_uuid}
	loop 5 times:
		wait a tick
		set {_ml} to location of {_textDisplay}
		add 0.5 / 5 to y-pos of {_ml}
		teleport {_textDisplay} to {_ml}
	wait 5 ticks

	loop all text displays:
		loop-text display is {_textDisplay}
		delete loop-text display

# Shield
function kitHealthDisplay_Shield(entity: entity, amount: number):
	set {_l} to randomDisplayLocation({_entity})

	set {_display} to "§b❤%{_amount}%"
	set {_textDisplay} to spawnHealthDisplay({_l}, {_display})
	set {_uuid} to a random uuid
	set metadata value "health-display-uuid" of {_textDisplay} to {_uuid}
	loop 3 times:
		wait a tick
		set {_ml} to location of {_textDisplay}
		add 0.5 / 3 to y-pos of {_ml}
		teleport {_textDisplay} to {_ml}
	wait 7 ticks

	loop all text displays:
		loop-text display is {_textDisplay}
		delete loop-text display

# Absorption
function kitHealthDisplay_Absorption(entity: entity, amount: number):
	set {_l} to randomDisplayLocation({_entity})

	set {_display} to "§e❤%{_amount}%"
	set {_textDisplay} to spawnHealthDisplay({_l}, {_display})
	set {_uuid} to a random uuid
	set metadata value "health-display-uuid" of {_textDisplay} to {_uuid}
	loop 5 times:
		wait a tick
		set {_ml} to location of {_textDisplay}
		add 0.5 / 10 to y-pos of {_ml}
		teleport {_textDisplay} to {_ml}
	wait 5 ticks

	loop all text displays:
		loop-text display is {_textDisplay}
		delete loop-text display

# spawn function
import:
	java.lang.Integer
	org.bukkit.Color
	org.bukkit.entity.Display$Billboard
	org.bukkit.entity.Display$Brightness
	org.bukkit.entity.TextDisplay

local function spawnHealthDisplay(loc: location, display: text) :: entity:
	spawn text display at {_loc}
	set {_textDisplay} to spawned text display

	set {_bright} to Integer.valueOf(15)
	set {_brightness} to new Brightness({_bright}, {_bright})
	{_textDisplay}.setBrightness({_brightness})
	{_textDisplay}.setBillboard(Billboard.CENTER)
	{_textDisplay}.setTeleportDuration(1)
	{_textDisplay}.setViewRange(100)
	{_textDisplay}.setDefaultBackground(false)
	set {_background} to new Color(0, 0, 0, 0)
	{_textDisplay}.setBackgroundColor({_background})
	set {_axisAngle4f} to getQuaternionf(0, 0, 0, 1)
	set {_scale} to getVector3f(3, 3, 1)
	set {_translation} to getVector3f(0, 0, 0)
	setTransformation({_textDisplay}, {_axisAngle4f}, {_axisAngle4f}, {_translation}, {_scale})
	{_textDisplay}.setText({_display})

	return {_textDisplay}

local function randomDisplayLocation(entity: entity) :: location:
	set {_index} to 0
	loop 3 times:
		add 1 to {_index}
		set {_max} to 0.5
		set {_max} to 1 if {_index} is 3
		set {_min} to 0.2
		set {_min} to 0.75 if {_index} is 3
		set {_pos::%{_index}%} to a random number between {_min} and {_max}
		if {_index} <= 2:
			chance of 50%:
				set {_pos::%{_index}%} to {_pos::%{_index}%} * (-1)

	set {_l} to location 1 meter above {_entity}
	add {_pos::1} to x-pos of {_l}
	add {_pos::2} to z-pos of {_l}
	add {_pos::3} to y-pos of {_l}

	return {_l}