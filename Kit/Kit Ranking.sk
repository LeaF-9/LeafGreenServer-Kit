# # 統一項目
# # Rankingのエンティティデータ保存地点:
# # - plugins/skript-yaml/General Options/Rankings.yml
# # ランキングのベース(armor stand)につけるTag:
# # - Ranking.type
# # - Ranking.period
# # ランキングのディスプレイエンティティにつけるTag:
# # - Ranking.type
# # - Ranking.line

options:
	prefix: §a[§bRanking§a]

on rightclick on armor stand:
	set {_nbt} to nbt compound of clicked entity
	tag "Ranking.type" of {_nbt} is set
	set {_type} to tag "Ranking.type" of {_nbt}
	kitChangeRankingPeriod({_type})

# 指定したタイプランキングのベース位置を設定するコマンド
command /setranking-position <text>:
	aliases: /setrank-pos
	permission: sk.admin
	usage: /setrank-pos <type>
	trigger:
		set {_loc} to location of player
		set yaw of {_loc} to 0
		set pitch of {_loc} to 0
		load yml "plugins/skript-yaml/General Options/Rankings.yml" as "ranking.position"
		set yml value "%arg 1%.position.x" from "ranking.position" to x-pos of {_loc}
		set yml value "%arg 1%.position.y" from "ranking.position" to y-pos of {_loc}
		set yml value "%arg 1%.position.z" from "ranking.position" to z-pos of {_loc}
		set yml value "%arg 1%.position.yaw" from "ranking.position" to 0
		set yml value "%arg 1%.position.pitch" from "ranking.position" to 0
		set yml value "%arg 1%.position.world" from "ranking.position" to "%world of {_loc}%"
		loop all entities:
			checkEntityType(loop-entity, armor stand) is true
			set {_nbt} to nbt compound of loop-entity
			tag "Ranking.type" of {_nbt} is arg 1
			set {_exist} to true
		{_exist} is not set
		set {_nbt} to nbt compound from "{Invisible:1b,Invulnerable:1b,PersistenceRequired:1b,NoBasePlate:1b,NoGravity:1b,Marker:1b}"
		spawn an armor stand at {_loc} with nbt {_nbt}
		set {_spawnedmob} to spawned armor stand
		set {_nbt} to nbt compound of {_spawnedmob}
		set tag "Ranking.type" of {_nbt} to arg 1
		set tag "Ranking.period" of {_nbt} to "all"

# 指定したランキングのベースエンティティを返す関数
function kitGetRankingBase(type: text) :: entity:
	loop all entities:
		checkEntityType(loop-entity, armor stand) is true
		set {_nbt} to nbt compound of loop-entity
		tag "Ranking.type" of {_nbt} is {_type}
		set {_rankingentity} to loop-entity
	if {_rankingentity} is not set:
		load yml "plugins/skript-yaml/General Options/Rankings.yml" as "ranking.position.get"
		set {_loc} to invertLocation("%{_type}%.position", "ranking.position.get")
		unload yml "ranking.position.get"
		set {_nbt} to nbt compound from "{Invisible:1b,Invulnerable:1b,PersistenceRequired:1b,NoBasePlate:1b,NoGravity:1b,Marker:1b}"
		spawn an armor stand at {_loc} with nbt {_nbt}
		set {_rankingentity} to spawned armor stand
		set {_nbt} to nbt compound of {_rankingentity}
		set tag "Ranking.type" of {_nbt} to {_type}
		set tag "Ranking.period" of {_nbt} to "all"
	return {_rankingentity}

# 指定したステータスランキングの期間を変更
function kitChangeRankingPeriod(stats: text):
	set {_rankingentity} to kitGetRankingBase({_stats})
	set {_nbt} to nbt compound of {_rankingentity}
	set {_period} to tag "Ranking.period" of {_nbt}
	if {_period} is "all":
		set {_period} to "week"
	else if {_period} is "week":
		set {_period} to "month"
	else if {_period} is "month":
		set {_period} to "all"
	set tag "Ranking.period" of {_nbt} to {_period}
	kitRankingUpdate({_stats}, {_period})

# 指定した期間内の指定したステータスランキングのアップデート
function kitRankingUpdate(stats: text, period: text):
	# stats display
	if {_stats} is "kill":
		set {_dis.stats} to "§4§lKill"
	else if {_stats} is "death":
		set {_dis.stats} to "§1§lDeath"
	else if {_stats} is "kd":
		set {_dis.stats} to "§6§lK/D"
	else if {_stats} is "win":
		set {_dis.stats} to "§2§lWin"
	else if {_stats} is "assist":
		set {_dis.stats} to "§5§lAssist"
	else:
		log "statsが正しくありません (kitRankingUpdate(%{_stats}%, %{_period}%))"
		stop
	# period display
	if {_period} is "all":
		set {_dis.period} to "§dLifetime"
		set {_dis.underbar} to "§8Weekly §b- §8Monthly &b- §6§lLifetime"
	else if {_period} is "month":
		set {_dis.period} to "§aMonthly"
		set {_dis.underbar} to "§8Weekly §b- §6§lMonthly &b- §8Lifetime"
	else if {_period} is "week":
		set {_dis.period} to "§bWeekly"
		set {_dis.underbar} to "§6§lWeekly §b- §8Monthly &b- §8Lifetime"
	else:
		log "periodが正しくありません (kitRankingUpdate(%{_stats}%, %{_period}%))"
		stop
	# line-1 display
	set {_display::1} to "%{_dis.period}% %{_dis.stats}% §eTop 10"
	# line-12 display
	set {_display::12} to {_dis.underbar}
	loop {Kit-%{_stats}%.%{_period}%::*}:
		{BAN::%loop-index%} is not set
		if {_stats} is "KD":
			if {_period} is "all":
				if {Kit-Death.%{_period}%::%loop-index%} >= 100:
					set {_list::%loop-index%} to loop-value
			else if {_period} is "month":
				if {Kit-Death.%{_period}%::%loop-index%} >= 50:
					set {_list::%loop-index%} to loop-value
			else:
				if {Kit-Death.%{_period}%::%loop-index%} >= 10:
					set {_list::%loop-index%} to loop-value
		else:
			set {_list::%loop-index%} to loop-value
	set {_high} to 0
	loop 10 times:
		set {_num} to loop-number
		set {_hdnum} to {_num} + 1
		loop {_list::*}:
			loop-value-2 > {_high}
			{UUID::%loop-index%} is set
			set {_high} to loop-value-2
			set {_highplayer} to loop-index
		if {_high} is 0:
			delete {_high}
		set {_display::%{_hdnum}%} to "§a%{_num}%§e. §f§l%{UUID::%{_highplayer}%}% §7 - §b%{_high}%"
		set {_high} to 0
		delete {_list::%{_highplayer}%}
		delete {_highplayer}
	kitChangeRankingDisplay({_stats}, {_display::*})

# 指定したステータスの指定したランクをDisplayに変更
function kitChangeRankingDisplay(stats: text, displays: texts):
	set {_num} to 0
	loop all entities:
		checkEntityType(loop-entity, text display) is true
		set {_nbt} to nbt compound of loop-entity
		tag "Ranking.type" of {_nbt} is {_stats}
		set {_line} to tag "Ranking.line" of {_nbt}
		set {_rankingentities::%{_line}%} to loop-entity
	loop 12 times:
		add 1 to {_num}
		delete {_entity}
		set {_entity} to {_rankingentities::%{_num}%}
		if {_entity} is not set:
			set {_baseentity} to kitGetRankingBase({_stats})
			set {_addy} to 0.5 + (0.2 * (12 - {_num}))
			set {_displayspawnloc} to location of {_baseentity}
			add {_addy} to y-pos of {_displayspawnloc}
			spawn a text display at {_displayspawnloc}:
				set {_nbt} to nbt compound of text display
				set tag "Ranking.type" of {_nbt} to {_stats}
				set tag "Ranking.line" of {_nbt} to {_num}
				set {_entity} to text display
		set display name of {_entity} to {_displays::%{_num}%}

# 着手中(後回し)
# ランキングディスプレイを削除する関数
function kitDeleteRankingDisplay(stats: text):
	loop all entities:
		type of loop-entity is armor stand
		set {_nbt} to nbt compound of loop-entity
		tag "RankingDisplay" of {_nbt} is {_stats}
		delete loop-entity

# 着手中
# いらなそう
# function checkRankingDisplay(tag: text):
# 	loop all entities:
# 		type of loop-entity is armor StageRandomize
# 		set {_tnt.nbt} to nbt compound of loop-entity
# 		set tag "Fuse" of {_tnt.nbt} to {_tick}

# 着手中
# ランキング関係のコマンド
command /ranking <text> <text>:
	usage: /ranking <arg> <type>
	permission: sk.admin
	trigger:
		if arg 1 is "change":
			kitChangeRankingPeriod(arg 2)

#command /updaterankop <text> <text> <text>:
#	usage: /updateranktop <kill/death> <time/type> <game>
#	permission: sk.admin
#	trigger:
#		set {_type} to arg 1
#		set {_conf} to arg 2
#		loop {%arg 3%-%{_type}%.%{_conf}%::*}:
#			set {_list::%loop-index%} to loop-value
#		set {_high} to 0
#		loop 10 times:
#			set {_num} to loop-number
#			set {_hdnum} to {_num} + 1
#			loop {_list::*}:
#				loop-value-2 > {_high}
#				{UUID::%loop-index%} is set
#				set {_high} to loop-value-2
#				set {_highplayer} to loop-index
#			if {_high} is 0:
#				delete {_high}
#			execute console command "/hd setline ranking-%{_conf}% %{_hdnum}% &a%{_num}%&e. &f&l%{UUID::%{_highplayer}%}% &7 - &b%{_high}%"
#			set {_high} to 0
#			delete {_list::%{_highplayer}%}
#			delete {_highplayer}

# # ここからは日付の指定

# ベース時間を設定するコマンド
command /setBaseDate <text> <number> <number> <number>:
	usage: /setBaseDate <weekly/monthly> <year-num> <month-num> <day-num>
	permission: sk.admin
	trigger:
		load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "date.baseranking"
		set yml value "%arg 1%.year" from "date.baseranking" to arg 2
		set yml value "%arg 1%.month" from "date.baseranking" to arg 3
		set yml value "%arg 1%.day" from "date.baseranking" to arg 4
		save yml "date.baseranking"

# ベースとなる日付の更新
local function updateBaseDate():
	set {_now} to now
	load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "date.ranking"
	set {_date-month.year} to yml value "monthly.year" from "date.ranking"
	set {_date-month.month} to yml value "monthly.month" from "date.ranking"
	set {_date-month.day} to yml value "monthly.day" from "date.ranking"
	set {_date-week.year} to yml value "weekly.year" from "date.ranking"
	set {_date-week.month} to yml value "weekly.month" from "date.ranking"
	set {_date-week.day} to yml value "weekly.day" from "date.ranking"
	unload yml "date.ranking"
	set {_base.week} to date({_date-month.year}, {_date-month.month}, {_date-month.day})
	set {_base.month} to date({_date-week.year}, {_date-week.month}, {_date-week.day})
	set {_unix.now} to unix timestamp of {_now}
	set {_unix.week} to unix timestamp of {_base.week}
	set {_unix.month} to unix timestamp of {_base.month}
# Week 更新
	set {_week.checker} to false
	set {_new.week} to {_base.week}
	while {_week.checker} is false:  # 一週間の差があるまでループ
		set {_unix.week} to unix timestamp of {_new.week}
		set {_dif.week} to difference between {_unix.week} and {_unix.now}
		if {_dif.week} > 604800:  # 一週間の差があれば一週間分プラス
			add 1 week to {_new.week}
		else:
			set {_week.checker} to true
	# 更新時の処理
	if {_new.week} is not {_base.week}:  # プラスされた経緯があれば更新
		set {_weekupdate.checker} to false
		set {_daychecker} to {_date-week.day}
		set {_monthchecker} to {_date-week.month}
		set {_yearchecker} to {_date-week.year}
		while {_weekupdate.checker} is false:
			set {_monthday} to getMonthDays({_monthchecker}, {_yearchecker})  # その月と年から日の最大値を取得
			add 1 to {_daychecker}
			if {_daychecker} > {_monthday}:
				set {_daychecker} to 1
				add 1 to {_monthchecker}
			if {_monthchecker} > 12:
				set {_monthchecker} to 1
				add 1 to {_yearchecker}
			set {_check.week} to date({_yearchecker}, {_monthchecker}, {_daychecker})
			if {_check.week} is {_new.week}:
				set {_weekupdate.checker} to true
		load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "week.update"
		set yml value "weekly.year" from "week.update" to {_yearchecker}
		set yml value "weekly.month" from "week.update" to {_monthchecker}
		set yml value "weekly.day" from "week.update" to {_daychecker}
		save yml "week.update"
# Month 更新
	set {_month.checker} to false
	set {_monthchecker} to {_date-month.month}
	set {_yearchecker} to {_date-month.year}
	while {_month.checker} is false:
		set {_new.month} to date({_yearchecker}, {_monthchecker}, 1)
		set {_monthday} to getMonthDays({_monthchecker}, {_yearchecker})
		set {_unix.month} to unix timestamp of {_new.month}
		set {_dif.month} to difference between {_unix.month} and {_unix.now}
		if {_dif.month} > 86400 * {_monthday}:  # 1日 * 最大日数より多い場合、月を増やす
			add 1 to {_monthchecker}
			if {_monthchecker} > 12:
				set {_monthchecker} to 1
				add 1 to {_yearchecker}
		else:
			set {_month.checker} to true
	# 更新時の処理
	if {_new.month} is not {_base.month}:
		load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "month.update"
		set yml value "monthly.year" from "month.update" to {_yearchecker}
		set yml value "monthly.month" from "month.update" to {_monthchecker}
		save yml "month.update"

local function checkWeeking(time: date, week: date) :: boolean:
	set {_unix.time} to unix timestamp of {_time}
	set {_unix.base} to unix timestamp of {_week}
	set {_dif} to difference between {_unix.base} and {_unix.time}
	if {_dif} <= 604800:
		return true
	else:
		return false

local function checkMonthing(time: date, month: number, year: number) :: boolean:
	set {_monthdate} to date({_year}, {_month}, 1)
	set {_monthday} to getMonthDays({_month}, {_year})
	set {_unix.time} to unix timestamp of {_time}
	set {_unix.base} to unix timestamp of {_monthdate}
	set {_dif} to difference between {_unix.base} and {_unix.time}
	if {_dif} <= 86400 * {_monthday}:
		return true
	else:
		return false

# その月の最大日数を返す関数
function getMonthDays(month: number, year: number) :: number:
	if {_month} is 1, 3, 5, 7, 8, 10 or 12:
		set {_day} to 31
	else if {_month} is 4, 6, 9 or 11:
		set {_day} to 30
	else if {_month} is 2:
		if mod({_year}, 4) is not 0:
			set {_day} to 28
		else if mod({_year}, 100) is 0:
			if mod({_year}, 400) is 0:
				set {_day} to 29
			else:
				set {_day} to 29
		else:
			set {_day} to 29
	return {_day}

# 試合終了時に変数更新&ランキングを更新する関数
function rankingEnding():
	updateBaseDate()
	kitClearStats()
	load yml "plugins/skript-yaml/General Options/Rankings.sk" as "date.ranking"
	set {_date-month.year} to yml value "monthly.year" from "date.ranking"
	set {_date-month.month} to yml value "monthly.month" from "date.ranking"
	set {_date-month.day} to yml value "monthly.day" from "date.ranking"
	set {_date-week.year} to yml value "weekly.year" from "date.ranking"
	set {_date-week.month} to yml value "weekly.month" from "date.ranking"
	set {_date-week.day} to yml value "weekly.day" from "date.ranking"
	unload yml "date.ranking"
	set {_date.week} to date({_date-week.year}, {_date-week.month}, {_date-week.day})
	# Kills / Deaths
	load yml "plugins/skript-yaml/Kit Databases/Kills.yml" as "updatestats.kill"
	loop yaml node keys "" from "updatestats.kill":
		set {_ids::*} to loop-key
		set {_id} to {_ids::1}
		set {_uuid.killer} to yml value "%{_id}%.killer-player" from "updatestats.kill"
		set {_kit.killer} to yml value "%{_id}%.killer-kit" from "updatestats.kill"
		set {_uuid.victim} to yml value "%{_id}%.victim-player" from "updatestats.kill"
		set {_kit.victim} to yml value "%{_id}%.victim-kit" from "updatestats.kill"
		set {_time} to yml value "%{_id}%.time" from "updatestats.kill"
		# All / Kit
		add 1 to {Kit-Kill.all::%{_uuid.killer}%}
		add 1 to {Kit-Kill.%{_kit.killer}%::%{_uuid.killer}%}
		add 1 to {Kit-Death.all::%{_uuid.victim}%}
		add 1 to {Kit-Death.%{_kit.victim}%::%{_uuid.victim}%}
		# Month
		if checkMonthing({_time}, {_date-month.month}, {_date-month.year}) is true:
			add 1 to {Kit-Kill.month::%{_uuid.killer}%}
			add 1 to {Kit-Death.month::%{_uuid.victim}%}
		# Week
		if checkWeeking({_time}, {_date.week}) is true:
			add 1 to {Kit-Kill.week::%{_uuid.killer}%}
			add 1 to {Kit-Death.week::%{_uuid.victim}%}
	unload yml "updatestats.kill"
	# KDs
	load yml "plugins/skript-yaml/Kit Classes/All Classes.yml" as "classes"
	set {_kits::*} to yml list "Classes" from "classes"
	unload yml "classes"
	loop all offline players:
		set {_uuid} to UUID of loop-offline player
		if {Kit-Kill.all::%{_uuid}%} is not set:
			if {Kit-Death.all::%{_uuid}%} is not set:
				continue
		# All
		set {_kd.all} to {Kit-Kill.all::%{_uuid}%} / {Kit-Death.all::%{_uuid}%}
		set {Kit-KD.all::%{_uuid}%} to {_kd.all} if {_kd.all} is set
		# Month
		set {_kd.month} to {Kit-Kill.month::%{_uuid}%} / {Kit-Death.month::%{_uuid}%}
		set {Kit-KD.month::%{_uuid}%} to {_kd.month} if {_kd.month} is set
		# Week
		set {_kd.week} to {Kit-Kill.week::%{_uuid}%} / {Kit-Death.week::%{_uuid}%}
		set {Kit-KD.week::%{_uuid}%} to {_kd.week} if {_kd.week} is set
		# Kit
		loop {_kits::*}:
			set {_kit} to loop-value-2
			if {Kit-Kill.%{_kit}%::%{_uuid}%} is not set:
				if {Kit-Kill.%{_kit}%::%{_uuid}%} is not set:
					continue
			set {_kd.%{_kit}%} to {Kit-Kill.%{_kit}%::%{_uuid}%} / {Kit-Death.%{_kit}%::%{_uuid}%}
			set {Kit-KD.%{_kit}%::%{_uuid}%} to {_kd.%{_kit}%} if {_kd.%{_kit}%} is set
	# Assists
	load yml "plugins/skript-yaml/Kit Databases/Assists.yml" as "updatestats.assist"
	load yml "plugins/skript-yaml/Kit Databases/Kills.yml" as "updatestats.assisttime"
	loop yaml node keys "" from "updatestats.assist":
		set {_ids::*} to loop-key
		set {_id} to {_ids::1}
		set {_killid.assist} to yml value "%{_id}%.kill-id" from "updatestats.assist"
		set {_uuid.assist} to yml value "%{_id}%.assist-player" from "updatestats.assist"
		set {_kit.assist} to yml value "%{_id}%.assist-kit" from "updatestats.assist"
		# All / Kit
		add 1 to {Kit-Assist.all::%{_uuid.assist}%}
		add 1 to {Kit-Assist.%{_kit.assist}%::%{_uuid.assist}%}
		# Month
		set {_time} to yml value "%{_killid.assist}%.time" from "updatestats.assisttime"
		if checkMonthing({_time}, {_date-month.month}, {_date-month.year}) is true:
			add 1 to {Kit-Assist.month::%{_uuid.assist}%}
		# Week
		if checkWeeking({_time}, {_date.week}) is true:
			add 1 to {Kit-Assist.week::%{_uuid.killer}%}
	unload yml "updatestats.assist"
	unload yml "updatestats.assisttime"
	# Wins
	load yml "plugins/skript-yaml/Kit Databases/Games.yml" as "updatestats.game"
	loop yaml node keys "" from "updatestats.game":
		set {_ids::*} to loop-key
		set {_id} to {_ids::1}
		set {_map} to yml value "%{_id}%.map" from "updatestats.game"
		set {_rule} to yml value "%{_id}%.rule" from "updatestats.game"
		set {_winteam::*} to yml list "%{_id}%.win-team" from "updatestats.game"
		set {_time} to yml value "%{_id}%.time" from "updatestats.game"
		set {_duration} to yml value "%{_id}%.duration" from "updatestats.game"
		set {_minPlay} to {_duration} / 2
		loop yaml node keys "%{_id}%.players" from "updatestats.game":
			set {_uuids::*} to loop-key-2
			set {_uuid} to {_uuids::1}
			set {_team} to yml value "%{_id}%.players.%{_uuid}%.team" from "updatestats.game"
			set {_playtime} to yml value "%{_id}%.players.%{_uuid}%.team" from "updatestats.game"
			if {_winteam::*} does not contain {_team}:
				continue
			if {_playtime} < {_minPlay}:
				continue
			# All / Map / Rule
			add 1 to {Kit-Win.all::%{_uuid}%}
			add 1 to {Kit-Win.%{_map}%::%{_uuid}%}
			add 1 to {Kit-Win.%{_rule}%::%{_uuid}%}
			# Month
			if checkMonthing({_time}, {_date-month.month}, {_date-month.year}) is true:
				add 1 to {Kit-Win.month::%{_uuid}%}
			# Week
			if checkWeeking({_time}, {_date.week}) is true:
				add 1 to {Kit-Win.week::%{_uuid}%}
	unload yml "updatestats.game"
	# Update Rankings
	loop 5 times:
		if loop-number-1 is 1:
			set {_type} to "Kill"
		else if loop-number-1 is 2:
			set {_type} to "KD"
		else if loop-number-1 is 3:
			set {_type} to "Win"
		else if loop-number-1 is 4:
			set {_type} to "Death"
		else if loop-number-1 is 5:
			set {_type} to "Assist"
		set {_baseentity} to kitGetRankingBase({_type})
		set {_nbt} to nbt compound of {_baseentity}
		set {_period} to tag "Ranking.period" of {_nbt}
		kitRankingUpdate({_type}, {_period})

command /rankingending:
	permission: sk.admin
	trigger:
		rankingEnding()

#command /updateranking <text>:
#	usage: /updateranking <Class...etc(kit)>
#	trigger:
#		if arg 1 is "kit":
#			loop {Classes::*}:
#				loop 6 times:
#					if loop-number-1 is 1:
#						set {_type} to "Kill"
#					else if loop-number-1 is 2:
#						set {_type} to "KD"
#					else if loop-number-1 is 3:
#						set {_type} to "Win"
#					else if loop-number-1 is 4:
#						set {_type} to "Death"
#					else if loop-number-1 is 5:
#						set {_type} to "Assist"
#					else if loop-number-1 is 6:
#						set {_type} to "Count"
#					loop {%{_type}%.%loop-index-1%::*}:
#						set {_list::%loop-index-2%} to loop-value-3
#					set {_high} to 0
#					loop 5 times:
#						set {_num} to loop-number-2
#						loop {_list::*}:
#							loop-value-4 > {_high}
#							{UUID::%loop-index-2%} is set
#							set {_high} to loop-value-4
#							set {_highplayer} to loop-index-2
#						if {_high} is 0:
#							delete {_high}
#						set line 2 of block at {Ranking-sign.%{_type}%_%loop-index-1%::%{_num}%} to "%{UUID::%{_highplayer}%}%"
#						if {_type} is "KD":
#							set line 4 of block at {Ranking-sign.%{_type}%_%loop-index-1%::%{_num}%} to "%{_high}% k/d"
#						else:
#							set line 4 of block at {Ranking-sign.%{_type}%_%loop-index-1%::%{_num}%} to "%{_high}% %{_type}%s"
#						set {_high} to 0
#						delete {_list::%{_highplayer}%}
#						delete {_highplayer}
#		else:
#			if arg 1 is "week":
#				set {_time} to "Weekly"
#				set {_looptime} to 5
#			if arg 1 is "all":
#				set {_time} to "All"
#				set {_looptime} to 10
#			loop 5 times:
#				if loop-number-1 is 1:
#					set {_type} to "Kill"
#				else if loop-number-1 is 2:
#					set {_type} to "KD"
#				else if loop-number-1 is 3:
#					set {_type} to "Win"
#				else if loop-number-1 is 4:
#					set {_type} to "Death"
#				else if loop-number-1 is 5:
#					set {_type} to "Assist"
#				loop {%{_type}%.%arg 1%::*}:
#					set {_list::%loop-index%} to loop-value-2
#				set {_high} to 0
#				loop {_looptime} times:
#					set {_num} to loop-number-2
#					set {_hdnum} to {_num} + 1
#					loop {_list::*}:
#						loop-value-3 > {_high}
#						{UUID::%loop-index%} is set
#						set {_high} to loop-value-3
#						set {_highplayer} to loop-index
#					if {_high} is 0:
#						delete {_high}
#					execute console command "/hd setline %{_time}%-%{_type}% %{_hdnum}% &a%{_num}%&e. &f&l%{UUID::%{_highplayer}%}% &7 - &b%{_high}%"
#					set {_high} to 0
#					delete {_list::%{_highplayer}%}
#					delete {_highplayer}