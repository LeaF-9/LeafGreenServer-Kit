options:
	prefix: §a[§bRanking§a]

#command /setranking <text> <text> <text> <number>:
#	permission: sk.admin
#	usage: /setranking <sign or head> <Kill..etc> <Class...etc> <number>
#	trigger:
#		if arg 1 is "sign":
#			if target block is sign:
#				set {Ranking-%arg 1%.%arg 2%_%arg 3%::%arg 4%} to location of target block
#				message "{@prefix} §e目先のブロックを§b%arg 2%:§c%arg 3% §a%arg 4%位§eに設定しました"
#			else:
#				message "{@prefix} §c目先のブロックが看板ではありません"

#command /deleteranking:
#	permission: sk.admin
#	trigger:
#		loop 6 times:
#			if loop-number-1 is 1:
#				set {_type} to "Kill"
#			else if loop-number-1 is 2:
#				set {_type} to "KD"
#			else if loop-number-1 is 3:
#				set {_type} to "Win"
#			else if loop-number-1 is 4:
#				set {_type} to "Death"
#			else if loop-number-1 is 5:
#				set {_type} to "Assist"
#			else if loop-number-1 is 6:
#				set {_type} to "Count"
#			delete {Ranking-sign.%{_type}%_week::*}
#			delete {Ranking-sign.%{_type}%_all::*}
#		loop {Classes::*}:
#			loop 6 times:
#				if loop-number-1 is 1:
#					set {_type} to "Kill"
#				else if loop-number-1 is 2:
#					set {_type} to "KD"
#				else if loop-number-1 is 3:
#					set {_type} to "Win"
#				else if loop-number-1 is 4:
#					set {_type} to "Death"
#				else if loop-number-1 is 5:
#					set {_type} to "Assist"
#				else if loop-number-1 is 6:
#					set {_type} to "Count"
#				delete {Ranking-sign.%{_type}%_%loop-value-1%::*}

command /changekitranking <text>:
	permission: sk.admin
	trigger:
		if {Classes::%arg 1%} is set:
			if {TypeKitRanking::%arg 1%} is not set:
				set {TypeKitRanking::%arg 1%} to "Assist"
			if {TypeKitRanking::%arg 1%} is "Assist":
				set {TypeKitRanking::%arg 1%} to "Kill"
				execute console command "/hd setline r_%arg 1% 7 &4&lKill &7Ranking"
				execute console command "/updatekitrank %arg 1% Kill"
			else if {TypeKitRanking::%arg 1%} is "Kill":
				set {TypeKitRanking::%arg 1%} to "KD"
				execute console command "/hd setline r_%arg 1% 7 &6&lK/D &7Ranking"
				execute console command "/updatekitrank %arg 1% KD"
			else if {TypeKitRanking::%arg 1%} is "KD":
				set {TypeKitRanking::%arg 1%} to "Count"
				execute console command "/hd setline r_%arg 1% 7 &2&lCount &7Ranking"
				execute console command "/updatekitrank %arg 1% Count"
			else if {TypeKitRanking::%arg 1%} is "Count":
				set {TypeKitRanking::%arg 1%} to "Death"
				execute console command "/hd setline r_%arg 1% 7 &1&lDeath &7Ranking"
				execute console command "/updatekitrank %arg 1% Death"
			else if {TypeKitRanking::%arg 1%} is "Death":
				set {TypeKitRanking::%arg 1%} to "Assist"
				execute console command "/hd setline r_%arg 1% 7 &5&lAssist &7Ranking"
				execute console command "/updatekitrank %arg 1% Assist"

command /updatekitrank <text> <text>:
	permission: sk.admin
	trigger:
		set {_type} to arg 2
		set {_conf} to arg 1
		loop {Kit-%{_type}%.%{_conf}%::*}:
			{BAN::%loop-index%} is not set
			if {_type} is "KD":
				if {Kit-Death.%{_conf}%::%loop-index%} >= 10:
					set {_list::%loop-index%} to loop-value
			else:
				set {_list::%loop-index%} to loop-value
		set {_high} to 0
		loop 5 times:
			set {_num} to loop-number
			set {_hdnum} to {_num} + 1
			loop {_list::*}:
				loop-value-2 > {_high}
				{UUID::%loop-index%} is set
				set {_high} to loop-value-2
				set {_highplayer} to loop-index
			if {_high} is 0:
				delete {_high}
			execute console command "/hd setline r_%{_conf}% %{_hdnum}% &a%{_num}%&e. &f&l%{UUID::%{_highplayer}%}% &7 - &b%{_high}%"
			set {_high} to 0
			delete {_list::%{_highplayer}%}
			delete {_highplayer}
			wait 5 ticks

function rankingChange(game: text, stats: text):
	if {_game} is "Kit":
		if {_stats} is "kill":
			set {_dis} to "&4&lKill"
		else if {_stats} is "death":
			set {_dis} to "&1&lDeath"
		else if {_stats} is "kd":
			set {_dis} to "&6&lK/D"
		else if {_stats} is "win":
			set {_dis} to "&2&lWin"
		else if {_stats} is "assist":
			set {_dis} to "&5&lAssist"
		if {Kit-TypeRanking::%{_stats}%} is not set:
			set {Kit-TypeRanking::%{_stats}%} to "lifetime"
		if {Kit-TypeRanking::%{_stats}%} is "lifetime":
			set {Kit-TypeRanking::%{_stats}%} to "weekly"
			execute console command "/hd setline kit-ranking-%{_stats}% 1 &bWeekly %{_dis}% &eTop 10"
			execute console command "/hd setline kit-ranking-%{_stats}% 12 &6&lWeekly &b- &8Monthly &b- &8Lifetime"
			rankingUpdate("Kit", {_stats}, "weekly")
		else if {Kit-TypeRanking::%{_stats}%} is "weekly":
			set {Kit-TypeRanking::%{_stats}%} to "monthly"
			execute console command "/hd setline kit-ranking-%{_stats}% 1 &aMonthly %{_dis}% &eTop 10"
			execute console command "/hd setline kit-ranking-%{_stats}% 12 &8Weekly &b- &6&lMonthly &b- &8Lifetime"
			rankingUpdate("Kit", {_stats}, "monthly")
		else if {Kit-TypeRanking::%{_stats}%} is "monthly":
			set {Kit-TypeRanking::%{_stats}%} to "lifetime"
			execute console command "/hd setline kit-ranking-%{_stats}% 1 &dLifetime %{_dis}% &eTop 10"
			execute console command "/hd setline kit-ranking-%{_stats}% 12 &8Weekly &b- &8Monthly &b- &6&lLifeTime"
			rankingUpdate("Kit", {_stats}, "lifetime")

function rankingUpdate(game: text, stats: text, conf: text):
	deleteRankingDisplay({_stats})
	if {_conf} is "weekly":
		set {_time} to "week"
	if {_conf} is "monthly":
		set {_time} to "month"
	if {_conf} is "lifetime":
		set {_time} to "all"
	loop {%{_game}%-%{_stats}%.%{_time}%::*}:
		{BAN::%loop-index%} is not set
		if {_stats} is "KD":
			if {_time} is "all":
				if {%{_game}%-Death.%{_time}%::%loop-index%} >= 100:
					set {_list::%loop-index%} to loop-value
			else if {_time} is "month":
				if {%{_game}%-Death.%{_time}%::%loop-index%} >= 50:
					set {_list::%loop-index%} to loop-value
			else:
				if {%{_game}%-Death.%{_time}%::%loop-index%} >= 10:
					set {_list::%loop-index%} to loop-value
		else:
			set {_list::%loop-index%} to loop-value
	set {_high} to 0
	loop 10 times:
		set {_num} to loop-number
		set {_hdnum} to {_num} + 1
		loop {_list::*}:
			loop-value-2 > {_high}
			{UUID::%loop-index%} is set
			set {_high} to loop-value-2
			set {_highplayer} to loop-index
		if {_high} is 0:
			delete {_high}
		execute console command "/hd setline kit-ranking-%{_stats}% %{_hdnum}% &a%{_num}%&e. &f&l%{UUID::%{_highplayer}%}% &7 - &b%{_high}%"
		set {_high} to 0
		delete {_list::%{_highplayer}%}
		delete {_highplayer}
		wait 5 ticks

function deleteRankingDisplay(stats: text):
	loop all entities:
		type of loop-entity is armor stand
		set {_nbt} to nbt compound of loop-entity
		tag "RankingDisplay" of {_nbt} is set

function checkRankingDisplay(tag: text):
	loop all entities:
		type of loop-entity is armor StageRandomize
		set {_tnt.nbt} to nbt compound of loop-entity
		set tag "Fuse" of {_tnt.nbt} to {_tick}

command /ranking <text> <text> <text>:
	usage: /ranking <arg> <game> <stats>
	permission: sk.admin
	trigger:
		if arg 1 is "change":
			rankingChange(arg 2, arg 3)

#command /updaterankop <text> <text> <text>:
#	usage: /updateranktop <kill/death> <time/type> <game>
#	permission: sk.admin
#	trigger:
#		set {_type} to arg 1
#		set {_conf} to arg 2
#		loop {%arg 3%-%{_type}%.%{_conf}%::*}:
#			set {_list::%loop-index%} to loop-value
#		set {_high} to 0
#		loop 10 times:
#			set {_num} to loop-number
#			set {_hdnum} to {_num} + 1
#			loop {_list::*}:
#				loop-value-2 > {_high}
#				{UUID::%loop-index%} is set
#				set {_high} to loop-value-2
#				set {_highplayer} to loop-index
#			if {_high} is 0:
#				delete {_high}
#			execute console command "/hd setline ranking-%{_conf}% %{_hdnum}% &a%{_num}%&e. &f&l%{UUID::%{_highplayer}%}% &7 - &b%{_high}%"
#			set {_high} to 0
#			delete {_list::%{_highplayer}%}
#			delete {_highplayer}

command /setBaseDate <text> <number> <number> <number>:
	usage: /setBaseDate <weekly/monthly> <year-num> <month-num> <day-num>
	permission: sk.admin
	trigger:
		load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "date.baseranking"
		set yml value "%arg 1%.year" from "date.baseranking" to arg 2
		set yml value "%arg 1%.month" from "date.baseranking" to arg 3
		set yml value "%arg 1%.day" from "date.baseranking" to arg 4
		save yml "date.baseranking"

function updateBaseDate():
	set {_now} to now
	load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "date.ranking"
	set {_date-month.year} to yml value "monthly.year" from "date.ranking"
	set {_date-month.month} to yml value "monthly.month" from "date.ranking"
	set {_date-month.day} to yml value "monthly.day" from "date.ranking"
	set {_date-week.year} to yml value "weekly.year" from "date.ranking"
	set {_date-week.month} to yml value "weekly.month" from "date.ranking"
	set {_date-week.day} to yml value "weekly.day" from "date.ranking"
	unload yml "date.ranking"
	set {_base.week} to date({_date-month.year}, {_date-month.month}, {_date-month.day})
	set {_base.month} to date({_date-week.year}, {_date-week.month}, {_date-week.day})
	set {_unix.now} to unix timestamp of {_now}
	set {_unix.week} to unix timestamp of {_base.week}
	set {_unix.month} to unix timestamp of {_base.month}
# Week 更新
	set {_week.checker} to false
	set {_new.week} to {_base.week}
	while {_week.checker} is false:
		set {_unix.week} to unix timestamp of {_new.week}
		set {_dif.week} to difference between {_unix.week} and {_unix.now}
		if {_dif.week} > 604800:
			add 1 week to {_new.week}
		else:
			set {_week.checker} to true
	# 更新時の処理
	if {_new.week} is not {_base.week}:
		set {_weekupdate.checker} to false
		set {_daychecker} to {_date-week.day}
		set {_monthchecker} to {_date-week.month}
		set {_yearchecker} to {_date-week.year}
		while {_weekupdate.checker} is false:
			set {_monthday} to getMonthDays({_monthchecker}, {_yearchecker})
			add 1 to {_daychecker}
			if {_daychecker} > {_monthday}:
				set {_daychecker} to 1
				add 1 to {_monthchecker}
			if {_monthchecker} > 12:
				set {_monthchecker} to 1
				add 1 to {_yearchecker}
			set {_check.week} to date({_yearchecker}, {_monthchecker}, {_daychecker})
			if {_check.week} is {_new.week}:
				set {_weekupdate.checker} to true
		load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "week.update"
		set yml value "weekly.year" from "week.update" to {_yearchecker}
		set yml value "weekly.month" from "week.update" to {_monthchecker}
		set yml value "weekly.day" from "week.update" to {_daychecker}
		save yml "week.update"
# Month 更新
	set {_month.checker} to false
	set {_monthchecker} to {_date-month.month}
	set {_yearchecker} to {_date-month.year}
	while {_month.checker} is false:
		set {_new.month} to date({_yearchecker}, {_monthchecker}, 1)
		set {_monthday} to getMonthDays({_monthchecker}, {_yearchecker})
		set {_unix.month} to unix timestamp of {_new.month}
		set {_dif.month} to difference between {_unix.month} and {_unix.now}
		if {_dif.month} > 86400 * {_monthday}:
			add 1 to {_monthchecker}
			if {_monthchecker} > 12:
				set {_monthchecker} to 1
				add 1 to {_yearchecker}
		else:
			set {_month.checker} to true
	# 更新時の処理
	if {_new.month} is not {_base.month}:
		load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "month.update"
		set yml value "monthly.year" from "month.update" to {_yearchecker}
		set yml value "monthly.month" from "month.update" to {_monthchecker}
		save yml "month.update"

function checkWeeking(time: date, week: date) :: boolean:
	set {_unix.time} to unix timestamp of {_time}
	set {_unix.base} to unix timestamp of {_week}
	set {_dif} to difference between {_unix.base} and {_unix.time}
	if {_dif} <= 604800:
		return true
	else:
		return false

function checkMonthing(time: date, month: number, year: number) :: boolean:
	set {_monthdate} to date({_year}, {_month}, 1)
	set {_monthday} to getMonthDays({_month}, {_year})
	set {_unix.time} to unix timestamp of {_time}
	set {_unix.base} to unix timestamp of {_monthdate}
	set {_dif} to difference between {_unix.base} and {_unix.time}
	if {_dif} <= 86400 * {_monthday}:
		return true
	else:
		return false

function getMonthDays(month: number, year: number) :: number:
	if {_month} is 1, 3, 5, 7, 8, 10 or 12:
		set {_day} to 31
	else if {_month} is 4, 6, 9 or 11:
		set {_day} to 30
	else if {_month} is 2:
		if mod({_year}, 4) is not 0:
			set {_day} to 28
		else if mod({_year}, 100) is 0:
			if mod({_year}, 400) is 0:
				set {_day} to 29
			else:
				set {_day} to 29
		else:
			set {_day} to 29
	return {_day}

function rankingEnding():
	updateBaseDate()
	kitClearStats()
	load yml "plugins/skript-yaml/General Options/Ranking Dates.sk" as "date.ranking"
	set {_date-month.year} to yml value "monthly.year" from "date.ranking"
	set {_date-month.month} to yml value "monthly.month" from "date.ranking"
	set {_date-month.day} to yml value "monthly.day" from "date.ranking"
	set {_date-week.year} to yml value "weekly.year" from "date.ranking"
	set {_date-week.month} to yml value "weekly.month" from "date.ranking"
	set {_date-week.day} to yml value "weekly.day" from "date.ranking"
	unload yml "date.ranking"
	set {_date.week} to date({_date-week.year}, {_date-week.month}, {_date-week.day})
	# Kills / Deaths
	load yml "plugins/skript-yaml/General Database/Kills.yml" as "updatestats.kill"
	loop yaml nodes "" from "updatestats.kill":
		set {_id} to loop-key
		set {_uuid.killer} to yml value "%{_id}%.killer-player" from "updatestats.kill"
		set {_kit.killer} to yml value "%{_id}%.killer-kit" from "updatestats.kill"
		set {_uuid.victim} to yml value "%{_id}%.victim-player" from "updatestats.kill"
		set {_kit.victim} to yml value "%{_id}%.victim-kit" from "updatestats.kill"
		set {_time} to yml value "%{_id}%.time" from "updatestats.kill"
		# All / Kit
		add 1 to {Kit-Kill.all::%{_uuid.killer}%}
		add 1 to {Kit-Kill.%{_kit.killer}%::%{_uuid.killer}%}
		add 1 to {Kit-Death.all::%{_uuid.victim}%}
		add 1 to {Kit-Death.%{_kit.victim}%::%{_uuid.victim}%}
		# Month
		if checkMonthing({_time}, {_date-month.month}, {_date-month.year}) is true:
			add 1 to {Kit-Kill.month::%{_uuid.killer}%}
			add 1 to {Kit-Death.month::%{_uuid.victim}%}
		# Week
		if checkWeeking({_time}, {_date.week}) is true:
			add 1 to {Kit-Kill.week::%{_uuid.killer}%}
			add 1 to {Kit-Death.week::%{_uuid.victim}%}
	unload yml "updatestats.kill"
	# KDs
	load yml "plugins/skript-yaml/Kit Classes/All Classes.yml" as "classes"
	set {_kits::*} to yml list "Classes" from "classes"
	unload yml "classes"
	loop all offline players:
		set {_uuid} to UUID of loop-offline player
		if {Kit-Kill.all::%{_uuid}%} is not set:
			if {Kit-Death.all::%{_uuid}%} is not set:
				continue
		# All
		set {_kd.all} to {Kit-Kill.all::%{_uuid}%} / {Kit-Death.all::%{_uuid}%}
		set {Kit-KD.all::%{_uuid}%} to {_kd.all} if {_kd.all} is set
		# Month
		set {_kd.month} to {Kit-Kill.month::%{_uuid}%} / {Kit-Death.month::%{_uuid}%}
		set {Kit-KD.month::%{_uuid}%} to {_kd.month} if {_kd.month} is set
		# Week
		set {_kd.week} to {Kit-Kill.week::%{_uuid}%} / {Kit-Death.week::%{_uuid}%}
		set {Kit-KD.week::%{_uuid}%} to {_kd.week} if {_kd.week} is set
		# Kit
		loop {_kits::*}:
			set {_kit} to loop-value-2
			if {Kit-Kill.%{_kit}%::%{_uuid}%} is not set:
				if {Kit-Kill.%{_kit}%::%{_uuid}%} is not set:
					continue
			set {_kd.%{_kit}%} to {Kit-Kill.%{_kit}%::%{_uuid}%} / {Kit-Death.%{_kit}%::%{_uuid}%}
			set {Kit-KD.%{_kit}%::%{_uuid}%} to {_kd.%{_kit}%} if {_kd.%{_kit}%} is set
	# Assists
	load yml "plugins/skript-yaml/General Database/Assists.yml" as "updatestats.assist"
	load yml "plugins/skript-yaml/General Databases/Kills.yml" as "updatestats.assisttime"
	loop yaml nodes "" from "updatestats.assist":
		set {_id} to loop-key
		set {_killid.assist} to yml value "%{_id}%.kill-id" from "updatestats.assist"
		set {_uuid.assist} to yml value "%{_id}%.assist-player" from "updatestats.assist"
		set {_kit.assist} to yml value "%{_id}%.assist-kit" from "updatestats.assist"
		# All / Kit
		add 1 to {Kit-Assist.all::%{_uuid.assist}%}
		add 1 to {Kit-Assist.%{_kit.assist}%::%{_uuid.assist}%}
		# Month
		set {_time} to yml value "%{_killid.assist}%.time" from "updatestats.assisttime"
		if checkMonthing({_time}, {_date-month.month}, {_date-month.year}) is true:
			add 1 to {Kit-Assist.month::%{_uuid.assist}%}
		# Week
		if checkWeeking({_time}, {_date.week}) is true:
			add 1 to {Kit-Assist.week::%{_uuid.killer}%}
	unload yml "updatestats.assist"
	unload yml "updatestats.assisttime"
	# Wins
	load yml "plugins/skript-yaml/General Database/Games.yml" as "updatestats.game"
	loop yaml nodes "" from "updatestats.game":
		set {_id} to loop-key
		set {_map} to yml value "%{_id}%.map" from "updatestats.game"
		set {_rule} to yml value "%{_id}%.rule" from "updatestats.game"
		set {_winteam::*} to yml list "%{_id}%.win-team" from "updatestats.game"
		set {_time} to yml value "%{_id}%.time" from "updatestats.game"
		set {_duration} to yml value "%{_id}%.duration" from "updatestats.game"
		set {_minPlay} to {_duration} / 2
		loop yaml nodes "%{_id}%.players" from "updatestats.game":
			set {_uuid} to loop-key-2
			set {_team} to yml value "%{_id}%.players.%{_uuid}%.team" from "updatestats.game"
			set {_playtime} to yml value "%{_id}%.players.%{_uuid}%.team" from "updatestats.game"
			if {_winteam::*} does not contain {_team}:
				continue
			if {_playtime} < {_minPlay}:
				continue
			# All / Map / Rule
			add 1 to {Kit-Win.all::%{_uuid}%}
			add 1 to {Kit-Win.%{_map}%::%{_uuid}%}
			add 1 to {Kit-Win.%{_rule}%::%{_uuid}%}
			# Month
			if checkMonthing({_time}, {_date-month.month}, {_date-month.year}) is true:
				add 1 to {Kit-Win.month::%{_uuid}%}
			# Week
			if checkWeeking({_time}, {_date.week}) is true:
				add 1 to {Kit-Win.week::%{_uuid}%}
	unload yml "updatestats.game"
	# Update Rankings
	loop 5 times:
		if loop-number-1 is 1:
			set {_type} to "Kill"
		else if loop-number-1 is 2:
			set {_type} to "KD"
		else if loop-number-1 is 3:
			set {_type} to "Win"
		else if loop-number-1 is 4:
			set {_type} to "Death"
		else if loop-number-1 is 5:
			set {_type} to "Assist"
		rankingUpdate("Kit", {_type}, {Kit-TypeRanking::%{_type}%})

command /gameendupdate <text>:
	permission: sk.admin
	trigger:
		loop 5 times:
			if loop-number-1 is 1:
				set {_type} to "Kill"
			else if loop-number-1 is 2:
				set {_type} to "KD"
			else if loop-number-1 is 3:
				set {_type} to "Win"
			else if loop-number-1 is 4:
				set {_type} to "Death"
			else if loop-number-1 is 5:
				set {_type} to "Assist"
			execute console command "/updaterank %{_type}% %{%arg 1%-TypeRanking::%{_type}%}% %arg 1%"

#command /updateranking <text>:
#	usage: /updateranking <Class...etc(kit)>
#	trigger:
#		if arg 1 is "kit":
#			loop {Classes::*}:
#				loop 6 times:
#					if loop-number-1 is 1:
#						set {_type} to "Kill"
#					else if loop-number-1 is 2:
#						set {_type} to "KD"
#					else if loop-number-1 is 3:
#						set {_type} to "Win"
#					else if loop-number-1 is 4:
#						set {_type} to "Death"
#					else if loop-number-1 is 5:
#						set {_type} to "Assist"
#					else if loop-number-1 is 6:
#						set {_type} to "Count"
#					loop {%{_type}%.%loop-index-1%::*}:
#						set {_list::%loop-index-2%} to loop-value-3
#					set {_high} to 0
#					loop 5 times:
#						set {_num} to loop-number-2
#						loop {_list::*}:
#							loop-value-4 > {_high}
#							{UUID::%loop-index-2%} is set
#							set {_high} to loop-value-4
#							set {_highplayer} to loop-index-2
#						if {_high} is 0:
#							delete {_high}
#						set line 2 of block at {Ranking-sign.%{_type}%_%loop-index-1%::%{_num}%} to "%{UUID::%{_highplayer}%}%"
#						if {_type} is "KD":
#							set line 4 of block at {Ranking-sign.%{_type}%_%loop-index-1%::%{_num}%} to "%{_high}% k/d"
#						else:
#							set line 4 of block at {Ranking-sign.%{_type}%_%loop-index-1%::%{_num}%} to "%{_high}% %{_type}%s"
#						set {_high} to 0
#						delete {_list::%{_highplayer}%}
#						delete {_highplayer}
#		else:
#			if arg 1 is "week":
#				set {_time} to "Weekly"
#				set {_looptime} to 5
#			if arg 1 is "all":
#				set {_time} to "All"
#				set {_looptime} to 10
#			loop 5 times:
#				if loop-number-1 is 1:
#					set {_type} to "Kill"
#				else if loop-number-1 is 2:
#					set {_type} to "KD"
#				else if loop-number-1 is 3:
#					set {_type} to "Win"
#				else if loop-number-1 is 4:
#					set {_type} to "Death"
#				else if loop-number-1 is 5:
#					set {_type} to "Assist"
#				loop {%{_type}%.%arg 1%::*}:
#					set {_list::%loop-index%} to loop-value-2
#				set {_high} to 0
#				loop {_looptime} times:
#					set {_num} to loop-number-2
#					set {_hdnum} to {_num} + 1
#					loop {_list::*}:
#						loop-value-3 > {_high}
#						{UUID::%loop-index%} is set
#						set {_high} to loop-value-3
#						set {_highplayer} to loop-index
#					if {_high} is 0:
#						delete {_high}
#					execute console command "/hd setline %{_time}%-%{_type}% %{_hdnum}% &a%{_num}%&e. &f&l%{UUID::%{_highplayer}%}% &7 - &b%{_high}%"
#					set {_high} to 0
#					delete {_list::%{_highplayer}%}
#					delete {_highplayer}