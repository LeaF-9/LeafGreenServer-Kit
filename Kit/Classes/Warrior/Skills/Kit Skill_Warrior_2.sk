# Limiter Removal

on damage with priority LOW:
	set {_attacker} to getAttacker(victim)
	set {_damage.mul} to 1

	if {Stats.%{_attacker}%::LimiterRemoval} is true:
		set {_per} to kitEffect_LimiterRemoval_CalcDamage({_damage.mul}, true)
		add {_per} to {_damage.mul}
		kitParticle_LimiterRemoval_BuffAttack(victim)
	else if {Stats.%{_attacker}%::LimiterRemoval} is false:
		set {_per} to kitEffect_LimiterRemoval_CalcDamage({_damage.mul}, false)
		add {_per} to {_damage.mul}
		kitParticle_LimiterRemoval_DebuffAttack(victim)
	if {Stats.%victim%::LimiterRemoval} is true:
		set {_per} to kitEffect_LimiterRemoval_CalcDamage({_damage.mul}, false)
		add {_per} to {_damage.mul}
		kitParticle_LimiterRemoval_BuffDamage(victim)
	else if {Stats.%victim%::LimiterRemoval} is false:
		set {_per} to kitEffect_LimiterRemoval_CalcDamage({_damage.mul}, true)
		add {_per} to {_damage.mul}
		kitParticle_LimiterRemoval_DebuffDamage(victim)
	
	if {_damage.mul} is 1:
		stop
	setDamageModification_MUL(victim, {_damage.mul})
	if {_damage.mul} > 1:
		kitEffectDescription(victim, "§4❤§c§lx%{_damage.mul}%")
	else:
		kitEffectDescription(victim, "§4❤§a§lx%{_damage.mul}%")



function kitSkill_Warrior_2(player: player):
	toolCT({_player}, "Warrior", 2)
	kitEffect_LimiterRemoval({_player})



local function kitEffect_LimiterRemoval(player: player):
	set {_now} to now
	set {Stats.%{_player}%::LimiterRemoval} to true
	set {Stats.%{_player}%::LimiterRemovalTime} to {_now}
	kitMsg({_player}, "§5リミッターを外しました...")
	sendTimeBossbar_GREEN({_player}, "Limiter Removal - Buff", 100)
	apply speed 2 to {_player} for 5 seconds
	kitParticle_LimiterRemoval_Launch({_player})

	loop 100 times:
		if {Stats.%{_player}%::LimiterRemovalTime} is not {_now}:
			stop
		kitParticle_LimiterRemoval_Buff({_player})
		wait a tick

	if {Stats.%{_player}%::LimiterRemovalTime} is not {_now}:
		stop
	
	set {Stats.%{_player}%::LimiterRemoval} to false
	kitMsg({_player}, "§1リミッターが戻り,疲れてしまった...")
	remove slowness from {_player}
	apply slowness 3 to {_player} for 5 seconds
	sendTimeBossbar_RED({_player}, "Limiter Removal - Debuff", 100)
	kitParticle_LimiterRemoval_Fatigue({_player})

	loop 100 times:
		if {Stats.%{_player}%::LimiterRemovalTime} is not {_now}:
			stop
		kitParticle_LimiterRemoval_Debuff({_player})
		wait a tick

	delete {Stats.%{_player}%::LimiterRemoval}
	delete {Stats.%{_player}%::LimiterRemovalTime}
	kitMsg({_player}, "§2疲れがとれた!")
	remove slowness from {_player}
	apply infinite slowness 2 without particles to {_player}

local function kitEffect_LimiterRemoval_CalcDamage(base: number, plus: boolean) :: number:
	if {_plus} is true:
		if {_base} >= 1:
			set {_per} to 0.5
		else:
			set {_per} to 0.25
	else:
		if {_base} > 1:
			set {_per} to -0.5
		else:
			set {_per} to -0.25
	return {_per}



local function kitParticle_LimiterRemoval_Launch(player: player):
	playSound("entity.ender_dragon.growl", 1, 1.6, {_player})
	playSound("entity.generic.explode", 1, 1.7, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 50 times:
		spawnParticle_Vector(flame, randomVector(), 0.9, {_baseloc})
		spawnParticle_Vector(large_smoke, randomVector(), 0.75, {_baseloc})
		chance of 10%:
			set {_el} to moveRandomLocation({_baseloc}, 1)
			spawnParticle_Block(netherite block, {_el})

local function kitParticle_LimiterRemoval_Buff(player: player):
	set {_rvec} to randomVector()
	set y of {_rvec} to 0
	set {_baseloc} to location of {_player}
	set pitch of {_baseloc} to 0
	set {_el} to location 0.5 meters in front of setDirToVec({_baseloc}, {_rvec})

	spawnParticle_Vector(trial_spawner_detection, vector(0, 1, 0), 0.3, {_el})

local function kitParticle_LimiterRemoval_Fatigue(player: player):
	playSound("entity.wolf.whine", 1, 0.55, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 50 times:
		spawnParticle_Vector(sculk_soul, randomVector(), 0.5, {_baseloc})
		chance of 10%:
			set {_el} to moveRandomLocation({_baseloc}, 1)
			spawnParticle_BlockData(falling_dust, obsidian, {_el})

local function kitParticle_LimiterRemoval_Debuff(player: player):
	set {_rvec} to randomVector()
	set y of {_rvec} to 0
	set {_baseloc} to location 2 meters above {_player}
	set pitch of {_baseloc} to 0
	set {_el} to location 0.5 meters in front of setDirToVec({_baseloc}, {_rvec})

	spawnParticle_Vector(trial_spawner_detection_ominous, vector(0, -1, 0), 0.3, {_el})

local function kitParticle_LimiterRemoval_BuffAttack(player: player):
	playSound("entity.zombie.break_wooden_door", 1, 1.2, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 30 times:
		spawnParticle_Block(crimson planks, moveRandomLocation({_baseloc}, 1))
		chance of 20%:
			spawnParticle_Block(mangrove planks, moveRandomLocation({_baseloc}, 0.5))

local function kitParticle_LimiterRemoval_DebuffAttack(player: player):
	playSound("ambient.underwater.enter", 1, 1.8, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 30 times:
		spawnParticle(falling_water, moveRandomLocation({_baseloc}, 1))
		chance of 20%:
			spawnParticle_BlockData(falling_dust, blue wool, moveRandomLocation({_baseloc}, 0.5))

local function kitParticle_LimiterRemoval_BuffDamage(player: player):
	playSound("entity.armor_stand.hit", 1, 0.65, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 10 times:
		spawnParticle_DustTransition(rgb(228, 27, 54), rgb(228, 154, 166), 3, moveRandomLocation({_baseloc}, 1))

local function kitParticle_LimiterRemoval_DebuffDamage(player: player):
	playSound("entity.zombie.infect", 1, 0.85, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 30 times:
		spawnParticle(trial_omen, moveRandomLocation({_baseloc}, 1))