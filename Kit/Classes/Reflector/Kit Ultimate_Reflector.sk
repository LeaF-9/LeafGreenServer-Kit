# Universal Division

function kitUltReflector(player: player):
	message formatted "§c世界を分断する巨大な壁を展開します!" to {_player}
	message formatted "§cこの壁を跨いだプレイヤーを認識することが不可能になります!" to {_player}
	set {_baseloc} to location 5 meters in front of head of {_player}
	set pitch of {_baseloc} to 0
	set {_walldirection} to {_baseloc}
	add 90 to yaw of {_walldirection}
	# middle
	set {_block} to "minecraft:sea_lantern"
	set {_transformation} to kitTransformation("[0f,0f,0f,1f]", "[0f,0f,0f,1f]", "[-0.05f,-25f,-50f]", "[0.1f,50f,100f]")
	set {_nbt} to nbt compound from "{transformation:%{_transformation}%,block_state:{Name:""%{_block}%""}}"
	set {_location} to {_walldirection}
	spawn a block display at {_location} with nbt {_nbt}
	set {_blockdisplay} to spawned block display
	set metadata value "gametype" of {_blockdisplay} to "Kit"
	set metadata value "Universal Division" of {_blockdisplay} to "%{_player}%"
	# front
	set {_location} to location 100 meters in front of {_walldirection}
	spawn a block display at {_location} with nbt {_nbt}
	set {_blockdisplay} to spawned block display
	set metadata value "gametype" of {_blockdisplay} to "Kit"
	set metadata value "Universal Division" of {_blockdisplay} to "%{_player}%"
	# behind
	set {_location} to location 100 meters behind {_walldirection}
	spawn a block display at {_location} with nbt {_nbt}
	set {_blockdisplay} to spawned block display
	set metadata value "gametype" of {_blockdisplay} to "Kit"
	set metadata value "Universal Division" of {_blockdisplay} to "%{_player}%"
	set {_now} to now
	set {Ult.%{_player}%::UniversalDivision} to {_walldirection}
	kitEffect_UniversalDivision_Timer()
	wait 10 seconds
	{Ult.%{_player}%::UniversalDivision} is {_walldirection}
	delete {Ult.%{_player}%::UniversalDivision}
	loop all block displays:
		metadata value "Universal Division" of loop-block display is "%{_player}%"
		delete loop-block display

local function kitEffect_UniversalDivision_Timer():
	set {_true} to true
	while {_true} is true:
		delete {_ok}
		delete {_walls::*}
		loop all players:
			{Ult.%{_player}%::UniversalDivision} is set
			set {_ok} to true
			add {Ult.%{_player}%::UniversalDivision} to {_walls::*}
		if {_ok} is not set:
			set {_true} to false
			continue
		loop all players:
			metadata value "gametype" of loop-player is "Kit"
			add loop-player to {_loop-1::*}
			add loop-player to {_loop-2::*}
		loop {_loop-1::*}:
			remove loop-value from {_loop-2::*}
			loop {_loop-2::*}:
				kitEffect_UniversalDivision_Vision(loop-value-1, loop-value-2, {_walls::*})
		wait a tick

local function kitEffect_UniversalDivision_Vision(player-1: player, player-2: player, walls: locations):
	if {Kit-Invisible::%{_player-1}%} is set:
		stop
	if {Kit-Invisible::%{_player-2}%} is set:
		stop
	set {_loc-1} to location of {_player-1}
	set {_loc-2} to location of {_player-2}
	loop {_walls::*}:
		set {_loc-3} to location 150 meters in front of loop-value
		set {_loc-4} to location 150 meters behind loop-value
		if kitEffect_UniversalDivision_Intersect({_loc-1}, {_loc-2}, {_loc-3}, {_loc-4}) is true:
			set {_invisible} to true
	if {_invisible} is true:
		hide {_player-1} from {_player-2}
		hide {_player-2} from {_player-1}
	else:
		reveal {_player-1} from {_player-2}
		reveal {_player-2} from {_player-1}

local function kitEffect_UniversalDivision_Intersect(loc-1: location, loc-2: location, loc-3: location, loc-4: location) :: boolean:
	set {_orien-1} to kitEffect_UniversalDivision_Orientation({_loc-3}, {_loc-4}, {_loc-1})
	set {_orien-2} to kitEffect_UniversalDivision_Orientation({_loc-3}, {_loc-4}, {_loc-2})
	set {_orien-3} to kitEffect_UniversalDivision_Orientation({_loc-1}, {_loc-2}, {_loc-3})
	set {_orien-4} to kitEffect_UniversalDivision_Orientation({_loc-1}, {_loc-2}, {_loc-4})
	if {_orien-1} is not {_orien-2}:
		if {_orien-3} is not {_orien-4}:
			return true
	return false

local function kitEffect_UniversalDivision_Orientation(p: location, q: location, r: location) :: number:
	set {_p.x} to x-pos of {_p}
	set {_p.z} to z-pos of {_p}
	set {_q.x} to x-pos of {_q}
	set {_q.z} to z-pos of {_q}
	set {_r.x} to x-pos of {_r}
	set {_r.z} to z-pos of {_r}
	set {_val} to ({_q.z} - {_p.z}) * ({_r.x} - {_q.x}) - ({_q.x} - {_p.x}) * ({_r.z} - {_q.z})
	if {_val} is 0:
		return 0
	if {_val} > 0:
		return 1
	else:
		return 2