# weapon-name: Reflec Tickle

function kitEffect_ReflecTickle_DamageNormal(player: player, event: object):
	set {_victim} to {_player}
	set {_attacker} to getAttacker({_victim})
	if getKitStats({_victim}, "ReflecTickle") is true:
		checkDamagable({_victim}) is true
		{_event}.setCancelled(true)
		kitDamageNull({_attacker}, {_victim}, 1, "反射の杖", true)
		kitParticle_ReflecTickle_Damage({_victim})

function kitEffect_ReflecTickle_AttackNormal(player: player, event: object):
	set {_attacker} to {_player}
	{_event}.setCancelled(true) if getKitStats({_attacker}, "ReflecTickle") is true

function kitEffect_ReflecTickle_Sneak(player: player, event: object):
	kitEffect_ReflecTickle({_player})



local function kitEffect_ReflecTickle(player: player):
	kitParticle_ReflecTickle_Shield({_player})
	setKitStats({_player}, "ReflecTickle", true)
	wait a tick
	set {_ok} to true
	while {_ok} is true:
		if {_player} is not sneaking:
			delete {_ok}
			continue
		if getKitStats({_player}, "ReflecTickle") is not set:
			stop
		wait a tick
	deleteKitStats({_player}, "ReflecTickle")



local function kitParticle_ReflecTickle_Shield(player: player):
	playSound("item.trident.return", 1, 2, {_player})
	set {_baseloc} to location of {_player}
	set {_effloc} to location 1 meter above {_baseloc}
	loop 20 times:
		spawnParticle_Vector(wax_off, randomVector(), 3, {_effloc})
	set yaw of {_baseloc} to 0
	set pitch of {_baseloc} to 0
	set {_rotation} to getQuaternionf(0, 0, 0, 1)
	set {_translation} to getVector3f(0, 1, 0)
	set {_scale} to getVector3f(1, 1, 1)
	set {_item} to white stained glass pane
	set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
	loop 3 times:
		set {_loc} to {_baseloc}
		add (120 * loop-number) to yaw of {_loc}
		set {_loc} to location 0.5 meters in front of {_loc}

		spawn an item display at {_loc}
		set {_itemdisplay} to spawned item display

		setBrightness({_itemdisplay})
		{_itemdisplay}.setTeleportDuration(1)
		{_itemdisplay}.setInterpolationDuration(1)
		{_itemdisplay}.setViewRange(1000)
		setDisplayItem({_itemdisplay}, {_item})
		{_itemdisplay}.setTransformation({_transformation})

		set metadata value "gametype" of {_itemdisplay} to "Kit"
		set metadata value "reflectickle" of {_itemdisplay} to "%{_player}%"
		set metadata value "reflectickle-number" of {_itemdisplay} to loop-number
	wait a tick
	set {_ok} to true
	set {_yaw} to 10
	while {_ok} is true:
		if {_player} is not sneaking:
			delete {_ok}
			continue
		if getKitStats({_player}, "ReflecTickle") is not set:
			delete {_ok}
			continue
		set {_baseloc} to location of {_player}
		set yaw of {_baseloc} to 0
		set pitch of {_baseloc} to 0
		loop all item displays:
			metadata value "reflectickle" of loop-item display is "%{_player}%"
			set {_num} to metadata value "reflectickle-number" of loop-item display
			set {_loc} to {_baseloc}
			add 120 * {_num} + {_yaw} to yaw of {_loc}
			set {_loc} to location 0.5 meters in front of {_loc}
			teleport loop-item display to {_loc}
		add 10 to {_yaw}
		wait a tick
	playSound("entity.zombie.infect", 1, 2, {_player})
	loop all item displays:
		metadata value "reflectickle" of loop-item display is "%{_player}%"
		set {_el} to location 1 meter above loop-item display
		delete loop-item display
		spawnParticle(cloud, {_el})

local function kitParticle_ReflecTickle_Damage(player: player):
	playSound("block.glass.break", 1, 1.5, {_player})
	loop 10 times:
		spawnParticle_Block(white stained glass, aroundEffect({_player}))