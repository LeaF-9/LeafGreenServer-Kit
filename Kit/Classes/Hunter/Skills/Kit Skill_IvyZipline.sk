# skill-name: Ivy Zipline

options:
	stats-time: "IvyZipline-Time"
	max-meter: 50
	ride-radius: 2
	ride-damage: 0.5

import:
	org.bukkit.FluidCollisionMode
	org.bukkit.block.data.Bisected$Half

function kitEffect_IvyZipline(player: player):
	set {_onGround} to {_player}.isOnGround()
	if {_onGround} is false:
		send action bar "§c§l接地した状態で発動してください" to {_player}
		stop
	
	nameCT({_player}, "Ivy Zipline")
	set {_loc.from} to location 1.5 meters above {_player}
	kitMsg({_player}, "<##1a5132>蔦の鉤縄<##2d704a>を発射します...")
	kitEffect_IvyZipline_Shoot({_player}, {_loc.from})

local function kitEffect_IvyZipline_Shoot(player: player, loc: location):
	set {_baseloc} to {_loc}
	set {_world} to world of {_baseloc}
	set {_fluid} to (FluidCollisionMode.NEVER)
	set {_gravity} to vector(0, -0.01, 0)
	set {_vec} to setVector({_loc}, location 1 meter in front of {_loc})

	set {_addm} to 0.5
	set {_count} to {@max-meter} / {_addm}

	set {_ticktime} to 5
	set {_ln} to 0
	loop {_count} times:
		continue if {_hit} is set

		set {_rayTrace} to {_world}.rayTraceBlocks({_baseloc}, {_vec}, {_addm}, {_fluid}, true)
		if ({_rayTrace}.getHitBlock()) is set:
			set {_hit} to {_rayTrace}.getHitBlock()
			set {_hitface} to {_rayTrace}.getHitBlockFace()

		set {_baseloc} to setDirToVec({_baseloc}, {_vec})
		set {_baseloc} to location {_addm} meters in front of {_baseloc}
		kitParticle_IvyZipline_Ivy({_baseloc})

		wait a tick if mod({_ln}, {_ticktime}) is 0 or 5
		set {_vec} to {_vec} + {_gravity}
		add 1 to {_ln}

	if {_hit} is not set:
		send action bar "§c§l着地点が見つかりませんでした" to {_player}
		stop
	
	set {_loc.below} to location 1.5 meters below {_loc}
	set {_vec.direction} to setVector({_loc.below}, {_baseloc})
	set {_loc.from} to {_loc.below}
	set yaw of {_loc.from} to yaw of {_vec.direction}

	set {_loc.to} to {_baseloc}
	set yaw of {_loc.to} to ((yaw of {_vec.direction}) + 180)
	set {_tovec} to {_hitface}.getDirection() * vector(1.5, 1.5, 1.5)
	set {_loc.above} to {_loc.to} ~ {_tovec}

	kitEffect_IvyZipline_Zipline({_player}, {_loc.from}, {_loc}, {_loc.to}, {_loc.above})

local function kitEffect_IvyZipline_Zipline(player: player, from: location, core.from: location, to: location, core.to: location):
	set {_now} to now
	setKitStats({_player}, {@stats-time}, {_now})

	kitFakeDeleteData({_player}, "Ivy Zipline")

	kitEffect_IvyZipline_Display({_player}, {_from}, {_core.from})
	kitEffect_IvyZipline_Display({_player}, {_to}, {_core.to})

	kitMsg({_player}, "<##39c613>§l蔦のジップライン<##8be18b>を設置しました!")
	kitParticle_IvyZipline_Place({_from}, {_to})

	add -90 to pitch of {_from}
	set {_from} to location 1.75 meters in front of {_from}

	add -90 to pitch of {_to}
	set {_to} to location 1.75 meters in front of {_to}
	
	set {_vec.from} to setVector({_from}, {_to}, 0.5)
	set {_from} to setDirToVec({_from}, {_vec.from})
	add 3.5 to y-pos of {_from}
	set {_vec.to} to setVector({_to}, {_from}, 0.5)
	set {_to} to setDirToVec({_to}, {_vec.to})
	add 3.5 to y-pos of {_to}

	set {_distance} to distance between {_from} and {_to}
	set {_metercount} to round({_distance}) * 2
	set {_uuid} to a random UUID

	while getKitStats({_player}, {@stats-time}) is {_now}:
		wait a tick

		# Particle
		kitParticle_IvyZipline_Line({_from}, {_to})

		# 乗車確認
		set {_m} to 0
		set {_addm} to 0.5
		loop {_metercount} times:
			add {_addm} to {_m}
			set {_rideloc} to location {_m} meters in front of {_from}

			loop all players in radius {@ride-radius} around {_rideloc}:
				metadata value "gametype" of loop-player is "Kit"
				{_riding::%loop-player%} is not set
				if loop-player is sneaking:
					if {_sneaking::%loop-player%} is false:
						set {_sneaking::%loop-player%} to true

						set {_playerloc} to location of loop-player
						set {_playervec} to setVector({_playerloc}, location 1 meter in front of {_playerloc})
						set {_angle.from} to {_playervec}.angle({_vec.from})
						set {_angle.to} to {_playervec}.angle({_vec.to})
						if {_angle.from} <= {_angle.to}:
							set {_ridingvec} to {_vec.from}
						else:
							set {_ridingvec} to {_vec.to}

						set {_riding::%loop-player%} to {_rideloc}
						set {_riding.vec::%loop-player%} to {_ridingvec}
						kitParticle_IvyZipline_Ride({_rideloc})
						continue
				set {_sneaking::%loop-player%} to false if loop-player is not sneaking

		# 乗車中処理
		loop all players:
			continue if {_riding::%loop-player%} is not set

			set {_rideloc} to {_riding::%loop-player%} ~ {_riding.vec::%loop-player%}
			set {_riding::%loop-player%} to {_rideloc}

			set {_sneaking::%loop-player%} to false if loop-player is not sneaking

			if loop-player is sneaking:
				if {_sneaking::%loop-player%} is false:
					set {_sneaking::%loop-player%} to true
					delete {_riding::%loop-player%}
					delete {_riding.vec::%loop-player%}
					kitParticle_IvyZipline_Drop({_rideloc})
					continue
			
			if {_riding.vec::%loop-player%} = {_vec.from}:
				set {_disbase} to {_from}
			else:
				set {_disbase} to {_to}
			set {_disride} to distance between {_disbase} and {_rideloc}
			if {_disride} > {_distance}:
				delete {_sneaking::%loop-player%}
				delete {_riding::%loop-player%}
				delete {_riding.vec::%loop-player%}
				kitParticle_IvyZipline_Drop({_rideloc})
				continue

			set yaw of {_rideloc} to yaw of loop-player
			set pitch of {_rideloc} to pitch of loop-player
			teleport loop-player to {_rideloc}

			continue if kitCheckTeam(loop-player, {_player}, false) is false
			set {_damage::%loop-player%} to 0 if {_damage::%loop-player%} is not set
			if mod({_damage::%loop-player%}, 10) is 0 or 10:
				kitDamage({_player}, loop-player, {@ride-damage}, "蔦の鉤縄")
				kitParticle_IvyZipline_Damage(loop-player)
			add 1 to {_damage::%loop-player%}

		set {_exist} to kitFakeCheck({_player}, "Ivy Zipline")
		if {_exist} is false:
			deleteKitStats({_player}, {@stats-time})

local function kitEffect_IvyZipline_Display(player: player, loc: location, core: location):
	set {_basevec} to setVector({_loc}, {_core})
	set {_basevec} to normalized {_basevec}
	set {_placeloc} to {_loc}
	set pitch of {_placeloc} to 0

	if {_basevec} is vector(0, 1, 0):
		set {_matrix.1} to getMatrix4f(1, 0, 0, -0.5, 0, 0.75, 0, 0, 0, 0, 1, -0.5, 0, 0, 0, 1)
		set {_matrix.2} to getMatrix4f(1, 0, 0, -0.5, 0, 0.75, 0, 0.75, 0, 0, 1, -0.5, 0, 0, 0, 1)
		set {_matrix.3} to getMatrix4f(0.5, 0, 0, -0.25, 0, 0.5, 0, 1.5, 0, 0, 0.5, -0.25, 0, 0, 0, 1)
		set {_matrix.4} to getMatrix4f(0.6363961031, 0, -0.6363961031, 0, 0, 0.7, 0, 1.5, 0.6363961031, 0, 0.6363961031, -0.63625, 0, 0, 0, 1)
	
	else if {_basevec} is vector(0, -1, 0):
		set {_matrix.1} to getMatrix4f(1, 0, 0, -0.5, 0, -0.75, 0, 0, 0, 0, -1, 0.5, 0, 0, 0, 1)
		set {_matrix.2} to getMatrix4f(1, 0, 0, -0.5, 0, -0.75, 0, -0.75, 0, 0, -1, 0.5, 0, 0, 0, 1)
		set {_matrix.3} to getMatrix4f(0.5, 0, 0, -0.25, 0, -0.5, 0, -1.5, 0, 0, -0.5, 0.25, 0, 0, 0, 1)
		set {_matrix.4} to getMatrix4f(0.6363961031, 0, -0.6363961031, 0, 0, -0.7, 0, -1.5, -0.6363961031, 0, -0.6363961031, 0.63625, 0, 0, 0, 1)
	
	else if {_basevec} is vector(1, 0, 0):
		set {_matrix.1} to getMatrix4f(0, 0.75, 0, 0, 1, 0, 0, -0.5, 0, 0, -1, 0.5, 0, 0, 0, 1)
		set {_matrix.2} to getMatrix4f(0, 0.75, 0, 0.75, 1, 0, 0, -0.5, 0, 0, -1, 0.5, 0, 0, 0, 1)
		set {_matrix.3} to getMatrix4f(0, 0.5, 0, 1.5, 0.5, 0, 0, -0.25, 0, 0, -0.5, 0.25, 0, 0, 0, 1)
		set {_matrix.4} to getMatrix4f(0, 0.7, 0, 1.5, 0.6363961031, 0, -0.6363961031, 0, -0.6363961031, 0, -0.6363961031, 0.63625, 0, 0, 0, 1)
	
	else if {_basevec} is vector(-1, 0, 0):
		set {_matrix.1} to getMatrix4f(0, -0.75, 0, 0, -1, 0, 0, 0.5, 0, 0, -1, 0.5, 0, 0, 0, 1)
		set {_matrix.2} to getMatrix4f(0, -0.75, 0, -0.75, -1, 0, 0, 0.5, 0, 0, -1, 0.5, 0, 0, 0, 1)
		set {_matrix.3} to getMatrix4f(0, -0.5, 0, -1.5, -0.5, 0, 0, 0.25, 0, 0, -0.5, 0.25, 0, 0, 0, 1)
		set {_matrix.4} to getMatrix4f(0, -0.7, 0, -1.5, -0.6363961031, 0, 0.6363961031, 0, -0.6363961031, 0, -0.6363961031, 0.63625, 0, 0, 0, 1)
	
	else if {_basevec} is vector(0, 0, 1):
		set {_matrix.1} to getMatrix4f(0, 0, -1, 0.5, -1, 0, 0, 0.5, 0, 0.75, 0, 0, 0, 0, 0, 1)
		set {_matrix.2} to getMatrix4f(0, 0, -1, 0.5, -1, 0, 0, 0.5, 0, 0.75, 0, 0.75, 0, 0, 0, 1)
		set {_matrix.3} to getMatrix4f(0, 0, -0.5, 0.25, -0.5, 0, 0, 0.25, 0, 0.5, 0, 1.5, 0, 0, 0, 1)
		set {_matrix.4} to getMatrix4f(-0.6363961031, 0, -0.6363961031, 0.63625, -0.6363961031, 0, 0.6363961031, 0, 0, 0.7, 0, 1.5, 0, 0, 0, 1)
	
	else if {_basevec} is vector(0, 0, -1):
		set {_matrix.1} to getMatrix4f(0, 0, -1, 0.5, 1, 0, 0, -0.5, 0, -0.75, 0, 0, 0, 0, 0, 1)
		set {_matrix.2} to getMatrix4f(0, 0, -1, 0.5, 1, 0, 0, -0.5, 0, -0.75, 0, -0.75, 0, 0, 0, 1)
		set {_matrix.3} to getMatrix4f(0, 0, -0.5, 0.25, 0.5, 0, 0, -0.25, 0, -0.5, 0, -1.5, 0, 0, 0, 1)
		set {_matrix.4} to getMatrix4f(-0.6363961031, 0, -0.6363961031, 0.63625, 0.6363961031, 0, -0.6363961031, 0, 0, -0.7, 0, -1.5, 0, 0, 0, 1)
	
	else:
		log "Vector Error"
		stop

	set {_rotation.left} to getQuaternionFromMatrix({_matrix.1})
	set {_rotation.right} to getQuaternionf(0, 0, 0, 1)
	set {_translation} to getTranslationFromMatrix({_matrix.1})
	set {_scale} to getScaleFromMatrix({_matrix.1})
	log "1: %{_rotation.left}% | %{_translation}% | %{_scale}%"
	set {_transformation} to getTransformation({_rotation.left}, {_rotation.right}, {_translation}, {_scale})
	set {_block} to getBlockData(small dripleaf)
	set {_displays::1} to kitFakeBlock({_player}, {_placeloc}, {_block}, {_transformation}, "Ivy Zipline")

	set {_rotation.left} to getQuaternionFromMatrix({_matrix.2})
	set {_translation} to getTranslationFromMatrix({_matrix.2})
	set {_scale} to getScaleFromMatrix({_matrix.2})
	log "2: %{_rotation.left}% | %{_translation}% | %{_scale}%"
	set {_transformation} to getTransformation({_rotation.left}, {_rotation.right}, {_translation}, {_scale})
	set {_displays::2} to kitFakeBlock({_player}, {_placeloc}, {_block}, {_transformation}, "Ivy Zipline")

	set {_rotation.left} to getQuaternionFromMatrix({_matrix.3})
	set {_translation} to getTranslationFromMatrix({_matrix.3})
	set {_scale} to getScaleFromMatrix({_matrix.3})
	log "3: %{_rotation.left}% | %{_translation}% | %{_scale}%"
	set {_transformation} to getTransformation({_rotation.left}, {_rotation.right}, {_translation}, {_scale})
	set {_block} to getBlockData(flowering azalea leaves)
	set {_displays::3} to kitFakeBlock({_player}, {_placeloc}, {_block}, {_transformation}, "Ivy Zipline")

	set {_rotation.left} to getQuaternionFromMatrix({_matrix.4})
	set {_translation} to getTranslationFromMatrix({_matrix.4})
	set {_scale} to getScaleFromMatrix({_matrix.4})
	log "4: %{_rotation.left}% | %{_translation}% | %{_scale}%"
	set {_transformation} to getTransformation({_rotation.left}, {_rotation.right}, {_translation}, {_scale})
	set {_block} to getBlockData(lilac)
	set {_blockdata} to {_block}.setHalf(Half.TOP)
	set {_displays::4} to kitFakeBlock({_player}, {_placeloc}, {_block}, {_transformation}, "Ivy Zipline")



local function kitParticle_IvyZipline_Ivy(loc: location):
	spawnParticle(happy_villager, {_loc})

local function kitParticle_IvyZipline_Place(from: location, to: location):

local function kitParticle_IvyZipline_Line(from: location, to: location):

local function kitParticle_IvyZipline_Ride(loc: location):

local function kitParticle_IvyZipline_Drop(loc: location):

local function kitParticle_IvyZipline_Riding(loc: location):

local function kitParticle_IvyZipline_Damage(player: player):