# skill-name: Guardian Turret

options:
	shoot-interval: 60
	arrow-damage: 2
	poison-tier: 1
	poison-tick: 60
	search-radius: 30
	metadata-arrow: "Guardian Turret - Arrow"

on damage:
	damage was caused by projectile
	metadata value {@metadata-arrow} of projectile is set
	applyEffect(victim, poison, {@poison-tier}, {@poison-tick})

on projectile hit:
	metadata value {@metadata-arrow} of projectile is true
	set metadata value {@metadata-arrow} of projectile to false
	kitParticle_GuardianTurret_Shock(projectile)



function kitEffect_GuardianTurret(player: player):
	set {_SkillLocation} to getKitStats({_player}, "SkillLocation")
	if {_SkillLocation} is not set:
		send action bar "§c§l地点を指定してください" to {_player}
		stop
	
	nameCT({_player}, "Guardian Turret")
	set {_now} to now
	setKitStats({_player}, "GuardianTurret-Time", {_now})
	set {_loc.target} to {_SkillLocation}

	kitFakeDeleteData({_player}, "Guardian Turret")

	set {_loc.mark} to {_loc.target}
	add 1.65 to y-coordinate of {_loc.mark}

	set {_rotation} to getQuaternionf(0, 0, 0, 1)
	set {_translation} to getVector3f(-0.5, -0.5, -0.5)
	set {_scale} to getVector3f(1, 1, 1)
	set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
	set {_block} to getBlockData(skeleton skull)
	set {_marker} to kitFakeBlock({_player}, {_loc.mark}, {_block}, {_transformation}, "Guardian Turret")

	set {_loc.base} to {_loc.target}
	set {_translation} to getVector3f(-0.45, 0, -0.45)
	set {_scale} to getVector3f(0.9, 0.9, 0.9)
	set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
	set {_block} to getBlockData(spruce fence)
	kitFakeBlock({_player}, {_loc.base}, {_block}, {_transformation}, "Guardian Turret")

	add 1 to y-pos of {_loc.base}
	set {_block} to getBlockData(jungle leaves)
	kitFakeBlock({_player}, {_loc.base}, {_block}, {_transformation}, "Guardian Turret")

	kitMsg({_player}, "<##146074>タレットを設置しました...")
	playSound("block.anvil.use", 5, 0.5, {_loc.target})

	set {_back.max} to 0.2
	set {_back.tick} to 20
	set {_back.meter} to {_back.max} / {_back.tick}
	set {_ln} to 0
	while getKitStats({_player}, "GuardianTurret-Time") is {_now}:
		wait a tick

		# after shot moving
		if {_return} is set:
			set {_loc.head} to location of {_marker}
			set {_vec} to setVector({_loc.head}, {_loc.mark}, {_back.meter})
			set {_loc.tel} to {_loc.head} ~ {_vec}
			teleport {_marker} to {_loc.tel}
			subtract {_back.meter} from {_return}
			delete {_return} if {_return} <= 0

		add 1 to {_ln}
		# shoot
		if mod({_ln}, {@shoot-interval}) is 0 or {@shoot-interval}:
			continue if {_target} is not set

			set {_toloc} to location of head of {_target}
			set {_vector} to setVector({_loc.mark}, {_toloc}, {_back.max})
			set {_shootloc} to setDirToVec({_loc.mark}, {_vector})
			shoot an arrow from {_shootloc} at speed 5
			set {_shotarrow} to shot arrow
			setShooter({_shotarrow}, {_player})
			set metadata value {@metadata-arrow} of {_shotarrow} to true
			set metadata value "arrowdamage" of {_shotarrow} to {@arrow-damage}
			kitParticle_GuardianTurret_Arrow({_shotarrow})

			set {_reverse} to {_vector} * vector(-1, -1, -1)
			set {_revloc} to {_loc.mark} ~ {_reverse}
			teleport {_marker} to {_revloc}
			set {_return} to {_back.max}

		# search
		delete {_target}
		loop all players in radius {@search-radius} around {_loc.mark}:
			kitCheckTeam(loop-player, {_player}, false) is true
			set {_target} to loop-player
		
		# head moving
		if {_target} is set:
			set {_toloc} to location of head of {_target}
			set {_vector} to setVector({_loc.mark}, {_toloc})
			set yaw of {_marker} to yaw of {_vector}
			set pitch of {_marker} to pitch of {_vector}

		set {_exist} to kitFakeCheck({_player}, "Guardian Turret")
		if {_exist} is false:
			deleteKitStats({_player}, "GuardianTurret-Time")



local function kitParticle_GuardianTurret_Arrow(proj: projectile):
	set {_loc} to location of {_proj}
	playSound("entity.creaking.freeze", 1, 0.65, {_loc})

	loop 200 times:
		delete {_metadata}
		set {_metadata} to metadata value {@metadata-arrow} of {_proj}
		stop if {_metadata} is false
		
		set {_proloc} to location of {_proj}
		wait a tick
		set {_loc} to location of {_proj}
		if {_proloc} is not set:
			continue
		if loop-number is 1:
			continue

		set {_basevector} to setVector({_proloc}, {_loc})
		set {_proloc} to setDirToVec({_proloc}, {_basevector})

		set {_distance} to distance between {_loc} and {_proloc}
		set {_FM} to 0.5
		set {_loopnum} to round({_distance} / {_FM})
		set {_frontMeter} to 0
		loop {_loopnum} times:
			add {_FM} to {_frontMeter}
			set {_el} to location {_frontMeter} meters in front of {_proloc}
			spawnParticle_Block(spruce leaves, {_el})

local function kitParticle_GuardianTurret_Shock(proj: projectile):
	set {_loc} to location of {_proj}
	playSound("entity.creaking.step", 1, 0.7, {_loc})
	loop 20 times:
		set {_m} to a random number between 0 and 1.5
		set {_vec} to randomVector({_m})
		set {_el} to {_loc} ~ {_vec}
		spawnParticle_BlockData(block_crumble, mangrove leaves, {_el})