# Boscage Twine

options:
	effect-meter: 50
	catch-radius: 3
	damage-per-second: 2
	move-per-second: 10

import:
	org.bukkit.event.entity.EntityShootBowEvent

function kitUltHunter(player: player):
	load yml "plugins/skript-yaml/Kit Classes/Hunter.yml" as "boscagearrow.%{_player}%"
	set {_BoscageArrow} to yml value "kititems.Boscage Arrow" from "boscagearrow.%{_player}%"
	unload yml "boscagearrow.%{_player}%"

	set offhand tool of {_player} to {_BoscageArrow}
	setKitStats({_player}, "BoscageTwine-Arrow", {_BoscageArrow})

	loop 200 times:
		set {_offhand} to offhand tool of {_player}
		if {_offhand} is not {_BoscageArrow}:
			deleteKitStats({_player}, "BoscageTwine-Arrow")
			stop
		wait a tick
	
	deleteKitStats({_player}, "BoscageTwine-Arrow")
	set offhand tool of {_player} to air

on EntityShootBowEvent:
	set {_arrow} to event.getConsumable()
	set {_shooter} to event.getEntity()
	stop if {_arrow} is not getKitStats({_shooter}, "BoscageTwine-Arrow")
	event.setCancelled(true)
	set offhand tool of {_shooter} to air
	kitEffect_BoscageTwine({_shooter})

local function kitEffect_BoscageTwine(player: player):
	set {_baseloc} to location of head of {_player}
	set {_loc.trail::0} to {_baseloc}
	kitSound_BoscageTwine_Launch({_baseloc})

	set {_rad} to 0
	set {_addrad} to 360 / 150
	set {_count} to {@effect-meter} * 2
	set {_addvec} to setVector({_baseloc}, location 10 meters in front of {_baseloc}, 0.5)
	set {_ln} to 0
	loop {_count} times:
		add 0.5 to {_ln}
		set {_baseloc} to {_baseloc} ~ {_addvec}
		set {_rayTrace} to kitEffect_BoscageTwine_RayTrace({_baseloc}, {_addvec}, 0.5)
		set (x of {_addvec}) to (x of {_addvec}) * (-1) if (x of {_rayTrace}) is not 0
		set (y of {_addvec}) to (y of {_addvec}) * (-1) if (y of {_rayTrace}) is not 0
		set (z of {_addvec}) to (z of {_addvec}) * (-1) if (z of {_rayTrace}) is not 0
		set {_loc.trail::%{_ln}%} to {_baseloc}
		kitParticle_BoscageTwine_Twine({_baseloc}, {_rad})

		loop all players in radius {@catch-radius} around {_baseloc}:
			continue if kitCheckTeam(loop-player, {_player}, false, true) is false
			continue if {_hit::*} contains loop-player
			add loop-player to {_hit::*}
			set {_count.%loop-player%} to {_ln}
			message formatted "<##16c61e>§l捕獲の蔦<##248d5c>に掛かってしまった!" to loop-player

		add {_addrad} to {_rad}
		if mod({_ln}, 10) is 0 or 10:
			wait a tick
	stop if (size of {_hit::*}) is 0
	set {_size} to size of {_hit::*}
	kitMsg({_player}, "<##0be96f>§l%{_size}%<##0be96f>体<##075f33>捕獲!")

	set {_coreloc} to {_loc.trail::0}
	set {_reduceMeter} to {@move-per-second} / 20
	set {_damage} to {@damage-per-second} / 2
	set {_count} to {@effect-meter} * 2
	set {_ln} to 0
	loop {_count} times:
		stop if (size of {_hit::*}) is 0
		kitParticle_BoscageTwine_Core({_coreloc})

		loop {_hit::*}:
			set {_loop-player} to loop-value-2
			set {_pm} to {_count.%{_loop-player}%}
			subtract {_reduceMeter} from {_pm}
			if {_pm} < 0:
				kitParticle_BoscageTwine_Release({_loop-player})
				remove {_loop-player} from {_hit::*}
				continue
			set {_teleportloc} to location 1 meter below {_loc.trail::%{_pm}%}
			set yaw of {_teleportloc} to yaw of {_loop-player}
			set pitch of {_teleportloc} to pitch of {_loop-player}
			teleport {_loop-player} to {_teleportloc}
			kitParticle_BoscageTwine_Catch({_loop-player}, {_loc.trail::*}, {_pm})
			set {_count.%{_loop-player}%} to {_pm}

			if mod({_ln}, 5) is 0 or 5:
				kitDamage({_player}, {_loop-player}, {_damage}, "捕獲の蔦")

		add 0.5 to {_ln}
		wait a tick
	stop if (size of {_hit::*}) is 0
	loop {_hit::*}:
		kitParticle_BoscageTwine_Release({_loop-player})

local function kitEffect_BoscageTwine_RayTrace(loc: location, vec: vector, d: number, p: number = 300) :: vector:
	set {_vec} to (normalized {_vec}) / vector({_p}, {_p}, {_p})
	loop {_d} * {_p} times:
		if block at {_loc} is passable:
			add x of {_vec} to x-pos of {_loc}
			add y of {_vec} to y-pos of {_loc}
			add z of {_vec} to z-pos of {_loc}
		else:
			set {_hit} to block at {_loc}
			exit loop
	return vector(0, 0, 0) if {_hit} is not set

	set {_vec} to {_vec} / vector(10, 10, 10)
	loop 15 times:
		subtract x of {_vec} from x-pos of {_loc}
		subtract y of {_vec} from y-pos of {_loc}
		subtract z of {_vec} from z-pos of {_loc}
		exit loop if (block at {_loc}) is passable
	set {_dx} to x-pos of {_loc} - x-pos of {_hit}
	set {_dy} to y-pos of {_loc} - y-pos of {_hit}
	set {_dz} to z-pos of {_loc} - z-pos of {_hit}
	if abs({_dy}) > 0.5:
		if {_dy} > 0:
			set {_direction} to vector(0, 1, 0)
		else:
			set {_direction} to vector(0, -1, 0)
	else if abs({_dx}) > abs({_dz}):
		if {_dx} > 0:
			set {_direction} to vector(1, 0, 0)
		else:
			set {_direction} to vector(-1, 0, 0)
	else:
		if {_dz} > 0:
			set {_direction} to vector(0, 0, 1)
		else:
			set {_direction} to vector(0, 0, -1)
	return {_direction}



local function kitParticle_BoscageTwine_Twine(loc: location, rad: number):
	add rgb(27, 105, 47) to {_colors::*}
	add rgb(34, 142, 97) to {_colors::*}
	add rgb(15, 124, 31) to {_colors::*}
	set {_color} to a random element out of {_colors::*}
	spawnParticle_Dust({_color}, 3, {_loc})

	set {_basevec} to setVector({_loc}, location 10 meters in front of {_loc})
	set {_rotateloc} to {_loc}
	add -90 to pitch of {_rotateloc}
	set {_rotatevec} to setVector({_rotateloc}, location 10 meters in front of {_rotateloc}, {@catch-radius})

	set {_count} to 30
	set {_addrad} to 360 / {_count}
	loop {_count} times:
		add {_addrad} to {_rad}
		set {_vec} to {_rotatevec}
		rotate {_vec} around {_basevec} by {_rad}
		set {_el} to {_loc} ~ {_vec}
		spawnParticle(egg_crack, {_el})

		chance of 3%:
			set {_el.2} to moveRandomLocation({_el}, 0.5)
			spawnParticle_BlockData(falling_dust, lime wool, {_el.2})
		
		chance of 3%:
			set {_el.2} to moveRandomLocation({_el}, 0.5)
			spawnParticle_BlockData(falling_dust, green wool, {_el.2})
		
		chance of 3%:
			set {_el.2} to moveRandomLocation({_el}, 0.5)
			spawnParticle(falling_spore_blossom, {_el.2})

local function kitParticle_BoscageTwine_Core(loc: location):
	chance of 10%:
		playSound("entity.creaking.step", 1, 2, {_loc})
	
	add rgb(27, 105, 47) to {_colors::*}
	add rgb(34, 142, 97) to {_colors::*}
	add rgb(15, 124, 31) to {_colors::*}
	
	loop 50 times:
		set {_vec} to randomVector(1)
		set {_el} to {_loc} ~ {_vec}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Dust({_color}, 1.5, {_el})
	
	loop 3 times:
		set {_vec} to randomVector(1.5)
		set {_el} to {_loc} ~ {_vec}
		spawnParticle_BlockData(block_crumble, oak leaves, {_el})

local function kitParticle_BoscageTwine_Catch(player: player, loc: locations, maxmeter: number):
	chance of 10%:
		playSound("entity.creaking.freeze", 1, 1, {_player})

	add rgb(103, 233, 89) to {_colors.trail::*}

	set {_baseloc} to location of {_player}
	set {_y} to 0
	set {_addy} to 0.5
	set {_circle} to 10
	set {_addrad} to 360 / {_circle}
	set {_rotatevec} to vector(0.5, 0, 0)
	loop 5 times:
		set {_rad} to 0
		set {_baseel} to location {_y} meters above {_baseloc}
		loop {_circle} times:
			add {_addrad} to {_rad}
			chance of 20%:
				continue
			set {_vec} to {_rotatevec}
			rotate {_vec} around y-axis by {_rad}
			set {_el} to {_baseel} ~ {_vec}
			spawnParticle(composter, {_el})
		add {_addy} to {_y}
	
	set {_ln} to {_maxmeter} * 2
	set {_sub} to 1
	loop ({_maxmeter} * 2) times:
		set {_next} to {_ln} - {_sub}
		stop if {_next} < 1
		set {_loc.from} to {_loc::%{_ln}%}
		set {_loc.to} to {_loc::%{_next}%}

		set {_color} to a random element out of {_colors.trail::*}
		spawnParticle_Trail({_color}, {_loc.to}, 20 ticks, {_loc.from})

		subtract {_sub} from {_ln}

local function kitParticle_BoscageTwine_Release(player: player):
	playSound("entity.creaking.deactivate", 1, 1.4, {_player})

	set {_baseloc} to location 1 meter above {_player}
	loop 30 times:
		set {_vec} to randomVector()
		spawnParticle_Vector(glow_squid_ink, {_vec}, 0.5, {_baseloc})



local function kitSound_BoscageTwine_Launch(loc: location):
	playSound("entity.creaking.spawn", 50, 1.2, {_loc})