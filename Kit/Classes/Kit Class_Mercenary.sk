# Weapons
on damage:
	metadata value "gametype" of attacker is "Kit"
	{Class::%attacker%} is "Mercenary"
	if name of attacker's tool is "§bKnock Rod":
		damage was caused by projectile
		if {TrueTeam::%victim%} is {TrueTeam::%attacker%}:
			cancel event
		else:
			set damage to 0.1
	else if damage was caused by attack:
		set {_tool} to attacker's tool
		set {_item.kit} to kitItemKitChecker({_tool})
		{_item.kit} is "Mercenary"
		set {_item.type} to kitItemTypeChecker({_tool})
		{_item.type} is "Weapon.main"
		set {_item.num} to kitItemNumberChecker({_tool})
		if {_item.num} is 1:
			if {Kit-Blood::%victim%} is set:
				{Class::%victim%} is not "Ghost"
				set {_c} to kitPercentDuel(attacker, victim, 3, true)
				chance of {_c}%:
					if {Kit-Shield::%victim%} is set:
						delete {Kit-Shield::%victim%}
						delete {Kit-ShieldTime::%victim%}
					kitDamage(attacker, victim, 10000, true)
					playSound("entity.cod.death", 1, 0.5, victim)
					set {_el} to location of victim
					add 1 to y-coordinate of {_el}
					loop 50 times:
						set yaw of {_el} to a random number between 0 and 360
						set pitch of {_el} to a random number between -90 and 90
						shoot a snowball from {_el} at speed 1
						set item of shot snowball to a redstone
			else:
				set {_c} to kitPercentDuel(attacker, victim, 10, true)
				chance of {_c}%:
					kitBlood(victim)
		else if {_item.num} is 2:
			if {Kit-Blood::%victim%} is set:
				apply poison 3 to victim for 3 seconds
		else if {_item.num} is 3:
			if {Kit-Blood::%victim%} is set:
				set {_c} to kitPercentDuel(attacker, victim, 10, true)
				chance of {_c}%:
					heal attacker by 1 heart

on sneak toggle:
	{Class::%player%} is "Mercenary"
	player is not sneaking
	set {_tool} to player's tool
	if kitItemAllChecker({_tool}, "Mercenary", "Weapon.main", 4) is true:
		checkCT(player, name of player's tool) is true
		set {_num} to 0
		set {_true} to false
		wait a tick
		while {_true} is false:
			set {_tool} to player's tool
			if kitItemAllChecker({_tool}, "Mercenary", "Weapon.main", 4) is false:
				delete {_true}
			else if player is not sneaking:
				set {_true} to true
			else if {_num} >= 60:
				set {_true} to true
			if {_true} is false;
				add 1 to {_num}
				chargeActionBar(player, {_num}, 60)
				set {_pitch} to 0.5 + 0.025 * {_num}
				playSound("item.armor.equip_chain", 1, {_pitch}, player)
				drawDot count 1, particle "explosion", center player, visibleRange 30
				wait a tick
		if {_true} is true:
			kitWeapon_Mercenary_4(player, {_num})
		else:
			send action bar "§c§lチャージが中断されました" to player
	else if kitItemAllChecker({_tool}, "Mercenary", "Weapon.main", 5) is true:
		if {Stats.%player%::Javelinter} is not set:
			set {Stats.%player%::Javelinter} to 100
		{Stats.%player%::Javelinter} > 0
		set {_true} to true
		wait a tick
		while {_true} is true:
			set {_tool} to player's tool
			if kitItemAllChecker({_tool}, "Mercenary", "Weapon.main", 5) is false:
				set {_true} to false
			else if player is not sneaking:
				set {_true} to false
			else if {Stats.%player%::Javelinter} <= 0:
				set {_true} to false
			if {_true} is true:
				subtract 1 from {Stats.%player%::Javelinter}
				kitWeapon_Mercenary_5(player)
				wait a tick

function kitWeapon_Mercenary_4(player: player, distance: num):
	toolCT({_player}, "Mercenary", 4, "Weapon.main")
	loop {_distance} times:
		set {_pl} to location of {_player}
		set pitch of {_pl} to 0
		set {_ol} to location 10 meters in front of {_pl}
		set {_vector} to setVector({_pl}, {_ol}, 0.7)
		if block 0.1 meters below {_player} is passable:
			set y of {_vector} to y of {_vector} - 0.1
		set velocity of {_player} to {_vector}
		playSound("block.chain.place", 1, 0.5, {_player})
		drawDot count 1, particle "explosionlarge", center {_player}, visibleRange 30
		loop all entities in radius 1 around {_player}:
			kitCheckTeam({_player}, loop-entity, false) is true
			add loop-entity to {_list::*}
			set maximum damage delay of loop-entity to 1 tick
			kitDamage({_player}, loop-entity, 0.3)
			playSound("entity.blaze.hurt", 0.8, 2, loop-entity)
			set {_el} to aroundEffect(loop-entity)
			drawDot count 1, particle "blockcrack", material redstone block, center {_el}, visibleRange 30
			if type of loop-entity is a player:
				set {_c} to kitPercentDuel({_player}, loop-entity, 10, true)
				chance of {_c}%:
					kitBlood(loop-entity)
		wait a tick
	loop {_list::*}:
		set maximum damage delay of loop-value to 20 ticks

function kitWeapon_Mercenary_5(player: player):
	set {_baseloc} to location of {_player}
	block 0.1 meters below {_baseloc} is not passable
	playSound("block.gravel.break", 0.6, 2, {_player})
	loop all blocks in radius 10 around {_baseloc}:
		loop-block is passable
		block below loop-block is not passable
		distance between location of block at {_baseloc} and location of loop-block >= 8.5
		add location of loop-block to {_locs::*}
	loop {_locs::*}:
		set {_l} to loop-value-2
		loop all entities in radius 1 around {_l}:
			{_hit::%id of loop-entity%} is not set
			kitCheckTeam({_player}, loop-entity, false) is true
			set {_hit::%id of loop-entity%} to true
			kitDamage({_player}, loop-entity, 2)
			if type of loop-entity is player:
				set {_c} to kitPercentDuel({_player}, loop-entity, 2, true)
				chance of {_c}%:
					kitBlood(loop-entity)
		set {_el} to loop-value-2
		add 1 to y-coordinate of {_el}
		set {_ln} to 0
		loop 4 times:
			set {_bl} to {_el}
			subtract 1.5 from y-coordinate of {_bl}
			add 1 to {_ln}
			if mod({_ln}, 2) = 0:
				subtract 0.5 from x-coordinate of {_bl}
			else:
				add 0.5 to x-coordinate of {_bl}
			if {_ln} <= 2:
				subtract 0.5 from z-coordinate of {_bl}
			else:
				add 0.5 to z-coordinate of {_bl}
			set {_v} to setVector({_bl}, {_el})
			set yaw of {_bl} to yaw of {_v}
			set pitch of {_bl} to pitch of {_v}
			set {_lm} to 0
			loop 3 times:
				add 0.6 to {_lm}
				set {_ee} to location {_lm} meters in front of {_bl}
				chance of 10%:
					drawDot count 1, particle "endrod", center {_ee}, visibleRange 30

# Skills
function kitSkillMercenary(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_player}'s tool) is true:
		if {_item.num} is 1:
			return false
		else if {_item.num} is 2:
			kitSkill_Mercenary_2({_player})
		else if {_item.num} is 3:
			kitSkill_Mercenary_3({_player})
		else if {_item.num} is 4:
			kitSkill_Mercenary_4({_player})
		else if {_item.num} is 5:
			kitSkill_Mercenary_5({_player})
		else if {_item.num} is 6:
			kitSkill_Mercenary_6({_player})
		else if {_item.num} is 7:
			kitSkill_Mercenary_7({_player})
		else if {_item.num} is 8:
			kitSkill_Mercenary_8({_player})
	return true

on shoot:
	metadata value "gametype" of shooter is "Kit"
	projectile is thrown potion
	set {_tool} to shooter's tool
	set {_item.kit} to kitItemKitChecker({_tool})
	{_item.kit} is "Mercenary"
	set {_item.type} to kitItemTypeChecker({_tool})
	{_item.type} is "Skill"
	set {_item.num} to kitItemNumberChecker({_tool})
	{_item.num} is 1
	set metadata value "kit-harmful" of projectile to "true"

on damage of player:
	damage was caused by potion
	metadata value "kit-harmful" of projectile is "true"
	cancel event
	set {_hp} to victim's health
	set {_addhp} to {_hp} * 0.25 * 0.1
	if {Kit-Blood::%victim%} is set:
		set {_firsthp} to {_hp} * 0.25
	else:
		set {_firsthp} to {_hp} * 0.5
	set victim's health to {_firsthp}
	kitHarmfulEffect(victim)
	loop 10 times:
		wait 2 tick
		if victim is alive:
			add {_addhp} to victim's health

function kitHarmfulEffect(player: player):
	set {_bl} to location of {_player}
	set {_y} to -0.5
	loop 5 times:
		add 0.5 to {_y}
		set {_rad} to 0
		loop 10 times:
			set {_el} to {_bl}
			add 36 to {_rad}
			add 0.5 * sin({_rad}) to x-coordinate of {_el}
			add 0.5 * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 255, 0, 0, center {_el}, visibleRange 30
		wait a tick

function kitSkill_Mercenary_2(player: player):
	toolCT({_player}, "Mercenary", 2)
	playSound("entity.wither.spawn", 1, 1, {_player})
	kitMsg({_player}, "§5弱った敵を殲滅します...")
	set {_bl} to location of {_player}
	loop all entities in radius 10 around {_player}:
		kitCheckTeam({_player}, loop-entity, false) is true
		apply blindness 1 to loop-entity for 1.5 seconds
		set {_true} to false
		if loop-entity's health <= 3:
			if type of loop-entity is a player:
				if {Kit-Blood::%loop-entity%} is set:
					set {_true} to true
			else:
				set {_true} to true
		if {_true} is true:
			if {Class::%loop-entity%} is "Ghost":
				message formatted "§4...?" to loop-entity
			else:
				loop 10 times:
					set {_el} to aroundEffect(loop-entity)
					drawDot count 1, particle "smoke", center {_el}, visibleRange 30
				if {Kit-Shield::%loop-entity%} is set:
					delete {Kit-Shield::%loop-entity%}
					delete {Kit-ShieldTime::%loop-entity%}
				kitDamage({_player}, loop-entity, 10000, true)
				message formatted "§0強制的に殺されてしまった..." to loop-entity
	set {_y} to 0
	loop 5 times:
		set {_rad} to 0
		loop 36 times:
			set {_effectloc} to {_bl}
			add 10 to {_rad}
			add 10 * sin({_rad}) to x-coordinate of {_effectloc}
			add 10 * cos({_rad}) to z-coordinate of {_effectloc}
			add {_y} to y-coordinate of {_effectloc}
			drawDot count 1, particle "mobspell", RGB 100, 0, 50, center {_effectloc}, visibleRange 30
		add 0.25 to {_y}
		wait a tick

function kitSkill_Mercenary_3(player: player):
	if health of {_player} > 1:
		toolCT({_player}, "Mercenary", 3)
		subtract 1 from health of {_player}
		playSound("block.honey_block.break", 1, 0.7, {_player})
		kitMsg({_player}, "§4自身の血をばら撒いた...")
		set {_bl} to location of head of {_player}
		set {_now} to now
		loop 5 times:
			set {_el} to {_bl}
			set {_v} to randomVector({_el})
			drop a redstone named "%{_player}%" at {_bl}
			drawDot count 1, particle "redstone", RGB 255, 0, 0, center {_el}, visibleRange 30, keepFor 1 seconds
			set metadata value "kit-bloodysplash" of dropped item to "%{_player}%"
			set metadata value "kit-bloodytimer" of dropped item to "%{_now}%"
			set velocity of dropped item to {_v}
		wait 10 seconds
		loop all dropped items:
			metadata value "kit-bloodysplash" of loop-dropped item is "%{_player}%"
			metadata value "kit-bloodytimer" of loop-dropped item is "%{_now}%"
			delete loop-dropped item
	else:
		kitMsg({_player}, "§c§l体力が少なすぎます!")

on pick up redstone:
	metadata value "gametype" of player is "Kit"
	metadata value "kit-bloodysplash" of event-dropped item is set
	cancel event
	set {_blood} to metadata value "kit-bloodysplash" of event-dropped item
	if {team::%player%} is not {team::%{_blood}%}:
		delete event-dropped item
		kitBlood(player)
		playSound("block.glass.break", 1, 1.5, player)
		loop 10 times:
			set {_el} to aroundEffect(player)
			drawDot count 1, particle "itemcrack", material redstone, center {_el}, visibleRange 30

function kitSkill_Mercenary_4(player: player):
	toolCT({_player}, "Mercenary", 4)
	kitMsg({_player}, "§5血の雨を降らせます...")
	set {_baseloc} to location of {_player}
	set {_sky} to location 10 meters above {_baseloc}
	set pitch of {_sky} to 0
	set {_meter} to 0
	loop 60 times:
		add 0.2 to {_meter}
		set {_skying} to location {_meter} meters in front of {_sky}
		loop all blocks in radius 5 around {_skying}:
			y-coordinate of loop-block is y-coordinate of location of block at {_skying}
			loop-block is passable
			loop 3 times:
				chance of 10%:
					set {_sel} to location of loop-block
					add a random number between -0.5 and 0.5 to x-coordinate of {_sel}
					add a random number between -0.5 and 0.5 to y-coordinate of {_sel} 
					add a random number between -0.5 and 0.5 to z-coordinate of {_sel}
					drawDot count 1, particle "redstone", RGB 150, 0, 0, center {_sel}, visibleRange 50
			chance of 5%:
				shoot a snowball from loop-block at speed 1 downward
				set item of shot snowball to redstone block
				set shooter of shot snowball to {_player}
				set metadata value "kit-bloodrain" of shot snowball to "%{_player}%"
				drawDot count 1, particle "mobspell", XYZ 255, 0, 0, center shot snowball, visibleRange 32, keepFor 1 seconds
				playSound("entity.generic.splash", 0.5, 0.5, location of loop-block)
		wait a tick

on damage:
	metadata value "gametype" of victim is "Kit"
	damage was caused by projectile
	projectile is a snowball
	metadata value "kit-bloodrain" of projectile is set
	set damage to 1
	if type of victim is a player:
		kitBlood(victim)
	loop 3 times:
		set {_el} to aroundEffect(victim)
		drawDot count 1, particle "mobspell", XYZ 50, 0, 0, center {_el}, visibleRange 32

function kitSkill_Mercenary_5(player: player):
	toolCT({_player}, "Mercenary", 5)
	kitMsg({_player}, "<##483d8b>3方向に鋭い斬撃を放ちます...")
	playSound("item.trident.throw", 1, 0.5, {_player})
	set {_baseloc} to location of head of {_player}
	set pitch of {_baseloc} to 0
	subtract 30 from yaw of {_baseloc}
	loop 3 times:
		set {_m} to 1
		loop 10 times:
			set {_atkloc} to location {_m} meters in front of {_baseloc}
			loop all entities in radius 2 around {_atkloc}:
				kitCheckTeam({_player}, loop-entity, false) is true
				{_hit.%id of loop-entity%} is not set
				set {_hit.%id of loop-entity%} to true
				loop 5 times:
					set {_pl} to aroundEffect(loop-entity)
					drawDot count 1, particle "blockcrack", material redstone block, center {_pl}, visibleRange 30
				if type of loop-entity is a player:
					if {Kit-Blood::%loop-entity%} is set:
						kitDamage({_player}, loop-entity, 5)
					else:
						kitDamage({_player}, loop-entity, 3)
						set {_c} to kitPercentDuel({_player}, loop-entity, 30, true)
						chance of {_c}%:
							kitBlood(loop-entity)
				else:
					kitDamage({_player}, loop-entity, 3)
			drawDot count 1, particle "redstone", RGB 255, 0, 0, center {_atkloc}, visibleRange 30
			set {_lm} to 0
			set {_bm} to 0
			loop 2 times:
				add 0.3 to {_lm}
				add 0.5 to {_bm}
				set {_effbaseloc} to location {_lm} meters to the left of {_atkloc}
				set {_effbaseloc} to location {_bm} meters behind {_effbaseloc}
				set {_fm} to 0
				loop 10 times:
					set {_effloc} to location {_fm} meters in front of {_effbaseloc}
					drawDot count 1, particle "redstone", RGB 200, 0, 0, center {_effloc}, visibleRange 30
					add 0.5 to {_fm}
			set {_rm} to 0
			set {_bm} to 0
			loop 2 times:
				add 0.3 to {_rm}
				add 0.5 to {_bm}
				set {_effbaseloc} to location {_rm} meters to the right of {_atkloc}
				set {_effbaseloc} to location {_bm} meters behind {_effbaseloc}
				set {_fm} to 0
				loop 10 times:
					set {_effloc} to location {_fm} meters in front of {_effbaseloc}
					drawDot count 1, particle "redstone", RGB 200, 0, 0, center {_effloc}, visibleRange 30
					add 0.5 to {_fm}
			add 0.5 to {_m}
		add 30 to yaw of {_baseloc}

function kitSkill_Mercenary_6(player: player):
	toolCT({_player}, "Mercenary", 6)
	kitMsg({_player}, "§4§l血痕魔法陣§cを展開します...")
	playSound("entity.phantom.ambient", 1, 0.8, {_player})
	set {_point} to location of {_player}
# 弧を描く
	set {_n.k} to 0
	loop 30 times:
		set {_effbaseloc} to {_point}
		add 6 * sin({_n.k}) to x-coordinate of {_effbaseloc}
		add 6 * cos({_n.k}) to z-coordinate of {_effbaseloc}
		drawDot count 1, particle "redstone", RGB 100, 1, 37, center {_effbaseloc}, visibleRange 30, keepFor 10 seconds
		add 12 to {_n.k}
# 弦を描く
		if {_l.A} is not set:
			set {_l.A} to {_point}
			set yaw of {_l.A} to 120
			set pitch of {_l.A} to 0
			add 6 * sin(90) to x-coordinate of {_l.A}
			add 6 * cos(90) to z-coordinate of {_l.A}
		if {_l.B} is not set:
			set {_l.B} to {_point}
			set yaw of {_l.B} to 0
			set pitch of {_l.B} to 0
			add 6 * sin(210) to x-coordinate of {_l.B}
			add 6 * cos(210) to z-coordinate of {_l.B}
		if {_l.C} is not set:
			set {_l.C} to {_point}
			set yaw of {_l.C} to 240
			set pitch of {_l.C} to 0
			add 6 * sin(330) to x-coordinate of {_l.C}
			add 6 * cos(330) to z-coordinate of {_l.C}
	loop 12 times:
		add sqrt(3) / 2 to {_n.g}
#	A-B
		set {_loc.g} to location {_n.g} meters in front of {_l.A}
		drawDot count 1, particle "redstone", RGB 100, 1, 37, center {_loc.g}, visibleRange 30, keepFor 10 seconds
#	B-C
		set {_loc.g} to location {_n.g} meters in front of {_l.B}
		drawDot count 1, particle "redstone", RGB 100, 1, 37, center {_loc.g}, visibleRange 30, keepFor 10 seconds
#	C-A
		set {_loc.g} to location {_n.g} meters in front of {_l.C}
		drawDot count 1, particle "redstone", RGB 100, 1, 37, center {_loc.g}, visibleRange 30, keepFor 10 seconds
	loop 200 times:
		delete {_eg::*}
		loop all players in radius 6 around {_point}:
			kitCheckTeam({_player}, loop-player, false) is true
			{Kit-Blood::%loop-player%} is set
			drawDot count 1, particle "mobspell", RGB 100, 1, 37, center loop-player, visibleRange 30
			set {_eg::%loop-player%} to true
			if {_jb::%loop-player%} is not set:
				set {_jb::%loop-player%} to true
				set {Stats.%loop-player%::IschemiaCurse} to true
				playSound("entity.zombie.infect", 1, 0.5, {_player})
		loop all players:
			metadata value "gametype" of loop-entity is "Kit"
			{_eg::%loop-player%} is not set
			{_jb::%loop-player%} is true
			delete {_jb::%loop-player%}
			delete {Stats.%loop-player%::IschemiaCurse}
		wait a tick
	kitMsg({_player}, "§5血痕魔法陣は消滅しました...")
	loop all players:
		{_eg::%loop-player%} is true
		{_jb::%loop-player%} is true
		delete {Stats.%loop-player%::IschemiaCurse}

on damage of player:
	metadata value "gametype" of victim is "Kit"
	{Stats.%victim%::IschemiaCurse} is true
	set damage to damage * 2
	send action bar "§5§l血痕魔法陣が傷を増幅する..." to victim
	playSound("item.axe.strip", 1, 0.9, victim)
	set {_el} to location of victim
	add 1 to y-coordinate of {_el}
	loop 10 times:
		draw 1 endrod particle at {_el} with direction randomVector({_el}) and speed 1, keepFor 1 tick

function kitSkill_Mercenary_7(player: player):
	if {Stats.%{_player}%::SkillLocation} is set:
		toolCT({_player}, "Mercenary", 7)
		set {_loc} to {Stats.%{_player}%::SkillLocation}
		kitMsg({_player}, "§4血の池を生成します...")
		playSound("block.portal.trigger", 1, 2, {_loc})
		loop 30 times:
			set {_dl} to {_loc}
			add a random number between -10 and 10 to x-coordinate of {_dl}
			add a random number between -10 and 10 to z-coordinate of {_dl}
			drop a redstone block at {_dl}
			set metadata value "gametype" of last dropped item to "Kit"
			set metadata value "unpickable" of last dropped item to "true"
			set metadata value "sanguine-bog" of last dropped item to "%{_player}%"
			drawDot count 1, particle "redstone", RGB 100, 1, 37, center last dropped item, visibleRange 50, keepFor 2 seconds
		set {_to} to location 15 meters above {_loc}
		loop 20 times:
			loop all entities:
				metadata value "gametype" of loop-entity is "Kit"
				metadata value "sanguine-bog" of loop-entity is "%{_player}%"
				set {_from} to location of loop-entity
				set {_vector} to setVector({_from}, {_to}, 0.7)
				set velocity of loop-entity to {_vector}
			loop 10 times:
				set {_el} to {_loc}
				add a random number between -1 and 1 to x-coordinate of {_el}
				add a random number between -1 and 1 to y-coordinate of {_el}
				add a random number between -1 and 1 to z-coordinate of {_el}
				drawDot count 1, particle "mobspell", RGB 200, 1, 37, center {_el}, visibleRange 50
			wait a tick
		playSound("block.respawn_anchor.charge", 1, 0.5, {_loc})
		kitEffect_SanguineBog({_loc})
		loop all entities:
			metadata value "gametype" of loop-entity is "Kit"
			metadata value "sanguine-bog" of loop-entity is "%{_player}%"
			push loop-entity north at speed random number from -1 to 1
			push loop-entity east at speed random number from -1 to 1
			push loop-entity downwards at speed random number from 0 to 2
		loop all players in radius 10 around {_loc}:
			kitCheckTeam(loop-player, {_player}, false) is true
			kitBlood(loop-player)
			set {_pel} to location of loop-player
			add 1 to y-coordinate of {_pel}
			set pitch of {_pel} to 0
			loop 6 times:
				add 60 to yaw of {_pel}
				set {_m} to 0
				loop 3 times:
					add 1 to {_m}
					set {_plel} to location {_m} meters in front of {_pel}
					drawDot count 1, particle "redstone", RGB 200, 1, 37, center {_plel}, visibleRange 50
		playSound("block.lava.ambient", 1, 2, {_loc})
		loop 20 times:
			loop all players in radius 10 around {_loc}:
				kitCheckTeam(loop-player, {_player}, false) is true
				{Kit-Blood::%loop-player%} is set
				apply slowness 3 to loop-player for a tick
			loop 3 times:
				set {_m} to a random number between 0 and 10
				set {_rad} to a random number between 0 and 360
				set {_drad} to a random number between 10 and 30
				loop 5 times:
					set {_el} to {_loc}
					add {_m} * sin({_rad}) to x-coordinate of {_el}
					add {_m} * cos({_rad}) to z-coordinate of {_el}
					drawDot count 1, particle "redstone", RGB 200, 1, 37, center {_el}, visibleRange 50
					add {_drad} to {_rad}
			wait a tick
		loop all entities:
			metadata value "gametype" of loop-entity is "Kit"
			metadata value "sanguine-bog" of loop-entity is "%{_player}%"
			delete loop-entity
		set {_pullpow} to 0.1
		set {_pullm} to 10
		set {_rad} to 0
		loop 60 times:
			set {_ln} to loop-number
			set {_soundnum} to 61 - {_ln}
			if mod({_soundnum}, 20) = 0:
				playSound("block.lava.ambient", 1, 2, {_loc})
			loop all players in radius 10 around {_loc}:
				kitCheckTeam(loop-player, {_player}, false) is true
				{Kit-Blood::%loop-player%} is set
				apply slowness 3 to loop-player for a tick
				if mod({_ln}, 10) = 0:
					set {_from} to location of loop-player
					set {_to} to {_loc}
					set {_vector} to setVector({_from}, {_to}, {_pullpow})
					set velocity of loop-player to {_vector}
					playSound("item.lodestone_compass.lock", 0.7, 2, loop-player)
			loop 36 times:
				set {_el} to {_loc}
				add 36 to {_rad}
				add {_pullm} * sin({_rad}) to x-coordinate of {_el}
				add {_pullm} * cos({_rad}) to z-coordinate of {_el}
				drawDot count 1, particle "mobspell", RGB 200, 1, 37, center {_el}, visibleRange 50
			add 10 to {_rad}
			add 0.003 to {_pullpow}
			subtract 1 from {_pullm}
			if {_pullm} < 1:
				set {_pullm} to 10
			wait a tick
	else:
		send action bar "§c§l発動地点が有効ではありません!" to {_player}

function kitEffect_SanguineBog(loc: location):
	set {_y} to 15
	set {_rad} to 0
	set {_len} to 0
	loop 15 times:
		loop 9 times:
			add 10 to {_rad}
			subtract 0.1 from {_y}
			add 0.07 to {_len}
			set {_el} to {_loc}
			add {_len} * sin({_rad}) to x-coordinate of {_el}
			add {_len} * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "mobspell", RGB 200, 1, 37, center {_el}, visibleRange 50, keepFor 3 ticks
		wait a tick

function kitSkill_Mercenary_8(player: player):
	toolCT({_player}, "Mercenary", 8)
	kitMsg({_player}, "§4§l血の刃§5を展開します...")
	set {_baseloc} to location of {_player}
	add 1 to y-coordinate of {_baseloc}
	set pitch of {_baseloc} to 0
	set {_rad} to 0
	loop 60 times:
		set {_loc} to location loop-number / 2 meters in front of {_baseloc}
		playSound("entity.guardian.attack", 0.75, 2, {_loc})
		loop all players in radius 5 around {_loc}:
			kitCheckTeam({_player}, loop-player, false) is true
			if {Kit-Blood::%loop-player%} is set:
				kitDamage({_player}, loop-player, 3)
				apply wither 1 to loop-player for 3 seconds replacing existing effect
			else:
				kitDamage({_player}, loop-player, 1)
				{_ct::%loop-player%} is not set
				set {_ct::%loop-player%} to 10
				set {_c} to kitPercentDuel({_player}, loop-player, 10, true)
				chance of {_c}%:
					kitBlood(loop-player)
			loop 3 times:
				set {_ae} to aroundEffect(loop-player)
				drawDot count 1, particle "redstone", RGB 255, 0, 120, center {_ae}, visibleRange 30
		loop {_ct::*}:
			subtract 1 from {_ct::%loop-index%}
			if {_ct::%loop-index%} <= 0:
				delete {_ct::%loop-index%}
		add 6 to {_rad}
		set {_bl} to {_loc}
		loop 4 times:
			set {_tmprad} to {_rad} + (90 * loop-number-2)
			set {_el} to {_bl}
			set {_mt} to 0
			loop 10 times:
				add 0.1 to {_mt}
				add {_mt} * sin({_tmprad}) to x-coordinate of {_el}
				add {_mt} * cos({_tmprad}) to z-coordinate of {_el}
				drawDot count 1, particle "redstone", RGB 150, 0, 0, center {_el}, visibleRange 30
				set {_sub} to loop-number-3 * loop-number-3 / 5
				subtract {_sub} from {_tmprad}
		wait a tick

function kitTimerMercenary(player: player):
	while {Class::%{_player}%} is "Mercenary":
		set {_tool} to {_player}'s tool
		set {_item.kit} to kitItemKitChecker({_tool})
		set {_item.type} to kitItemTypeChecker({_tool})
		set {_item.num} to kitItemNumberChecker({_tool})
		if kitItemAllChecker({_tool}, "Mercenary", "Weapon.main", 3) is true:
			delete {_exist}
			loop all players in radius 7 around {_player}:
				kitCheckTeam({_player}, loop-player, false) is true
				{Kit-Blood::%loop-player%} is set
				set {_exist} to true
			if {_exist} is true:
				if {_player} does not have speed:
					apply speed 1 to {_player} for a tick
				if {_player}'s tool is not enchanted:
					enchant {_player}'s tool with sharpness 1
			else:
				if {_player}'s tool is enchanted:
					disenchant {_player}'s tool
		loop all players:
			kitCheckTeam({_player}, loop-player, false) is true
			{Kit-Blood::%loop-player%} is set
			set {_bbl} to location of loop-player
			add 1 to y-coordinate of {_bbl}
			set {_rad} to 0
			loop 5 times:
				add 72 to {_rad}
				set {_bel} to {_bbl}
				add 0.5 * sin({_rad}) to x-coordinate of {_bel}
				add 0.5 * cos({_rad}) to z-coordinate of {_bel}
				drawDot count 1, particle redstone, RGB 255, 0, 0, center {_bel}, isClientside {_player}, visibleRange 300
		wait a tick

function kitUltMercenary(player: player):
	drawDot count 5, particle "mobspell", RGB 150, 0, 0, center {_player}, visibleRange 30, keepFor 10 seconds
	message "§c血を噴出させ,それを踏んだ敵を出血させ,❤1ダメージを与えます!" to {_player}
	message "§c攻撃した敵の体力が3以下かつ出血済であれば一撃で倒します!" to {_player}
	set {Stats.%{_player}%::UltMercenary} to true
	loop 30 times:
		shoot a falling redstone block from block above {_player} at speed 1 upwards
		set metadata value "kit-merult" of shot falling redstone block to "%{_player}%"
		push shot falling redstone block north at speed random number from -1 to 1
		push shot falling redstone block east at speed random number from -1 to 1
	loop 200 times:
		loop all falling redstone blocks:
			metadata value "kit-merult" of loop-falling redstone block is "%{_player}%"
			set {_l} to location of block at loop-falling redstone block
			if block at {_l} is air:
				if block below {_l} is not passable:
					delete loop-falling redstone block
					if {_lb::*} does not contain {_l}:
						add {_l} to {_lb::*}
						playSound("entity.slime.jump", 0.5, 2, {_l})
		loop all players:
			kitCheckTeam({_player}, loop-player, false, true) is true
			delete {_bl}
			loop all blocks in radius 1.5 around loop-player:
				{_bl} is not set
				{_lb::*} contains location of loop-block
				set {_bl} to true
				remove location of loop-block from {_lb::*}
				make all players see loop-block as air
			{_bl} is true
			kitDamage({_player}, loop-player, 1, true)
			kitBlood(loop-player)
		loop {_lb::*}:
			make all players see block at loop-value-2 as redstone wire
		wait a tick
	delete {Stats.%{_player}%::UltMercenary}
	loop {_lb::*}:
		make all players see block at loop-value as air

on damage of player:
	metadata value "gametype" of victim is "Kit"
	{Stats.%attacker%::UltMercenary} is true
	{Kit-Blood::%victim%} is set
	health of victim <= 3
	set damage to 10000
	set {_baseloc} to location of victim
	loop 10 times:
		loop 3 times:
			set {_el} to {_baseloc}
			add a random number between -1 and 1 to x-coordinate of {_el}
			add a random number between -1 and 1 to z-coordinate of {_el}
			add a random number between 0 and 2 to y-coordinate of {_el}
			drawDot count 1, particle "explosionhuge", center {_el}, visibleRange 30
		wait a tick