# Holy Bow

function kitEffect_HolyBow_Shoot(player: player, event: object):
	metadata value "gametype" of {_player} is "Kit"
	{Class::%{_player}%} is "Archer"
	{_player} is sneaking

	set {_pow} to getBowDrawTime({_player})
	{_pow} >= 24
	set {_arrow} to amount of arrow in {_player}'s inventory
	{_arrow} >= 3

	loop 2 times:
		remove an arrow from {_player}
	set {_projectile} to {_event}.getEntity()
	set glowing of {_projectile} to true
	set metadata value "arrowdamage" of shot arrow to 3
	set metadata value "holy bow" of {_projectile} to true
	# --- 音の演出 ---
	playSound("block.amethyst_cluster.break", 1, 0.5, {_player})
	# --------------
	# --- パーティクルの演出 ---
	kitParticle_HolyBow_Arrow({_projectile})
	# -----------------------
	set {_enable} to true
	loop 200 times:
		if metadata value "holy bow" of {_projectile} is not true:
			set {_enable} to false
		if {_enable} is not true:
			stop

		set {_loc} to location of {_projectile}
		loop all entities in radius 3 around {_loc}:
			kitCheckTeam(loop-entity, {_player}, false, true) is true
			{_hit.%uuid of loop-entity%} is not set
			set {_hit.%uuid of loop-entity%} to true
			kitDamage({_player}, loop-entity, 2, "神聖の矢撃", true)
			kitPalsy(loop-entity, 60)
			kitParticle_HolyBow_Hit({_player}, loop-entity)
			playSound("block.amethyst_block.resonate", 1, 1.5, {_player}, true)
		wait a tick

local function kitParticle_HolyBow_Arrow(proj: projectile):
	set {_enable} to true
	wait a tick
	while {_enable} is true:
		if metadata value "holy bow" of {_proj} is false:
			delete {_enable}
			continue
		
		set {_loc} to location of {_proj}
		if {_proloc} is set:
			if {_proloc} is {_loc}:
				delete {_enable}
				continue
			
			set {_fromloc} to setDirToVec(location 0.5 meters above {_proloc}, setVector({_proloc}, {_loc}))
			set {_distance} to distance between {_proloc} and {_loc}
			set {_loopnum} to ceil({_distance} * 1)
			set {_m} to 0
			loop {_loopnum} times:
				add 1 to {_m}
				set {_baseel} to location {_m} meters in front of {_fromloc}
				kitParticle_HolyBow_Circle({_baseel})
				loop a random integer between 0 and 3 times:
					set {_el} to {_baseel}
					add a random number between -3 and 3 to x-pos of {_el}
					add a random number between -3 and 3 to y-pos of {_el}
					add a random number between -3 and 3 to z-pos of {_el}
					spawnParticle(wax_off, {_el})

		set {_proloc} to location of {_proj}
		wait a tick

local function kitParticle_HolyBow_Circle(loc: location):
	set {_radius} to 0
	loop 3 times:
		add 1 to {_radius}
		spawnParticle_DustTransition(colorRandomizer(255, 247, 173, 0, 0, 20), rgb(255, 255, 255), 0.75, particleLocation_CircleV({_loc}, 30, {_radius}))
		wait a tick

local function kitParticle_HolyBow_Hit(player: player, entity: entity):
	playSound("entity.allay.item_thrown", 1, 1.35, {_entity})
	set {_baseloc} to location 1 meter above {_entity}
	set yaw of {_baseloc} to yaw of {_player}
	set pitch of {_baseloc} to pitch of {_player}
	set {_radius} to 0
	loop 4 times:
		add 0.5 to {_radius}
		spawnParticle_DustTransition(colorRandomizer(255, 243, 103, 0, 0, 50), rgb(255, 243, 203), 1, particleLocation_CircleV({_baseloc}, 60, {_radius}))
		wait a tick

on projectile hit:
	metadata value "holy bow" of projectile is true
	set metadata value "holy bow" of projectile to false
	set {_baseloc} to location of projectile
	strike lightning effect at projectile
	# --- 着弾点がはじけ飛ぶ演出 ---
	loop 30 times:
		set {_v} to randomVector(5)
		add 5 to y of {_v}
		spawnParticle_Vector(wax_on, {_v}, 10, {_baseloc})
	# --------------------------

on damage:
	damage was caused by projectile
	metadata value "holy bow" of projectile is set
	kitPalsy(victim, 100)
	applyEffect(victim, glowing, 1, 100)