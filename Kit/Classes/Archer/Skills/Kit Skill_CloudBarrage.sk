# Cloud Barrage

options:
	shoot-radius: 45
	shoot-power: 2
	arrow-metadata: "cloud barrage"
	arrow-damage: 3
	cloud-radius: 5
	cloud-tick: 200



on projectile hit:
	metadata value {@arrow-metadata} of projectile is set
	delete metadata value {@arrow-metadata} of projectile
	set {_loc} to location of projectile
	kitEffect_CloudBarrage_Hit(shooter, {_loc})



function kitEffect_CloudBarrage(player: player):
	nameCT({_player}, "Cloud Barrage")
	kitMsg({_player}, "<##ccf5f5>雲を発生させる矢<##deeeee>を発射します...")
	set {_baseloc} to location of head of {_player}
	kitParticle_CloudBarrage_Launch({_baseloc})
	set {_toloc} to {_baseloc}
	add -90 to pitch of {_toloc}
	set {_toloc} to location 1 meter in front of {_toloc}
	set {_basevec} to setVector({_baseloc}, {_toloc})

	set {_rad} to {@shoot-radius} * -1
	set {_addrad} to {@shoot-radius}
	set {_loopnum} to 3
	loop {_loopnum} times:
		set {_rotatevec} to setVector({_baseloc}, (location 1 meter in front of {_baseloc}), {@shoot-power})
		rotate {_rotatevec} around {_basevec} by {_rad}

		shoot an arrow from {_baseloc} at speed 1
		set {_shot} to shot arrow
		setShooter({_shot}, {_player})
		set velocity of {_shot} to {_rotatevec}
		set metadata value {@arrow-metadata} of {_shot} to true
		set metadata value "arrowdamage" of {_shot} to {@arrow-damage}
		kitParticle_CloudBarrage_Arrow({_shot})
		add {_addrad} to {_rad}

local function kitEffect_CloudBarrage_Hit(player: player, loc: location):
	kitEffect_CloudBarrage_Display({_player}, {_loc})
	kitParticle_CloudBarrage_Hit({_loc})
	loop {@cloud-tick} times:
		loop all entities in radius {@cloud-radius} around {_loc}:
			kitCheckTeam(loop-entity, {_player}, false) is true
			applyEffect(loop-entity, slowness, 1, 5 ticks, true)
			kitEffectDescription(loop-entity, "§8鈍足")
			kitParticle_CloudBarrage_Slow(loop-entity)

		kitParticle_CloudBarrage_Cloud({_loc})
		wait a tick
	kitSound_CloudBarrage_End({_loc})

local function kitEffect_CloudBarrage_Display(player: player, loc: location):
	set {_y} to a random number between 0 and 360
	set yaw of {_loc} to {_y}
	set pitch of {_loc} to 0
	set {_block} to getBlockData(snow block)

	set {_sc} to -1
	set {_addsc} to 2
	loop 2 times:
		spawn a block display at {_loc}
		set {_blockdisplay} to spawned block display
		set metadata value "gametype" of {_blockdisplay} to "Kit"
		set metadata value "Cloud Barrage - Cloud" of {_blockdisplay} to {_player}

		setBrightness({_blockdisplay})
		{_blockdisplay}.setTeleportDuration(1)
		{_blockdisplay}.setInterpolationDuration(1)
		{_blockdisplay}.setViewRange(1000)
		setDisplayBlock({_blockdisplay}, {_block})
		set {_rotation} to getQuaternionf(0, 0, 0, 1)
		set {_scalecoord} to ({@cloud-radius}) * {_sc}
		add {_addsc} to {_sc}
		set {_transcoord} to {_scalecoord} * (-0.5)
		set {_translation} to getVector3f({_transcoord}, {_transcoord}, {_transcoord})
		set {_scale} to getVector3f({_scalecoord}, {_scalecoord}, {_scalecoord})
		set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
		{_blockdisplay}.setTransformation({_transformation})
		add {_blockdisplay} to {_blockdisplays::*}


	set {_yaw} to 0
	set {_addyaw} to 3
	loop {@cloud-tick} times:
		add {_addyaw} to {_yaw}
		set {_tploc} to location of {_loc}
		add {_yaw} to yaw of {_tploc}
		teleport {_blockdisplays::*} to {_tploc}
		wait a tick

	loop {_blockdisplays::*}:
		loop-value.remove()


local function kitParticle_CloudBarrage_Launch(loc: location):
	playSound("entity.breeze.deflect", 1, 1.1, {_loc})
	set {_basevec} to setVector({_loc}, location 1 meter in front of {_loc})

	set {_count} to 50
	set {_rad} to 0
	set {_addrad} to 360 / {_count}
	loop {_count} times:
		set {_rotatevec} to setVector({_loc}, (location 1 meter to the right of {_loc}), 1)
		rotate {_rotatevec} around {_basevec} by {_rad}
		spawnParticle_Vector(cloud, {_rotatevec}, 0.25, {_loc})
		add {_addrad} to {_rad}


local function kitParticle_CloudBarrage_Arrow(proj: projectile):
	startTrackProjectile({_proj})

	add rgb(189, 208, 209) to {_colors::*}
	add rgb(130, 150, 161) to {_colors::*}
	add rgb(177, 210, 214) to {_colors::*}

	loop 200 times:
		delete {_metadata}
		set {_metadata} to metadata value {@arrow-metadata} of {_proj}
		if {_metadata} is not set:
			stop
		
		wait a tick
		set {_loc} to location of {_proj}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Dust({_color}, 2.5, {_loc})
		set {_proloc} to getProjectilePreviousLocation({_proj})
		if {_proloc} is not set:
			continue
		
		set {_distance} to distance between {_loc} and {_proloc}
		set {_FM} to 0.5
		set {_loopnum} to round({_distance} / {_FM})
		set {_frontMeter} to 0
		loop {_loopnum} times:
			add {_FM} to {_frontMeter}
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Dust({_color}, 2.5, {_el})

local function kitParticle_CloudBarrage_Hit(loc: location):
	playSound("entity.generic.explode", 1, 1.8, {_loc})
	
	loop 100 times:
		spawnParticle_Vector(cloud, randomVector(1), 0.35, {_loc})

local function kitParticle_CloudBarrage_Cloud(loc: location):
	chance of 10%:
		playSound("entity.breeze.slide", 1, 1.4, {_loc})

	add rgb(189, 208, 209) to {_colors::*}
	add rgb(130, 150, 161) to {_colors::*}
	add rgb(177, 210, 214) to {_colors::*}

	set {_aftercolor} to rgb(63, 71, 73)

	set {_mid} to {@cloud-radius} * 0.3
	loop 5 times:
		set {_pow} to a random number between 0 and {_mid}
		set {_vector} to randomVector({_pow})
		set {_el} to {_loc} ~ {_vector}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_DustTransition({_color}, {_aftercolor}, 2, {_el})
	
	loop 10 times:
		set {_pow} to a random number between {_mid} and {@cloud-radius}
		set {_vector} to randomVector({_pow})
		set {_el} to {_loc} ~ {_vector}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_DustTransition({_color}, {_aftercolor}, 3, {_el})

local function kitParticle_CloudBarrage_Slow(entity: entity):
	set {_baseloc} to location 1 meter above {_entity}

	loop 5 times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		set {_dice} to dice(3)
		spawnParticle_BlockData(falling_dust, light gray concrete, {_el}) if {_dice} is 1
		spawnParticle_BlockData(falling_dust, gray concrete, {_el}) if {_dice} is 2
		spawnParticle_BlockData(falling_dust, cyan terracotta, {_el}) if {_dice} is 3



local function kitSound_CloudBarrage_End(loc: location):
	playSound("block.fire.extinguish", 1, 1.45, {_loc})