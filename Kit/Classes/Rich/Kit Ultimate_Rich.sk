# Nouveau Riche

options:
	drop-min: 1
	drop-max: 5

	drop-radius: 10

	drop-interval: 20
	drop-time: 10

	heal-amount: 2
	absorption-tick: 100

	stats-player: "Nouveau Riche"
	metadata-gold: "Nouveau Riche - Gold Block"

function kitUltRich(player: player):
	setKitStats({_player}, {@stats-player}, true)
	loop {@drop-time} times:
		stop if getKitStats({_player}, {@stats-player}) is not set
		dropGolds({_player})

		loop {@drop-interval} times:
			wait a tick
	deleteKitStats({_player}, {@stats-player})

local function dropGolds(player: player):
	set {_count} to a random integer between {@drop-min} and {@drop-max}
	loop {_count} times:
		set {_baseloc} to location of {_player}
		set {_droploc} to dropLocation({_baseloc})

		drop gold block named "%{_player}%" at {_droploc}
		set {_lastdrop} to last dropped item
		set metadata value "gametype" of {_lastdrop} to "Kit"
		set metadata value "delete" of {_lastdrop} to "%{_player}%"
		set metadata value "undelete" of {_lastdrop} to true
		set metadata value {@metadata-gold} of {_lastdrop} to {_player}
		set metadata value "Jewelry" of {_lastdrop} to {_player}
		particleDrop({_droploc})
		soundDrop({_player})

local function dropLocation(loc: location) :: location:
	set {_ok} to false
	set {_loopnum} to 0
	while {_ok} is false:
		add 1 to {_loopnum}
		if {_loopnum} > 30:
			set {_returnloc} to {_loc}
			set {_ok} to true
			continue
		
		set {_pow} to a random number between 0 and {@drop-radius}
		set {_vec} to randomVector({_pow})
		set {_returnloc} to {_loc} ~ {_vec}
		if block at {_returnloc} is passable:
			set {_ok} to true
			continue
	return {_returnloc}

on pick up:
	stop if {Class::%player%} is "Thief"

	set {_dropper} to metadata value {@metadata-gold} of event-dropped item
	stop if kitCheckTeam({_dropper}, player, true, true) is false

	set {_goldloc} to location of event-dropped item
	delete event-dropped item
	heal(player)

local function heal(player: player):
	kitHeal({_player}, {@heal-amount}, 1)
	applyEffect({_player}, absorption, 1, {@absorption-tick}, true)
	kitEffectDescription({_player}, "§d❤{@heal-amount} §7& §e❤2")
	particleHeal({_player})
	soundHeal({_player})



local function particleDrop(loc: location):
	set {_amount.wax} to a random integer between 3 and 5
	set {_amount.block} to a random integer between 3 and 8

	add rgb(228, 186, 37) to {_colors::*}
	add rgb(241, 204, 80) to {_colors::*}
	add rgb(241, 231, 32) to {_colors::*}

	set {_color} to a random element out of {_colors::*}
	set {_size} to a random number between 2.5 and 3
	spawnParticle_Dust({_color}, {_size}, {_loc})

	loop {_amount.wax} times:
		set {_v} to randomVector()
		spawnParticle_Vector(wax_on, {_v}, 3, {_loc})
	
	loop {_amount.block} times:
		set {_el} to moveRandomLocation({_loc}, 1.5)
		spawnParticle_Block(gold block, {_el})

local function particleHeal(player: player):
	set {_amount.totem} to a random integer between 10 and 20
	set {_amount.rod} to a random integer between 10 and 20

	set {_baseloc} to location 1 meter above {_player}

	loop {_amount.totem} times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		spawnParticle(totem_of_undying, {_el})
	
	loop {_amount.rod} times:
		set {_v} to randomVector()
		spawnParticle_Vector(end_rod, {_v}, 0.4, {_baseloc})

local function soundDrop(player: player):
	playSound("block.bell.use", 2, 1.6, {_player})

local function soundHeal(player: player):
	playSound("block.amethyst_block.resonate", 1, 0.75, {_player})