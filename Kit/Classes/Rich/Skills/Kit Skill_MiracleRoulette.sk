# skill-name: Miracle Roulette

options:
	gold-radius: 10
	gold-required: 10

	roulette-tick: 40
	roulette-first-tick: 20
	roulette-second-tick: 10
	roulette-remain-tick: 60

	two-hit-drop: 20

	three-hit-drop: 30
	three-hit-tick: 200

	seven-hit-drop: 50
	seven-hit-tick: 400

	stats-roulette: "Roulette Numbers"
	metadata-display: "Miracle Roulette - Number"
	metadata-roulette: "Miracle Roulette - Roulette"

function kitEffect_MiracleRoulette(player: player):
	loop all entities in radius {@gold-radius} around {_player}:
		metadata value "Rich Gold" of loop-entity is {_player}
		add loop-entity to {_dropGolds::*}
	
	if (size of {_dropGolds::*}) < {@gold-required}:
		kitMsg({_player}, "§c§l周囲の金が足りません!")
		stop

	nameCT({_player}, "Miracle Roulette")
	kitMsg({_player}, "<##ff8801>運命のルーレット...")

	loop {@gold-required} times:
		set {_deleteGold} to a random element out of {_dropGolds::*}
		add {_deleteGold} to {_deleteGolds::*}
		{_deleteGold}.remove()
	particleGoldDelete({_deleteGolds::*})
	soundRoulette({_player})

	setRouletteNumbers({_player})
	spawnRoulette({_player})

	setKitStats({_player}, {@stats-roulette}, true)
	setKitStats({_player}, "Invincible", true)

	loop {@roulette-tick} times:
		if getKitStats({_player}, {@stats-roulette}) is not true:
			deleteKitStats({_player}, "Invincible")
			stop
		wait a tick
	deleteKitStats({_player}, {@stats-roulette})
	deleteKitStats({_player}, "Invincible")
	effectRoulette({_player})

local function setRouletteNumbers(player: player):
	set {_ln} to 0
	loop 3 times:
		add 1 to {_ln}
		set {_num} to a random integer between 0 and 9
		set {_statsName} to {@stats-roulette} + "-%{_ln}%"
		setKitStats({_player}, {_statsName}, {_num})

# TitleはDisplayと同じメソッドで処理
local function spawnRoulette(player: player):
	# send title
	set {_titletick} to "{@roulette-first-tick} ticks" parsed as time span
	sendTitle({_player}, "§e§l§k0 §f- §e§l§k0 §f- §e§l§k0", "", {_titletick}, 0 tick, 0 tick)

	set {_baseloc} to location of {_player}

	set pitch of {_baseloc} to 0

	set {_leftNum} to 4
	set {_ln} to 0
	loop 3 times:
		add 1 to {_ln}
		add -2 to {_leftNum}

		set {_spawnLoc} to location {_leftNum} meters to the right of {_baseloc}
		add 2.5 to y-pos of {_spawnLoc}
		set {_display} to spawnDisplay({_player}, {_spawnLoc}, {_ln})
		set {_displays::%{_ln}%} to {_display}

	loop {@roulette-first-tick} times:
		set {_baseloc} to location of {_player}
		set pitch of {_baseloc} to 0
		set {_leftNum} to 4
		set {_ln.tp} to 0
		loop 3 times:
			add 1 to {_ln.tp}
			add -2 to {_leftNum}

			set {_tploc} to location {_leftNum} meters to the right of {_baseloc}
			add 2.5 to y-pos of {_tploc}

			set {_display} to {_displays::%{_ln.tp}%}
			teleport {_display} to {_tploc}
		wait a tick
	
	set {_ln} to 1
	set {_displayEntity} to {_displays::%{_ln}%}
	set {_statsName} to {@stats-roulette} + "-%{_ln}%"
	set {_slotNumber} to getKitStats({_player}, {_statsName})
	set {_displayText} to "§6§l%{_slotNumber}%"
	{_displayEntity}.setText({_displayText})

	# send title
	set {_titleNumber.%{_ln}%} to {_slotNumber}
	set {_titletick} to "{@roulette-second-tick} ticks" parsed as time span
	sendTitle({_player}, "§6§l%{_titleNumber.1}% §f- §e§l§k0 §f- §e§l§k0", "", {_titletick}, 0 tick, 0 tick)

	loop 2 times:
		add 1 to {_ln}
		loop {@roulette-second-tick} times:
			set {_baseloc} to location of {_player}
			set pitch of {_baseloc} to 0
			set {_leftNum} to 4
			set {_ln.tp} to 0
			loop 3 times:
				add 1 to {_ln.tp}
				add -2 to {_leftNum}

				set {_tploc} to location {_leftNum} meters to the right of {_baseloc}
				add 2.5 to y-pos of {_tploc}

				set {_display} to {_displays::%{_ln.tp}%}
				teleport {_display} to {_tploc}
			wait a tick
		
		set {_displayEntity} to {_displays::%{_ln}%}
		set {_statsName} to {@stats-roulette} + "-%{_ln}%"
		set {_slotNumber} to getKitStats({_player}, {_statsName})
		set {_displayText} to "§6§l%{_slotNumber}%"
		{_displayEntity}.setText({_displayText})

		# send title
		set {_titleNumber.%{_ln}%} to {_slotNumber}
		if {_titleNumber.3} is not set:
			sendTitle({_player}, "§6§l%{_titleNumber.1}% §f- §6§l%{_titleNumber.2}% §f- §e§l§k0", "", {_titletick}, 0 tick, 0 tick)
		else:
			sendTitle({_player}, "§4§l%{_titleNumber.1}% §f- §4§l%{_titleNumber.2}% §f- §4§l%{_titleNumber.3}%", "", 60 ticks, 0 tick, 0 tick)
	# Displayのヒット演出はeffectRoulette側で制御

import:
	org.bukkit.Color
	org.bukkit.entity.EntityType
	org.bukkit.entity.Display$Billboard

local function spawnDisplay(player: player, loc: location, num: number) :: entity:
	set {_world} to world of {_loc}
	set {_mobtype} to EntityType.valueOf("TEXT_DISPLAY")
	set {_textDisplay} to {_world}.spawnEntity({_loc}, {_mobtype})
	set metadata value {@metadata-display} of {_textDisplay} to {_num}
	set {_statsName} to {@stats-roulette} + "-%{_num}%"
	set {_rouletteNumber} to getKitStats({_player}, {_statsName})
	set metadata value {@metadata-roulette} of {_textDisplay} to {_rouletteNumber}

	setBrightness({_textDisplay})
	{_textDisplay}.setBillboard(Billboard.CENTER)
	{_textDisplay}.setTeleportDuration(1)
	{_textDisplay}.setViewRange(100)
	{_textDisplay}.setDefaultBackground(false)
	set {_background} to new Color(255, 255, 255, 255)
	{_textDisplay}.setBackgroundColor({_background})
	set {_axisAngle4f} to getQuaternionf(0, 0, 0, 1)
	set {_scale} to getVector3f(3, 3, 1)
	set {_translation} to getVector3f(0, 0, 0)
	setTransformation({_textDisplay}, {_axisAngle4f}, {_axisAngle4f}, {_translation}, {_scale})

	set {_display} to "§e§l§k0"
	{_textDisplay}.setText({_display})

	return {_textDisplay}

local function effectRoulette(player: player):
	set {_ln} to 0
	loop 3 times:
		add 1 to {_ln}
		set {_statsName} to {@stats-roulette} + "-%{_ln}%"
		set {_num.%{_ln}%} to getKitStats({_player}, {_statsName})
		deleteKitStats({_player}, {_statsName})

	if:
		{_num.1} is 7
		{_num.2} is 7
		{_num.3} is 7
	then:
		rouletteSeven({_player})
		stop
	
	if:
		{_num.1} = {_num.2}
		{_num.2} = {_num.3}
	then:
		rouletteThree({_player})
		stop
	
	if any:
		{_num.1} = {_num.2}
		{_num.2} = {_num.3}
		{_num.3} = {_num.1}
	then:
		rouletteTwo({_player})
		stop
	
	rouletteZero({_player})

local function rouletteSeven(player: player):
	soundSeven({_player})
	particleSeven({_player})
	kitMsg({_player}, "<##ff0000>§lオ<##ff8800>§lー<##fffb00>§lル<##2bff00>§lセ<##00fffb>§lブ<##2600ff>§lン<##e600ff>§l!")

	applyEffect({_player}, regeneration, 3, {@seven-hit-tick})
	applyEffect({_player}, resistance, 3, {@seven-hit-tick})

	loop {@seven-hit-drop} times:
		set {_loc} to dropLocation({_player})
		kitDropGolds_Rich({_player}, {_loc})
		particleDrop({_loc})
	
	displaySeven({_player})

local function displaySeven(player: player):
	set {_backgrounds::0} to new Color(255, 255, 0, 0)
	set {_backgrounds::1} to new Color(255, 255, 136, 0)
	set {_backgrounds::2} to new Color(255, 255, 255, 0)
	set {_backgrounds::3} to new Color(255, 43, 255, 0)
	set {_backgrounds::4} to new Color(255, 0, 255, 251)
	set {_backgrounds::5} to new Color(255, 38, 0, 255)
	set {_backgrounds::6} to new Color(255, 230, 0, 255)

	loop all text displays:
		set {_textDisplay} to loop-text display
		metadata value {@metadata-display} of {_textDisplay} is set
		{_textDisplay}.setText("§f§l7")
		add {_textDisplay} to {_displays::*}
	
	set {_loopnum} to 7 * 3
	set {_waittick} to 3 ticks

	set {_ln} to 0
	loop {_loopnum} times:
		set {_baseloc} to location of {_player}
		set pitch of {_baseloc} to 0
		set {_leftNum} to 4
		loop {_displays::*}:
			set {_displayEntity} to loop-value-2
			set {_background} to {_backgrounds::%{_ln}%}
			{_displayEntity}.setBackgroundColor({_background})

			add -2 to {_leftNum}

			set {_tploc} to location {_leftNum} meters to the right of {_baseloc}
			add 2.5 to y-pos of {_tploc}

			teleport {_displayEntity} to {_tploc}

		add 1 to {_ln}
		set {_ln} to 0 if {_ln} > 6
		wait {_waittick}
	
	loop {_displays::*}:
		set {_displayEntity} to loop-value
		{_displayEntity}.remove()


local function rouletteThree(player: player):
	soundThree({_player})
	particleThree({_player})
	kitMsg({_player}, "<##ff0000>§l大当たり!")

	applyEffect({_player}, regeneration, 3, {@three-hit-tick})

	loop {@three-hit-drop} times:
		set {_loc} to dropLocation({_player})
		kitDropGolds_Rich({_player}, {_loc})
		particleDrop({_loc})
	
	displayThree({_player})

local function displayThree(player: player):
	loop all text displays:
		metadata value {@metadata-display} of loop-text display is set
		add loop-text display to {_displays::*}

	loop {_displays::*}:
		set {_displayEntity} to loop-value
		set {_background} to new Color(255, 255, 0, 0)
		{_displayEntity}.setBackgroundColor({_background})

	loop {@roulette-remain-tick} times:
		set {_baseloc} to location of {_player}
		set pitch of {_baseloc} to 0
		set {_leftNum} to 4
		loop {_displays::*}:
			set {_displayEntity} to loop-value-2

			add -2 to {_leftNum}

			set {_tploc} to location {_leftNum} meters to the right of {_baseloc}
			add 2.5 to y-pos of {_tploc}

			teleport {_displayEntity} to {_tploc}
		wait a tick
	
	loop {_displays::*}:
		set {_displayEntity} to loop-value
		{_displayEntity}.remove()

local function rouletteTwo(player: player):
	soundTwo({_player})
	particleTwo({_player})
	kitMsg({_player}, "<##ffd500>§l当たり!")

	loop {@two-hit-drop} times:
		set {_loc} to dropLocation({_player})
		kitDropGolds_Rich({_player}, {_loc})
		particleDrop({_loc})
	displayTwo({_player})

local function displayTwo(player: player):
	loop all text displays:
		metadata value {@metadata-display} of loop-text display is set
		add loop-text display to {_displays::*}

	loop {_displays::*}:
		set {_displayEntity} to loop-value
		set {_background} to new Color(255, 255, 213, 0)
		{_displayEntity}.setBackgroundColor({_background})

	loop {@roulette-remain-tick} times:
		set {_baseloc} to location of {_player}
		set pitch of {_baseloc} to 0
		set {_leftNum} to 4
		loop {_displays::*}:
			set {_displayEntity} to loop-value-2

			add -2 to {_leftNum}

			set {_tploc} to location {_leftNum} meters to the right of {_baseloc}
			add 2.5 to y-pos of {_tploc}

			teleport {_displayEntity} to {_tploc}
		wait a tick
	
	loop {_displays::*}:
		set {_displayEntity} to loop-value
		{_displayEntity}.remove()

local function rouletteZero(player: player):
	soundZero({_player})
	particleZero({_player})
	kitMsg({_player}, "<##8c098a>§oハズレ...")
	displayZero({_player})

local function displayZero(player: player):
	loop all text displays:
		set {_textDisplay} to loop-text display
		metadata value {@metadata-display} of {_textDisplay} is set
		set {_rouletteNumber} to metadata value {@metadata-roulette} of {_textDisplay}
		{_textDisplay}.setText("§0§l%{_rouletteNumber}%")
		add {_textDisplay} to {_displays::*}

	loop {_displays::*}:
		set {_displayEntity} to loop-value
		set {_background} to new Color(255, 140, 9, 138)
		{_displayEntity}.setBackgroundColor({_background})

	loop {@roulette-remain-tick} times:
		set {_baseloc} to location of {_player}
		set pitch of {_baseloc} to 0
		set {_leftNum} to 4
		loop {_displays::*}:
			set {_displayEntity} to loop-value-2

			add -2 to {_leftNum}

			set {_tploc} to location {_leftNum} meters to the right of {_baseloc}
			add 2.5 to y-pos of {_tploc}

			teleport {_displayEntity} to {_tploc}
		wait a tick
	
	loop {_displays::*}:
		set {_displayEntity} to loop-value
		{_displayEntity}.remove()

local function dropLocation(player: player) :: location:
	set {_ok} to false
	set {_checkNum} to 0
	set {_remainLoc} to location of {_player}
	while {_ok} is false:
		add 1 to {_checkNum}
		if {_checkNum} > 30:
			set {_dropLoc} to {_remainLoc}
			set {_ok} to true
			continue
		
		set {_pow} to a random number between 0 and {@gold-radius}
		set {_vec} to randomVector({_pow})
		set y of {_vec} to (y of {_vec}) * -1 if (y of {_vec}) < 0
		set {_dropLoc} to {_remainLoc} ~ {_vec}
		if block at {_dropLoc} is passable:
			set {_ok} to true
			continue
	
	return {_dropLoc}



local function particleGoldDelete(entities: entities):
	loop {_entities::*}:
		set {_drop} to loop-value
		set {_el} to location 0.5 meters above {_drop}

		set {_amount} to a random integer between 3 and 5
		loop {_amount} times:
			set {_v} to randomVector(0.5)
			spawnParticle_Vector(smoke, {_v}, 0.5, {_el})

local function particleDrop(loc: location):
	set {_amount} to a random integer between 1 and 3
	set {_baseloc} to location 0.25 meters above {_loc}

	loop {_amount} times:
		set {_v} to randomVector(3)
		spawnParticle_Vector(wax_on, {_v}, 3, {_baseloc})

local function particleSeven(player: player):
	set {_baseloc.endrod} to location 1 meter above {_player}
	set {_count.endrod} to a random integer between 30 and 50
	loop {_count.endrod} times:
		set {_v} to randomVector()
		spawnParticle_Vector(end_rod, {_v}, 1, {_baseloc.endrod})

	set {_colors::1} to rgb(255, 0, 0)
	set {_colors::2} to rgb(255, 136, 0)
	set {_colors::3} to rgb(255, 255, 0)
	set {_colors::4} to rgb(43, 255, 0)
	set {_colors::5} to rgb(0, 255, 251)
	set {_colors::6} to rgb(38, 0, 255)
	set {_colors::7} to rgb(230, 0, 255)

	set {_colors.fade::1} to rgb(254, 128, 128)
	set {_colors.fade::2} to rgb(252, 176, 88)
	set {_colors.fade::3} to rgb(255, 255, 130)
	set {_colors.fade::4} to rgb(160, 251, 142)
	set {_colors.fade::5} to rgb(160, 255, 253)
	set {_colors.fade::6} to rgb(154, 142, 222)
	set {_colors.fade::7} to rgb(230, 154, 239)

	add "ball" to {_typeList::*}
	add "ball_large" to {_typeList::*}
	add "star" to {_typeList::*}
	add "creeper" to {_typeList::*}
	add "burst" to {_typeList::*}

	add true to {_boolean::*}
	add false to {_boolean::*}

	set {_counttick} to {@seven-hit-tick}
	set {_nowtick} to 0

	set {_count.firework} to 11
	set {_tick.firework} to 10
	set {_nowcount.firework} to 0
	set {_launching.firework} to true

	set {_count.dust} to 8
	set {_rad.dust} to 0
	set {_addrad.dust} to 360 / {_count.dust}
	set {_plusrad.dust} to 20
	set {_basevec.dust} to vector(0.5, 0, 0)

	set {_y.dust} to 0
	set {_addy.dust} to 0.2
	set {_maxy.dust} to 2

	loop {_counttick} times:
		set {_baseloc.firework} to location 1 meter above {_player}
		set {_baseloc.dust} to location of {_player}
		if {_launching.firework}:
			if mod({_nowtick}, {_tick.firework}) is 0 or 10:
				add 1 to {_nowcount.firework}

				playSound("entity.firework_rocket.launch", 1, 1, {_player})
				set {_colornumber.firework} to dice(7)
				set {_type} to a random element out of {_typeList::*}
				set {_twinkle} to a random element out of {_boolean::*}
				set {_trail} to a random element out of {_boolean::*}
				set {_explosion} to setFireWorksExplosion({_type}, {_colors::%{_colornumber.firework}%}, {_colors.fade::%{_colornumber.firework}%}, {_twinkle}, {_trail})
				set {_time} to 20
				set {_fl} to moveRandomLocation({_baseloc.firework}, 1)
				spawnFireworks({_fl}, {_time}, {_explosion})

				if {_nowcount} > {_count.firework}:
					set {_launching.firework} to false
		
		loop {_count.dust} times:
			set {_v} to {_basevec.dust}
			rotate {_v} around y-axis by {_rad.dust}
			set {_el.dust} to {_baseloc.dust} ~ {_v}
			add {_y.dust} to y-pos of {_el.dust}

			set {_colornum.dust} to dice(7)
			spawnParticle_DustTransition({_colors::%{_colornum.dust}%}, {_colors.fade::%{_colornum.dust}%}, 1.1, {_el.dust})
			
			add {_addrad.dust} to {_rad.dust}

		add {_plusrad.dust} to {_rad.dust}
		add {_addy.dust} to {_y.dust}
		set {_y.dust} to 0 if {_y.dust} > {_maxy.dust}

		add 1 to {_nowtick}
		wait a tick



local function particleThree(player: player):
	add rgb(243, 237, 53) to {_colors::*}
	add rgb(228, 247, 63) to {_colors::*}
	add rgb(240, 220, 45) to {_colors::*}

	add rgb(252, 250, 180) to {_colors.fade::*}
	add rgb(243, 255, 200) to {_colors.fade::*}
	add rgb(247, 241, 163) to {_colors.fade::*}

	add "ball" to {_typeList::*}
	add "ball_large" to {_typeList::*}
	add "star" to {_typeList::*}

	playSound("entity.firework_rocket.launch", 1, 1, {_player})
	set {_baseloc} to location 1 meter above {_player}
	set {_basevec} to vector(1, 0, 0)
	set {_fwcount} to 6
	set {_rad} to 0
	set {_addrad} to 360 / {_fwcount}
	loop {_fwcount} times:
		add {_addrad} to {_rad}
		set {_vec} to {_basevec}
		rotate {_vec} around y-axis by {_rad}
		set {_fl} to {_baseloc} ~ {_vec}

		set {_type} to a random element out of {_typeList::*}
		set {_explosion} to setFireWorksExplosion({_type}, {_colors::*}, {_colors.fade::*})
		set {_time} to a random integer between 10 and 30
		spawnFireworks({_fl}, {_time}, {_explosion})
	
	set {_height} to 2
	set {_perh} to 0.5
	set {_count.h} to (2 / 0.5) + 1

	set {_y} to 0
	set {_addy} to {_perh}
	set {_count.c} to 10
	set {_addrad} to 360 / {_count.c}
	set {_basevec} to vector(0.5, 0, 0)
	loop {_count.h} times:
		set {_loc} to location {_y} meters above {_baseloc}

		set {_rad} to 0
		loop {_count.c} times:
			add {_addrad} to {_rad}
			set {_v} to {_basevec}
			rotate {_v} around y-axis by {_rad}
			set {_el} to {_loc} ~ {_v}
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Color(entity_effect, {_color}, {_el})
		add {_addy} to {_y}
	
	set {_baseloc} to location 1 meter above {_player}
	set {_amount} to a random integer between 20 and 30
	loop {_amount} times:
		set {_v} to randomVector()
		spawnParticle_Vector(trial_spawner_detection, {_v}, 1, {_baseloc})

local function particleTwo(player: player):
	set {_baseloc} to location 1 meter above {_player}
	add rgb(252, 250, 180) to {_colors::*}
	add rgb(243, 255, 200) to {_colors::*}
	add rgb(247, 241, 163) to {_colors::*}

	set {_explosion} to setFireWorksExplosion("ball", {_colors::*}, {_colors::*})
	spawnFireworks({_baseloc}, 20, {_explosion})
	playSound("entity.firework_rocket.launch", 1, 1, {_player})

	set {_amount} to a random integer between 10 and 20
	set {_baseloc} to location 1 meter above {_player}
	loop {_amount} times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Color(entity_effect, {_color}, {_el})

local function particleZero(player: player):
	set {_baseloc} to location 1 meter above {_player}
	set {_amount} to a random integer between 15 and 20
	loop {_amount} times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		spawnParticle_BlockData(falling_dust, yellow terracotta, {_el})
		chance of 10%:
			set {_el} to moveRandomLocation({_baseloc}, 1)
			spawnParticle_BlockData(falling_dust, orange terracotta, {_el})

local function soundRoulette(player: player):
	set {_timeNum} to 0
	set {_pitchMod.1} to 1.26
	set {_pitchMod.2} to 1.59
	set {_pitchMod.3} to 1.89
	set {_pitchMod.4} to 1.59
	set {_pitchMod.0} to 1.59

	loop 20 times:
		add 1 to {_timeNum}
		set {_mod} to mod({_timeNum}, 4)
		set {_pitch} to {_pitchMod.%{_mod}%}
		playSound("block.note_block.bit", 1, {_pitch}, {_player})

		playSound("block.note_block.pling", 1, 1, {_player}) if {_timeNum} is 10
		playSound("block.note_block.pling", 1, 1, {_player}) if {_timeNum} is 15
		playSound("block.note_block.pling", 1, 2, {_player}) if {_timeNum} is 20
		wait 2 ticks

local function soundSeven(player: player):
	playSound("ui.toast.challenge_complete", 10, 0.7, {_player})

local function soundThree(player: player):
	playSound("entity.player.levelup", 2, 0.6, {_player})

local function soundTwo(player: player):
	playSound("entity.experience_orb.pickup", 1, 0.5, {_player})

local function soundZero(player: player):
	playSound("block.note_block.bass", 1, 0.8, {_player})
