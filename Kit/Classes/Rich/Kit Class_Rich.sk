# Richのスキル Ver1.0.0

# Passives
function kitDropGolds_Rich(player: player, loc: location, num: number = 1) :: entity:
	loop {_num} times:
		set {_droploc} to dropLocation({_loc})
		set {_gold} to a gold nugget
		set {_healamount} to 0.5
		if getKitStats({_player}, "Fortune Boost") is set:
			set {_gold} to a gold ingot
			set {_healamount} to 1

		drop {_gold} named "%{_player}%" at {_droploc}
		set {_lastdrop} to last dropped item
		set metadata value "gametype" of {_lastdrop} to "Kit"
		set metadata value "delete" of {_lastdrop} to "%{_player}%"
		set metadata value "undelete" of {_lastdrop} to true
		set metadata value "Rich Gold" of {_lastdrop} to {_player}
		set metadata value "Rich Healing" of {_lastdrop} to {_healamount}
		set metadata value "Jewelry" of {_lastdrop} to {_player}
		kitParticle_RichDropGolds({_loc})
	return {_lastdrop}

local function dropLocation(loc: location) :: location:
	set {_ok} to false
	set {_loopnum} to 0
	while {_ok} is false:
		add 1 to {_loopnum}
		if {_loopnum} > 30:
			set {_returnloc} to {_loc}
			set {_ok} to true
			continue
		
		set {_pow} to a random number between 0 and 1.5
		set {_vec} to randomVector({_pow})
		set {_returnloc} to {_loc} ~ {_vec}
		if block at {_returnloc} is passable:
			set {_ok} to true
			continue
	return {_returnloc}

# 金をドロップした際の演出 小さくキラキラした感じ
local function kitParticle_RichDropGolds(loc: location):
	set {_count} to a random integer between 1 and 3
	loop {_count} times:
		set {_el} to moveRandomLocation({_loc}, 0.5)
		spawnParticle_Block(gold block, {_el})

on pick up:
	stop if {Class::%player%} is "Thief"

	set {_dropper} to metadata value "Rich Gold" of event-dropped item
	stop if {_dropper} is player
	stop if {_dropper} is not set
	set {_healamount} to metadata value "Rich Healing" of event-dropped item

	set {_goldloc} to location of event-dropped item
	delete event-dropped item
	kitEffect_AurumCure({_dropper}, {_healamount}, {_goldloc})

function kitEffect_AurumCure(player: player, heal: number, loc: location):
	kitHeal({_player}, {_heal}, 1)
	kitParticle_AurumCure({_player}, {_loc})

# ゴールド所持者に向けてキラキラパーティクル
local function kitParticle_AurumCure(player: player, loc: location):
	add rgb(241, 228, 150) to {_colors::*}
	add rgb(240, 233, 133) to {_colors::*}
	add rgb(237, 238, 176) to {_colors::*}
	kitSound_AurumCure({_player}, {_loc})

	set {_toloc} to location 1 meter above {_player}
	set {_time} to 5 ticks
	set {_count} to 5
	loop {_count} times:
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Trail({_color}, {_toloc}, {_time}, {_loc})
		wait a tick

local function kitSound_AurumCure(player: player, loc: location):
	playSound("entity.experience_orb.pickup", 0.5, 2, {_loc})

	set {_pitch} to 1.5
	set {_addmin} to 0.1
	set {_addmax} to 0.25
	loop 3 times:
		playSound("entity.experience_orb.pickup", 1, {_pitch}, {_player}, true)
		set {_add} to a random number between {_addmin} and {_addmax}
		add {_add} to {_pitch}
		wait a tick



# Timer
function kitTimerRich(player: player):
	set {_tool} to kitPlayerWeaponItem({_player}, "Rich")
	set {_JS} to true if kitItemAllChecker({_tool}, "Rich", "Weapon", 3) is true

	set {_waitspan} to 5 ticks
	set {_secloop} to 4
	set {_nowloop} to 0

	while {Class::%{_player}%} is "Rich":
		set {_nowtool} to tool of {_player}
		kitEffect_JackpotStriker_Remain({_player}) if {_nowtool} is {_tool}

		add 1 to {_nowloop}
		if {_nowloop} >= {_secloop}:
			set {_nowloop} to 0
			goldCounting({_player})
		wait {_waitspan}

options:
	gold-timer-limit: 30

local function goldCounting(player: player):
	loop all entities:
		metadata value "Rich Gold" of loop-entity is {_player}
		set {_timer} to metadata value "Rich Timer" of loop-entity
		set {_timer} to 0 if {_timer} is not set

		add 1 to {_timer}
		if {_timer} >= {@gold-timer-limit}:
			loop-entity.remove()
			continue
		
		set metadata value "Rich Timer" of loop-entity to {_timer}