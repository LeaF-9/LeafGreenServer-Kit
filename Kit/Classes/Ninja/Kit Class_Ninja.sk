# Ninjaのスキル Ver1.0.0

# Weapons
function kitWeaponNinja(player: player):
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	checkCT({_player}, name of {_tool}) is true
	if {_item.num} is 1:
		kitWeapon_Ninja_1({_player})
	else if {_item.num} is 2:
		kitWeapon_Ninja_2({_player})
	else if {_item.num} is 4:
		kitWeapon_Ninja_4({_player})
	else if {_item.num} is 5:
		kitWeapon_Ninja_5({_player})

# Skills
function kitSkillNinja(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_tool}) is true:
		if {_item.num} is 1:
			kitSkill_Ninja_1({_player})
		else if {_item.num} is 2:
			kitSkill_Ninja_2({_player})
		else if {_item.num} is 3:
			kitSkill_Ninja_3({_player})
		else if {_item.num} is 4:
			kitSkill_Ninja_4({_player})
		else if {_item.num} is 6:
			kitSkill_Ninja_6({_player})
		else if {_item.num} is 7:
			kitSkill_Ninja_7({_player})
		else if {_item.num} is 8:
			kitSkill_Ninja_8({_player})
	return true

# Abilities
on damage of player:
	damage was caused by fall
	{Class::%victim%} is "Ninja"
	cancel event

on death of player:
	{Class::%{LastKiller::%victim%}%} is "Ninja"
	set {_skill::1} to kitPlayerSkillItem({LastKiller::%victim%}, "Ninja", 1)
	set {_skill::2} to kitPlayerSkillItem({LastKiller::%victim%}, "Ninja", 2)
	set {_skill::3} to kitPlayerSkillItem({LastKiller::%victim%}, "Ninja", 3)
	loop {_skill::*}:
		add 1 to {_ln}
		set {_nin} to line 4 of lore of loop-value
		{_nin} contains "忍術"
		if display name of {_skill::%loop-index%} does not contain "Ninjutsu":
			delete {_have}
			loop all items in {LastKiller::%victim%}'s inventory:
				loop-item is {_skill::%loop-index%}
				set {_have} to true
			{_have} is not set
			give {_skill::%{_ln}%} to {LastKiller::%victim%}
			send action bar "%display name of {_skill::%{_ln}%}% §7を再習得した..." to {LastKiller::%victim%}
		else:
			delete {_have}
			loop all items in {LastKiller::%victim%}'s inventory:
				display name of loop-item contains "Ninjutsu"
				set {_have} to true
			{_have} is not set
			give {_skill::%{_ln}%} to {LastKiller::%victim%}
			send action bar "%display name of {_skill::%{_ln}%}% §7を再習得した..." to {LastKiller::%victim%}

#on jumping:
#	if player's gamemode is not creative or spectator:
#		if {Class::%player%} is "Ninja":
#			{CT.%player%::Double Jump} is not set
#			allow fly for the player
#		else:
#			disallow fly for the player
#	else:
#		allow fly for the player

# Timer
function kitTimerNinja(player: player):
	while {Class::%{_player}%} is "Ninja":
		if {_player}'s gamemode is creative or spectator:
			wait a tick
			continue
#	ダブルジャンプ処理
		if {_player} is flying:
			set {_jumping} to true
			disallow fly for {_player}
			push {_player} upwards at speed 1.1
			push {_player} forward at speed 1.0
			playSound("entity.ghast.shoot", 1, 1, {_player})
			if {Ult.%{_player}%::Ninja} is not set:
				setCT({_player}, "Double Jump", 10, false)
#	ダブルジャンプの許可
		else if {_player} cannot fly:
#		ダブルジャンプ後,地面に着くまでは許可しない
			if {_jumping} is true:
				if block 0.1 meters below {_player} is not passable:
					delete {_jumping}
			else:
				if {CT.%{_player}%::Double Jump} is not set:
					allow fly for {_player}
		wait a tick
	disallow fly for {_player}