# Ninjaのスキル Ver1.0.0

# Skills

# Shuriken
on rightclick holding prismarine crystals:
	name of player's tool contains "Shuriken"
	subtract 1 from item amount of tool of player
	shoot a snowball from player at speed 5
	set metadata value "shuriken" of shot projectile to "true"
	set item of shot projectile to prismarine crystals
	kitParticle_Shuriken_Trail(shot projectile)
	playSound("entity.arrow.shoot", 1, 2, player)

on damage:
	set {_attacker} to getAttacker(victim)
	{Class::%{_attacker}%} is "Ninja"
	damage was caused by projectile
	projectile is a snowball
	metadata value "shuriken" of projectile is "true"
	setDamageModification_SET(victim, 0.5)
	apply poison 1 to the victim for 3 second replacing existing effect

local function kitParticle_Shuriken_Trail(proj: entity):
	loop 20 times:
		spawnParticle_Dust(rgb(176, 196, 222), 1, location of {_proj})
		wait a tick

# Abilities
on damage of player:
	damage was caused by fall
	{Class::%victim%} is "Ninja"
	cancel event

on death of player:
	{Class::%{LastKiller::%victim%}%} is "Ninja"
	set {_skill::1} to kitPlayerSkillItem({LastKiller::%victim%}, "Ninja", 1)
	set {_skill::2} to kitPlayerSkillItem({LastKiller::%victim%}, "Ninja", 2)
	set {_skill::3} to kitPlayerSkillItem({LastKiller::%victim%}, "Ninja", 3)
	loop {_skill::*}:
		add 1 to {_ln}
		set {_nin} to line 4 of lore of loop-value
		{_nin} contains "忍術"
		if display name of {_skill::%loop-index%} does not contain "Ninjutsu":
			delete {_have}
			loop all items in {LastKiller::%victim%}'s inventory:
				loop-item is {_skill::%loop-index%}
				set {_have} to true
			{_have} is not set
			give {_skill::%{_ln}%} to {LastKiller::%victim%}
			send action bar "%display name of {_skill::%{_ln}%}% §7を再習得した..." to {LastKiller::%victim%}
		else:
			delete {_have}
			loop all items in {LastKiller::%victim%}'s inventory:
				display name of loop-item contains "Ninjutsu"
				set {_have} to true
			{_have} is not set
			give {_skill::%{_ln}%} to {LastKiller::%victim%}
			send action bar "%display name of {_skill::%{_ln}%}% §7を再習得した..." to {LastKiller::%victim%}

#on jumping:
#	if player's gamemode is not creative or spectator:
#		if {Class::%player%} is "Ninja":
#			{CT.%player%::Double Jump} is not set
#			allow fly for the player
#		else:
#			disallow fly for the player
#	else:
#		allow fly for the player

# Timer
function kitTimerNinja(player: player):
	while {Class::%{_player}%} is "Ninja":
		if {_player}'s gamemode is creative or spectator:
			wait a tick
			continue
#	ダブルジャンプ処理
		if {_player} is flying:
			set {_jumping} to true
			disallow fly for {_player}
			push {_player} upwards at speed 1.1
			push {_player} forward at speed 1.0
			playSound("entity.ghast.shoot", 1, 1, {_player})
			if {Ult.%{_player}%::Ninja} is not set:
				setCT({_player}, "Double Jump", 10, false)
				create bossbar titled "&9&lDouble-Jump &b&lCT&7: &a&l10" and id "%{_player}%-DoubleJump" for {_player} with progress 100 with colors blue with style segmented 10
#	ダブルジャンプの許可
		else if {_player} cannot fly:
#		ダブルジャンプ後,地面に着くまでは許可しない
			if {_jumping} is true:
				if block 0.1 meters below {_player} is not passable:
					delete {_jumping}
			else:
				if {CT.%{_player}%::Double Jump} is not set:
					allow fly for {_player}
#	ダブルジャンプ CTの記載
		if {CT.%{_player}%::Double Jump} is set:
			set {_ct} to {CT.%{_player}%::Double Jump}
			set {_time} to {_ct}
			set {_timetexts::*} to "%{_time}%" split at "."
			if size of {_timetexts::*} is 1:
				set {_timetext} to "%{_time}%.00"
			else if length of {_timetexts::2} is 1:
				set {_timetext} to "%{_time}%0"
			else:
				set {_timetext} to "%{_time}%"
			set {_prog} to ({CT.%{_player}%::Double Jump} / 10) * 100
			set bossbar "%{_player}%-DoubleJump" title to "&9&lDouble-Jump &b&lCT&7: &a&l%{_timetext}%"
			set bossbar "%{_player}%-DoubleJump" value to {_prog}
		else:
			remove bossbar "%{_player}%-DoubleJump"
		wait a tick
	remove bossbar "%{_player}%-DoubleJump"
	disallow fly for {_player}