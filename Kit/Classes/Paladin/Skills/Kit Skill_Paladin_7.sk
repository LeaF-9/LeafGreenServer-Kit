# Recipient Genie

options:
	effect-tick: 100
	effect-radius: 7



on damage of player with priority NORMAL:
	kitStats_GET(victim, "RecipientGenie") is set
	checkDamagable(victim) is true
	set {_attacker} to getAttacker(victim)
	set {_dmg} to getDamageModification_ALL(victim, damage)
	cancel event

	set {_player} to kitStats_GET(victim, "RecipientGenie")
	set {_popularity} to kitStats_GET({_player}, "RecipientGenie-Number")
	set {_truedmg} to {_dmg} * (1 / (1 + {_popularity}))

	kitDamageNull({_attacker}, {_player}, {_truedmg}, "護衛")
	kitEffectDescription(victim, "§2§l護衛")
	kitEffectDescription({_player}, "§2§l護衛")
	kitParticle_RecipientGenie_Damage({_player}, victim)



function kitSkill_Paladin_7(player: player):
	toolCT({_player}, "Paladin", 7)
	kitEffect_RecipientGenie({_player})



local function kitEffect_RecipientGenie(player: player):
	kitMsg({_player}, "§1周りのダメージを全て受け持ちます!")
	set {_now} to now
	kitStats_SET({_player}, "RecipientGenie-Launcher", {_now})
	sendTimeBossbar_GREEN({_player}, "Recipient Genie", {@effect-tick})
	kitParticle_RecipientGenie_Launch({_player})

	loop {@effect-tick} times:
		if kitStats_GET({_player}, "RecipientGenie-Launcher") is not {_now}:
			continue

		delete {_eg::*}

		set {_popularity} to 0
		loop all players in radius 7 around {_player}:
			loop-player is not {_player}
			kitCheckTeam(loop-player, {_player}, true) is true
			kitStats_GET(loop-player, "RecipientGenie-Launcher") is not set
			add 1 to {_popularity}
			set {_eg::%id of loop-player%} to true
			kitParticle_RecipientGenie_Cover({_player}, loop-player)
			if {_jb::%id of loop-player%} is not set:
				set {_jb::%id of loop-player%} to true
				kitStats_SET(loop-player, "RecipientGenie", {_player})

		loop all players:
			metadata value "gametype" of loop-player is "Kit"
			{_eg::%id of loop-player%} is not set
			{_jb::%id of loop-player%} is true
			delete {_jb::%id of loop-player%}
			kitStats_DELETE(loop-player, "RecipientGenie")
		kitStats_SET({_player}, "RecipientGenie-Number", {_popularity})
		wait a tick

	if kitStats_GET({_player}, "RecipientGenie-Launcher") is {_now}:
		kitParticle_RecipientGenie_End({_player})
	kitStats_DELETE({_player}, "RecipientGenie-Launcher")
	kitStats_DELETE({_player}, "RecipientGenie-Number")
	loop all players:
		{_eg::%id of loop-player%} is true
		{_jb::%id of loop-player%} is true
		kitStats_DELETE(loop-player, "RecipientGenie")



local function kitParticle_RecipientGenie_Damage(player: player, target: player):
	playSound("entity.ravager.hurt", 1, 1.3, {_player})
	playSound("entity.zombie.attack_iron_door", 1, 1.4, {_target})
	set {_loc.player} to location 1 meter above {_player}
	set {_loc.target} to location 1 meter above {_target}

	set {_count} to 10
	set {_distance} to distance between {_loc.player} and {_loc.target}
	set {_m} to 0
	set {_addm} to {_distance} / {_count}
	set {_baseloc} to setDirToVec({_loc.player}, setVector({_loc.player}, {_loc.target}))
	loop {_count} times:
		add {_addm} to {_m}
		set {_el} to location {_m} meters in front of {_baseloc}
		set {_el} to moveRandomLocation({_el}, 0.5)
		spawnParticle(scrape, {_el})
	
	loop 30 times:
		spawnParticle_Vector(trial_spawner_detection_ominous, randomVector(), 0.8, {_loc.target})

	loop 30 times:
		spawnParticle(trial_omen, moveRandomLocation({_loc.player}, 1))

local function kitParticle_RecipientGenie_Launch(player: player):
	playSound("entity.ravager.roar", 1, 1.3, {_player})
	playSound("item.totem.use", 1, 1.7, {_player})
	kitParticle_RecipientGenie_Aura({_player})

	set {_baseloc} to location 1 meter above {_player}
	set pitch of {_baseloc} to 0

	loop 100 times:
		spawnParticle_Vector(firework, randomVector(), 1, {_baseloc})

		chance of 50%:
			set {_base} to setDirToVec({_baseloc}, randomVector())
			set {_rm} to a random number between 0 and {@effect-radius}
			set {_el} to location {_rm} meters in front of {_base}
			spawnParticle_Block(lapis block, {_el})
	
	add rgb(65, 62, 233) to {_colors::*}
	add rgb(12, 99, 212) to {_colors::*}
	add rgb(21, 54, 236) to {_colors::*}

	set {_count} to 10
	set {_baserad} to 0
	set {_addrad} to 45 / {_count}
	set {_m} to 0
	set {_addm} to {@effect-radius} / {_count}

	loop {_count} times:
		add {_addm} to {_m}

		set {_count.2} to 4
		set {_addrad.2} to 360 / {_count.2}
		set {_ln.2} to 0
		loop 4 times:
			set {_el} to {_baseloc}
			set {_rad} to {_baserad} + ({_addrad.2} * {_ln.2})
			set yaw of {_el} to {_rad}
			set {_el} to location {_m} meters in front of {_el}
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Color(entity_effect, {_color}, {_el})

			add 1 to {_ln.2}
		add {_addrad} to {_baserad}
		wait a tick

local function kitParticle_RecipientGenie_Aura(player: player):
	set {_now} to kitStats_GET({_player}, "RecipientGenie-Launcher")

	add rgb(65, 62, 233) to {_colors.fairy::*}
	add rgb(12, 99, 212) to {_colors.fairy::*}
	add rgb(21, 54, 236) to {_colors.fairy::*}

	add rgb(52, 136, 245) to {_colors.trail::*}
	add rgb(122, 197, 247) to {_colors.trail::*}
	add rgb(118, 138, 250) to {_colors.trail::*}

	set {_baserad} to 0
	set {_addrad} to 100 / 20
	set {_count} to 4
	set {_count.2} to 2
	loop {@effect-tick} times:
		if kitStats_GET({_player}, "RecipientGenie-Launcher") is not {_now}:
			stop

		set {_baseloc} to location 1 meter above {_player}
		set pitch of {_baseloc} to 0

		# field particles
		set {_ln.2} to 0
		loop {_count} times:
			add 1 to {_ln.2}
			set {_rad} to {_baserad} + ((360 / {_count}) * ({_ln.2} - 1))

			set {_el} to {_baseloc}
			set yaw of {_el} to {_rad}
			set {_el} to location {@effect-radius} meters in front of {_el}
			set {_color} to a random element out of {_colors.fairy::*}
			spawnParticle_Dust({_color}, 2, {_el})

			set {_ln.3} to 0
			set {_baseel} to {_el}
			loop {_count.2} times:
				add 1 to {_ln.3}
				set {_rad} to {_baserad} + ((360 / 2) * ({_ln.3} - 1))
				set {_el} to {_baseel}
				add 90 to yaw of {_el}
				set pitch of {_el} to 0
				set {_basevec} to setVector({_el}, location 10 meters in front of {_el})
				set {_directvec} to vector(0, 0.5, 0)
				rotate {_directvec} around {_basevec} by {_rad}
				set {_el} to setDirToVec({_el}, {_directvec})
				set {_el} to location 0.5 meters in front of {_el}
				set {_color} to a random element out of {_colors.trail::*}
				spawnParticle_Color(entity_effect, {_color}, {_el})

		add {_addrad} to {_baserad}
		wait a tick

local function kitParticle_RecipientGenie_Cover(player: player, target: player):
	set {_loc.player} to location 1 meter above {_player}
	set {_loc.target} to location 1 meter above {_target}
	
	add rgb(65, 62, 233) to {_colors.fairy::*}
	add rgb(12, 99, 212) to {_colors.fairy::*}
	add rgb(21, 54, 236) to {_colors.fairy::*}

	add rgb(52, 136, 245) to {_colors.trail::*}
	add rgb(122, 197, 247) to {_colors.trail::*}
	add rgb(118, 138, 250) to {_colors.trail::*}

	set {_color} to a random element out of {_colors.fairy::*}
	spawnParticle_Dust({_color}, 1, particleLocation_Circle({_loc.player}, 10, 1))
	set {_color} to a random element out of {_colors.fairy::*}
	spawnParticle_Dust({_color}, 0.8, particleLocation_Circle({_loc.target}, 10, 0.5))

	set {_count} to 10
	set {_distance} to distance between {_loc.player} and {_loc.target}
	set {_m} to 0
	set {_addm} to {_distance} / {_count}
	set {_baseloc} to setDirToVec({_loc.player}, setVector({_loc.player}, {_loc.target}))
	loop {_count} times:
		add {_addm} to {_m}
		set {_el} to location {_m} meters in front of {_baseloc}
		set {_color} to a random element out of {_colors.trail::*}
		spawnParticle_Dust({_color}, 0.7, {_el})

local function kitParticle_RecipientGenie_End(player: player):
	playSound("entity.ravager.stunned", 1, 1.3, {_player})
	set {_baseloc} to location 0.5 meters above {_player}
	set pitch of {_baseloc} to 0

	add rgb(52, 136, 245) to {_colors::*}
	add rgb(122, 197, 247) to {_colors::*}
	add rgb(118, 138, 250) to {_colors::*}

	loop 100 times:
		set {_yaw} to a random number between 0 and 360
		set {_m} to a random number between 0 and {@effect-radius}
		set yaw of {_baseloc} to {_yaw}
		set {_el} to location {_m} meters in front of {_baseloc}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Color(entity_effect, {_color}, {_el})