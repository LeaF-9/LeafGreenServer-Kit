# Fortunate Pixie

on damage of player:
	{Stats.%victim%::FortunatePixie} is set
	set {_now} to now
	set {Stats.%victim%::FortunatePixie-Time} to {_now}
	set {_dmg} to damage
	kitParticle_FortunatePixie_Damage(victim)
	wait a seconds
	{Stats.%victim%::FortunatePixie-Time} is {_now}
	kitEffectDescription(victim, "§d§l回復")
	kitParticle_FortunatePixie_Heal(victim)
	kitEffect_ForTunatePixie_Healing(victim, {_dmg}, {_now})


function kitSkill_Paladin_8(player: player):
	toolCT({_player}, "Paladin", 8)
	kitEffect_FortunatePixie({_player})



local function kitEffect_FortunatePixie(player: player):
	kitMsg({_player}, "§d幸運の妖精が飛び回ります!")
	# Particles
	playSound("entity.player.levelup", 1, 0.5, {_player})
	set {_baseloc} to location of head of {_player}
	set {_baserad} to 0
	set {_rad} to 0
	set {_m} to 0
	set {_pnum} to 0
	loop 20 times:
		add 0.5 to {_m}
		set {_baseel} to location {_m} meters in front of {_baseloc}
		delete {_pixieloc::*}
		set {_ln} to 3 - {_pnum}
		loop {_ln} times:
			set {_pl} to {_baseel}
			add 120 to {_baserad}
			set {_m1} to {_pl}
			set {_p} to pitch of {_m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_m1} to {_p}
			set {_test1} to 5 * cos({_baserad})
			set {_t1} to location {_test1} meters in front of {_m1}
			set {_m2} to {_pl}
			set pitch of {_m2} to 0
			set {_test2} to 5 * sin({_baserad})
			set {_t2} to location {_test2} meters to the right of {_m2}
			set x-coordinate of {_pl} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_pl}
			set y-coordinate of {_pl} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_pl}
			set z-coordinate of {_pl} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_pl}
			add {_pl} to {_pixieloc::*}
			loop 3 times:
				set {_el} to {_pl}
				add 120 to {_rad}
				set {_m1} to {_el}
				set {_p} to pitch of {_m1}
				if {_p} < 0:
					set {_p} to -1 * 90 - {_p}
					set {_y} to yaw of {_m1}
					add 180 to {_y}
					if {_y} >= 360:
						set {_y} to {_y} - 360
					set yaw of {_m1} to {_y}
				else:
					set {_p} to {_p} - 90
				set pitch of {_m1} to {_p}
				set {_test1} to 0.5 * cos({_rad})
				set {_t1} to location {_test1} meters in front of {_m1}
				set {_m2} to {_el}
				set pitch of {_m2} to 0
				set {_test2} to 0.5 * sin({_rad})
				set {_t2} to location {_test2} meters to the right of {_m2}
				set x-coordinate of {_el} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_el}
				set y-coordinate of {_el} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_el}
				set z-coordinate of {_el} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_el}
				spawnParticle_Dust(rgb(255, 192, 203), 1, {_el})

		loop all players in radius 5 around {_baseel}:
			{_pnum} < 3
			{_pixie::%loop-player%} is not set
			loop-player is not {_player}
			kitCheckTeam(loop-player, {_player}, true) is true
			set {_pixie::%loop-player%} to true
			add 1 to {_pnum}
			set {_indnum} to 4 - {_pnum}
			set {_fromloc} to {_pixieloc::%{_indnum}%}
			kitEffect_FortunatePixie_Apply({_player}, loop-player, {_fromloc})
		add 30 to {_baserad}
		add 20 to {_rad}
		wait a tick
	wait 7 seconds
	loop all players:
		{Stats.%loop-player%::FortunatePixie} is {_player}
		delete {Stats.%loop-player%::FortunatePixie}
		message formatted "§e幸運の妖精は消え去りました..." to loop-player

local function kitEffect_FortunatePixie_Apply(player: player, target: player, from: location):
	# Particles
	set {_rad} to 0
	loop 20 times:
		set {_to} to location of head of {_target}
		set {_dis} to distance between {_from} and {_to} / 20 * loop-number
		set {_vector} to setVector({_from}, {_to})
		set yaw of {_from} to yaw of {_vector}
		set pitch of {_from} to pitch of {_vector}
		set {_baseel} to location {_dis} meters in front of {_from}
		playSound("block.amethyst_cluster.hit", 1, 1, {_baseel})
		loop 3 times:
			add 120 to {_rad}
			set {_el} to {_baseel}
			set {_m1} to {_el}
			set {_p} to pitch of {_m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_m1} to {_p}
			set {_test1} to 0.5 * cos({_rad})
			set {_t1} to location {_test1} meters in front of {_m1}
			set {_m2} to {_el}
			set pitch of {_m2} to 0
			set {_test2} to 0.5 * sin({_rad})
			set {_t2} to location {_test2} meters to the right of {_m2}
			set x-coordinate of {_el} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_el}
			set y-coordinate of {_el} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_el}
			set z-coordinate of {_el} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_el}
			spawnParticle_Dust(rgb(255, 153, 238), 1, {_el})
		add 20 to {_rad}
		wait a tick
	
	message formatted "§a幸運の妖精が身を護ってくれます!" to {_target}
	kitEffectDescription({_target}, "§d§l幸運の妖精")
	sendTimeBossbar_GREEN({_target}, "Fortunate Pixie", 140)
	set {Stats.%{_target}%::FortunatePixie} to {_player}
	kitParticle_FortunatePixie_Apply({_player}, {_target})
	kitLuck({_target}, 3, true)

local function kitEffect_ForTunatePixie_Healing(player: player, damage: number, time: date):
	set {_healamount} to {_damage} / 20
	loop 20 times:
		if {Stats.%{_player}%::FortunatePixie-Time} is not {_time}:
			stop
		kitHeal({_player}, {_healamount}, 1)
		wait a tick
	delete {Stats.%{_player}%::FortunatePixie-Time}





local function kitParticle_FortunatePixie_Apply(player: player, target: player):
	playSound("block.amethyst_cluster.break", 1, 0.5, {_player})
	loop 140 times:
		{Stats.%{_target}%::FortunatePixie} is {_player}
		loop 10 times:
			chance of 10%:
				set {_el} to aroundEffect({_target})
				kitParticle_FortunatePixie_Dust({_el})
		wait a tick

local function kitParticle_FortunatePixie_Dust(loc: location):
	set {_rn} to a random integer between 1 and 5
	if {_rn} is 1:
		spawnParticle_BlockData(falling_dust, pink wool, {_loc})
	else if {_rn} is 2:
		spawnParticle_BlockData(falling_dust, red wool, {_loc})
	else if {_rn} is 3:
		spawnParticle_DustTransition(rgb(235, 110, 160), rgb(229, 103, 205), 1.5, {_loc})
	else if {_rn} is 4:
		spawnParticle_DustTransition(rgb(216, 52, 115), rgb(222, 130, 167), 2, {_loc})
	else:
		spawnParticle_Dust(rgb(255, 20, 147), 0.5, {_loc})

local function kitParticle_FortunatePixie_Damage(player: player):
	playSound("entity.allay.hurt", 1, 1.2, {_player})
	set {_baseloc} to location 1 meter above {_player}
	loop 10 times:
		spawnParticle_Vector(glow, randomVector(), 5, {_baseloc})

local function kitParticle_FortunatePixie_Heal(player: player):
	playSound("entity.allay.item_given", 1, 1.5, {_player})
	set {_baserad} to 0
	set {_height} to 0
	loop 20 times:
		set {_baseloc} to location of {_player}
		set {_countnum} to 0
		loop 4 times:
			add 1 to {_countnum}
			set {_rad} to {_baserad} + 90 * ({_countnum} - 1)
			set {_el} to {_baseloc}
			add 0.5 * sin({_rad}) to x-pos of {_el}
			add 0.5 * cos({_rad}) to z-pos of {_el}
			add {_height} to y-pos of {_el}
			spawnParticle_Dust(rgb(255, 105, 180), 0.5, {_el})
		add 10 to {_baserad}
		add 0.1 to {_height}
		if mod(loop-number, 4) is 0:
			wait a tick