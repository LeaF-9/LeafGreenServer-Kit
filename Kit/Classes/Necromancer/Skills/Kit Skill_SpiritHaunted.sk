# Skill-Name: Spirit Haunted

function kitEffect_SpiritHaunted(player: player):
	set {_tool} to kitNecromanceItem({_player}, "Spirit Haunted")
	kitCheckNecromance({_player}, {_tool}) is true
	set {_SkillTarget} to getKitStats({_player}, "SkillTarget")
	if {_SkillTarget} is not set:
		send action bar "§c§l対象が存在しません!" to {_player}
		stop
	set {_tg} to {_SkillTarget}
	nameCT({_player}, "Spirit Haunted")
	kitRemoveNecromance({_player}, {_tool})
	kitMsg({_player}, "§1%{_tg}% §8に§5§l彷徨う魂§8を取り憑かせた...")
	message "§5なんだか憑かれている気がする..." to {_tg}
	playSound("entity.zombie_villager.converted", 1.2, 0.5, {_tg})
	kitEffect_SpiritHaunted_Summon({_player}, {_tg})

local function kitEffect_SpiritHaunted_Summon(player: player, target: player):
	set {_baseloc} to location of {_player}
	set pitch of {_baseloc} to 0
	set {_baseloc} to location 1 meter behind {_baseloc}
	set {_locs::*} to particleLocation_CircleV({_baseloc}, 5, 1)
	loop 5 times:
		kitSpawn_Necromancer_Wander({_player}, {_locs::%loop-number%}, {_target})

local function kitSpawn_Necromancer_Wander(player: player, loc: location, target: player):
	set {_mob} to kitSpawmMob({_player}, zombie, {_loc}, false)
	{_mob}.setSilent(true)
	{_mob}.setBaby()
	{_mob}.setAI(false)

	set {_head} to getKitItems("Necromancer", "Wander Head")
	setEntityArmor({_mob}, "helmet", {_head})
	setEntityArmor({_mob}, "chestplate", air)
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)

	applyEffect({_mob}, invisibility, 1, 12000, true, "none")

	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-wandersoul" of {_mob} to true
	set {_speed} to a random number between 0.1 and 1
	set {_exists} to true
	while {_exists} is true:
		if {_mob} is dead:
			set {_exists} to false
			continue
		if {_mob} does not exist:
			set {_exists} to false
			continue
		if kitCheckAlive({_target}) is false:
			set {_exists} to false
			kill {_mob}
			continue
		set {_toloc} to location 1 meter above {_target}
		add a random number between -1.5 and 1.5 to x-pos of {_toloc}
		add a random number between -1.5 and 1.5 to y-pos of {_toloc}
		add a random number between -1.5 and 1.5 to z-pos of {_toloc}
		set {_v} to setVector(location of {_mob}, {_toloc})
		set {_baseloc} to location of {_mob}
		set yaw of {_baseloc} to yaw of {_v}
		set pitch of {_baseloc} to pitch of {_v}
		set {_fm} to a random number between {_speed} * 0.1 and {_speed}
		set {_tploc} to location {_fm} meters in front of {_baseloc}
		teleport {_mob} to {_tploc}
		spawnParticle(soul_fire_flame, location 1 meter above {_tploc})
		if distance between location 1 meter above {_target} and {_mob} <= 1:
			set {_elbase} to location of {_mob}
			loop all entities:
				loop-entity is {_mob}
				delete loop-entity
			set {_exists} to false
			kitDamage({_player}, {_target}, 1, "彷徨う魂", true)
			kitFear({_target}, 60)
			kitEffectDescription({_target}, "§4❤1 §8& §5恐怖")
			playSound("entity.evoker.cast_spell", 1, 0.9, {_target})
			loop 5 times:
				set {_v} to randomVector()
				spawnParticle_Vector(sculk_soul, {_v}, 1, location 0.5 meters above {_elbase})
			continue
		wait a tick

on damage of zombie:
	# Conditions
	metadata value "necromancer-entity-wandersoul" of victim is set
	damage cause is not sweep attack
	if attacker is not set:
		cancel event
		stop
	# Effects
	set {_baseloc} to location of victim
	set {_attacker} to metadata value "necromancer-entity" of victim
	delete victim
	kitAddNecromance({_attacker}, 1)
	kitParticle_WanderSoul_Death({_baseloc})

on death of player:
	{Class::%victim%} is "Necromancer"
	loop all zombies:
		metadata value "necromancer-entity" of loop-zombie is victim
		metadata value "necromancer-entity-wandersoul" of loop-zombie is set
		delete loop-zombie

local function kitParticle_WanderSoul_Death(baseloc: location):
	playSound("entity.vex.hurt", 1, 0.5, {_baseloc})
	set {_el} to location 0.5 meters above {_baseloc}
	loop 10 times:
		set {_v} to randomVector()
		spawnParticle_Vector(sculk_charge_pop, {_v}, 1, {_el})