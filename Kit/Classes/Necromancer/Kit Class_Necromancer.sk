# Necromancerのスキル Ver1.0.0

# Skills
on rightclick holding a zombie spawn egg:
	name of player's tool is "§5Summon Dead"
	cancel event
	if checkCT(player, name of tool of player) is true:
		setCT(player, name of player's tool, 60)
		kitMsg(player, "§5死者5体を召喚した...")
		playSound("entity.zombie.ambient", 1, 0.5, player)
		loop all blocks in radius 5 around player:
			(y-pos of (loop-block)) is (y-pos of (block at (player)))
			add (location of (block 2 below (loop-block))) to {_ls::*}
		loop 5 times:
			set {_l} to a random location out of {_ls::*}
			remove {_l} from {_ls::*}
			set {_z} to true
			chance of 20%:
				set {_z} to false
			if {_z} is true:
				set {_undead} to kitSpawn_Necromancer_Zombie(player, {_l})
			else:
				set {_undead} to kitSpawn_Necromancer_Skeleton(player, {_l})
			push {_undead} upwards at speed 0.85
			kitParticle_SummonDead({_l})

function kitParticle_SummonDead(baseloc: location):
	set {_addy} to 0
	loop 5 times:
		loop 5 times:
			set {_rad} to 0
			add 0.2 to {_addy}
			loop 10 times:
				add 36 to {_rad}
				set {_vec} to vector(0.5, 0, 0)
				rotate {_vec} around y-axis by {_rad}
				set {_el} to {_baseloc} ~ {_vec}
				add {_addy} to y-pos of {_el}
				spawnParticle_Color(entity_effect, rgb(100, 0, 100), {_el})
		wait a tick

# Abilities
on death:
	if checkEntityType(victim, player) is false:  # 自分のMobが死亡した際の処理
		metadata value "gametype" of victim is "Kit"
		if metadata value "necromancer-entity" of victim is not set:
			stop
		set {_summoner} to metadata value "necromancer-entity" of victim
		kitAddNecromance({_summoner}, 1)
		if metadata value "sally-fatalities" of victim is set:
			kitEffect_SallyFatalities_Dead(victim)
	else:  # プレイヤーが死んだ際の処理
		metadata value "gametype" of victim is "Kit"
		if {Class::%victim%} is "Necromancer":
			if damage was caused by void:
				if {LastKiller::%victim%} is not set:
					stop
			if getKitStats(victim, "DumpSoul") is true:
				stop
			else:
				kitAddNecromance(victim, 1)
				kitSpawn_Necromancer_Ghost(victim, location of victim, true)
		loop all players:
			getKitStats(loop-player, "DeathDetector") is true
			kitEffect_DeathDetector_Summon(loop-player)

on rightclick:
	{Class::%player%} is "Necromancer"
	set {_tool} to player's tool
	set {_item.type} to kitItemTypeChecker({_tool})
	set {_item.num} to kitItemNumberChecker({_tool})
	{_item.type} is "Weapon"
	loop all entities:
		metadata value "targetdead.%player%" of loop-entity is true
		set {_tg} to loop-entity
	{_tg} is set
	checkEntityType({_tg}, armor stand) is true
	distance between {_tg} and player <= 10
	metadata value "deadplayer" of {_tg} is set
	set {_dead} to metadata value "deadplayer" of {_tg}
	if {_item.num} is 3:
		kitEffect_SoulLure_Pick(player, location of {_tg})
	else if {_item.num} is 2:
		kitEffect_ErasureRapier_Pick(player)
	else if {_item.num} is 1:
		kitEffect_DeadBone_Pick(player, location of {_tg})
	playSound("entity.zombie.infect", 1, 0.5, {_tg})
	playSound("entity.evoker.cast_spell", 1, 0.5, player, true)
	set {_dis} to round(distance between player and {_tg})
	loop all entities:
		type of loop-entity is an armor stand
		metadata value "deadplayer" of loop-entity is {_dead}
		delete loop-entity
	set {_baseloc} to location of player
	add 1 to y-coordinate of {_baseloc}
	loop {_dis} times:
		add 1 to {_num}
		set {_loc} to location {_num} meters in front of {_baseloc}
		spawnParticle_Dust(rgb(100, 0, 100), 1.25, {_loc})

command /necroset <number>:
	permission: sk.admin
	trigger:
		set {Kit-Necromance::%player%} to arg 1

function kitSpawn_Necromancer_Zombie(player: player, loc: location) :: entity:
	if {team::%{_player}%} is "red":
		set {_color} to rgb(255, 0, 0)
	else if {team::%{_player}%} is "blue":
		set {_color} to rgb(0, 0, 255)
	else if {team::%{_player}%} is "yellow":
		set {_color} to rgb(255, 255, 0)
	else if {team::%{_player}%} is "green":
		set {_color} to rgb(0, 255, 0)
	else:
		set {_color} to rgb(255, 0, 255)
	
	set {_helmet} to leather helmet

	set {_meta} to {_helmet}.getItemMeta()
	set {_color} to {_color}.asBukkitColor()
	{_meta}.setColor({_color})
	{_helmet}.setItemMeta({_meta})

	set {_mob} to kitSpawnMob({_player}, zombie, {_loc})
	{_mob}.setBaby(false)

	setEntityArmor({_mob}, "helmet", {_helmet})
	setEntityArmor({_mob}, "chestplate", air)
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)

	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-undead" of {_mob} to "zombie"
	set metadata value "necromancer-entity-undead-timer" of {_mob} to 0
	set max health of {_mob} to 3
	return {_mob}

function kitSpawn_Necromancer_Skeleton(player: player, loc: location) :: entity:
	if {team::%{_player}%} is "red":
		set {_color} to rgb(255, 0, 0)
	else if {team::%{_player}%} is "blue":
		set {_color} to rgb(0, 0, 255)
	else if {team::%{_player}%} is "yellow":
		set {_color} to rgb(255, 255, 0)
	else if {team::%{_player}%} is "green":
		set {_color} to rgb(0, 255, 0)
	else:
		set {_color} to rgb(255, 0, 255)
	
	set {_helmet} to leather helmet

	set {_meta} to {_helmet}.getItemMeta()
	set {_color} to {_color}.asBukkitColor()
	{_meta}.setColor({_color})
	{_helmet}.setItemMeta({_meta})

	set {_mob} to kitSpawnMob({_player}, skeleton, {_loc})
	setEntityArmor({_mob}, "helmet", {_helmet})
	setEntityArmor({_mob}, "chestplate", air)
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)
	
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-undead" of {_mob} to "skeleton"
	set metadata value "necromancer-entity-undead-timer" of {_mob} to 0
	set max health of {_mob} to 3
	return {_mob}

function kitSpawn_Necromancer_BabyZombie(player: player, loc: location):
	if {team::%{_player}%} is "red":
		set {_color} to rgb(255, 0, 0)
	else if {team::%{_player}%} is "blue":
		set {_color} to rgb(0, 0, 255)
	else if {team::%{_player}%} is "yellow":
		set {_color} to rgb(255, 255, 0)
	else if {team::%{_player}%} is "green":
		set {_color} to rgb(0, 255, 0)
	else:
		set {_color} to rgb(255, 0, 255)

	set {_helmet} to leather helmet

	set {_meta} to {_helmet}.getItemMeta()
	set {_color} to {_color}.asBukkitColor()
	{_meta}.setColor({_color})
	{_helmet}.setItemMeta({_meta})

	set {_mob} to kitSpawnMob({_player}, zombie, {_loc})
	{_mob}.setBaby(true)

	setEntityArmor({_mob}, "helmet", {_helmet})
	setEntityArmor({_mob}, "chestplate", air)
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)

	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-babyzombie" of {_mob} to true
	set max health of {_mob} to 1
	wait 10 seconds
	{_mob} is alive
	{_mob}.remove()
	removeBabyZombie({_mob})

on damage with priority HIGHEST:
	set {_attacker} to getAttacker(victim)
	if metadata value "necromancer-entity-babyzombie" of victim is true:
		victim.remove()
		removeBabyZombie(victim)
	else if metadata value "necromancer-entity-babyzombie" of {_attacker} is true:
		setDamageModification_FIX(victim, 1)

local function removeBabyZombie(entity: entity):
	set {_loc} to location of {_entity}
	playSound("entity.zombie.destroy_egg", 1, 0.7, {_loc})

	set {_baseloc} to location 1 meter above {_loc}
	loop 20 times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		spawnParticle_Item(rotten flesh, {_el})

function kitSpawn_Necromancer_Grudge(player: player, loc: location):
	set {_mob} to kitSpawnMob({_player}, zombie, {_loc}, false)
	{_mob}.setSilent(true)
	{_mob}.setBaby(false)

	set {_head} to getKitItems("Necromancer", "Grudge Head")

	setEntityArmor({_mob}, "helmet", {_head})
	setEntityArmor({_mob}, "chestplate", air)
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)

	applyEffect({_mob}, slowness, 3, 12000, true, "none")
	applyEffect({_mob}, invisibility, 1, 12000, true, "none")

	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-grudgesoul" of {_mob} to true
	wait 30 seconds
	{_mob} is alive
	loop 5 times:
		set {_l} to aroundEffect({_mob})
		spawnParticle(smoke, {_l})
	loop all entities:
		loop-entity is {_mob}
		delete loop-entity

on damage with priority HIGHEST:
	set {_attacker} to getAttacker(victim)
	if metadata value "necromancer-entity-grudgesoul" of {_attacker} is true:
		set damage to 1
	if metadata value "necromancer-entity-grudgesoul" of victim is true:
		cancel event
		if {_attacker} is set:
			set {_victim} to metadata value "necromancer-entity" of victim
			kitCheckTeam({_victim}, {_attacker}, false) is true
			applyEffect({_attacker}, wither, 1, 100, true)
		set {_el} to location of victim
		delete victim
		loop 20 times:
			spawnParticle(witch, {_el})
			wait a tick

function kitSpawn_Necromancer_Vengeful(player: player, loc: location):
	set {_mob} to kitSpawnMob({_player}, skeleton, {_loc}, false)

	set {_chestplate} to leather chestplate
	set {_color} to rgb(31, 106, 56).asBukkitColor()

	set {_meta} to {_chestplate}.getItemMeta()
	{_meta}.setColor({_color})
	{_chestplate}.setItemMeta({_meta})

	setEntityArmor({_mob}, "helmet", zombie head)
	setEntityArmor({_mob}, "chestplate", {_chestplate})
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)

	applyEffect({_mob}, speed, 1, 12000, true, "none")
	applyEffect({_mob}, invisibility, 1, 12000, true, "none")

	set max health of {_mob} to 5
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-vengefulspirit" of {_mob} to 5

on damage with priority HIGHEST:
	set {_attacker} to getAttacker(victim)
	damage cause is not sweep attack
	if metadata value "necromancer-entity-vengefulspirit" of victim is set:
		set {_hp} to metadata value "necromancer-entity-vengefulspirit" of victim
		subtract 1 from {_hp}
		if {_hp} <= 0:
			setDamageModification_FIX(victim, 100)
		else:
			setDamageModification_FIX(victim, 0.1)
			set metadata value "necromancer-entity-vengefulspirit" of victim to {_hp}
	else if metadata value "necromancer-entity-vengefulspirit" of {_attacker} is set:
		setDamageModification_FIX(victim, 0)
		applyEffect(victim, wither, 3, 20, true)

function kitSpawn_Necromancer_Ghost(player: player, loc: location, head: boolean):
	set {_chestplate} to leather chestplate
	set {_color} to rgb(0, 0, 0).asBukkitColor()

	set {_meta} to {_chestplate}.getItemMeta()
	{_meta}.setColor({_color})
	{_chestplate}.setItemMeta({_meta})

	if {_head} is true:
		set {_ghostHead} to player head
		set skull owner of {_ghostHead} to {_player}
	else:
		set {_ghostHead} to wither skeleton skull

	set {_mob} to kitSpawnMob({_player}, wither skeleton, {_loc}, false)
	
	setEntityArmor({_mob}, "helmet", {_ghostHead})
	setEntityArmor({_mob}, "chestplate", {_chestplate})
	setEntityArmor({_mob}, "leggings", air)
	setEntityArmor({_mob}, "boots", air)
	setEntityArmor({_mob}, "mainhand", air)
	setEntityArmor({_mob}, "offhand", air)

	applyEffect({_mob}, speed, 3, 12000, true, "none")
	applyEffect({_mob}, invisibility, 1, 12000, true, "none")

	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-ghost" of {_mob} to true
	wait 10 seconds
	if {_mob} is alive:
		kill {_mob}

on damage of wither skeleton with priority HIGHEST:
	metadata value "necromancer-entity-ghost" of victim is true
	setDamageModification_SET(victim, 100)

function kitAddNecromance(player: player, num: number):
	add {_num} to {Kit-Necromance::%{_player}%}
	kitEffectDescription({_player}, "§5Necromance")

function kitRemoveNecromance(player: player, skill: item):
	set {_lore::*} to lore of {_skill}
	loop {_lore::*}:
		loop-value contains "§5Necromance"
		set {_nec} to loop-value
	replace every "§5Necromance§8: §4" with "" in {_nec}
	set {_nec} to {_nec} parsed as number
	if kitPlayerWeaponItem({_player}, "Necromancer") is kitWeaponItem("Necromancer", 3):
		set {_nec} to round({_nec} * 0.9)
	subtract {_nec} from {Kit-Necromance::%{_player}%}

function kitCheckNecromance(player: player, skill: item) :: boolean:
	set {_lore::*} to lore of {_skill}
	loop {_lore::*}:
		loop-value contains "§5Necromance"
		set {_nec} to loop-value
	replace every "§5Necromance§8: §4" with "" in {_nec}
	set {_nec} to {_nec} parsed as number
	# if kitPlayerWeaponItem({_player}, "Necromancer", "main") is kitWeaponItem("Necromancer", 3, "main"):
	# 	set {_nec} to round({_nec} * 0.9)
	if {Kit-Necromance::%{_player}%} >= {_nec}:
		return true
	else:
		send action bar "§5§lNecromanceが不足しています!" to {_player}
		return false

function kitNecromanceItem(player: player, name: text) :: item:
	set {_tool} to {_player}'s tool
	set {_toolname} to display name of {_tool}
	set {_toolname} to unformatted {_toolname}
	set {_necitem} to {_tool} if {_toolname} is {_name}

	if {_necitem} is not set:
		loop all items in {_player}'s inventory:
			set {_toolname} to display name of loop-item
			set {_toolname} to unformatted {_toolname}
			if {_toolname} is {_name}:
				set {_necitem} to loop-item
	
	return {_necitem}

# Timer
function kitTimerNecromancer(player: player):
	if {Kit-Necromance::%{_player}%} is not set:
		set {Kit-Necromance::%{_player}%} to 0
	create bossbar titled "&5&lNecromance&0: &4&l%{Kit-Necromance::%{_player}%}%" and id "%{_player}%-Necromance" for {_player} with progress {Kit-Necromance::%{_player}%} with colors purple with style segmented 10
	while {Class::%{_player}%} is "Necromancer":
		add 1 to {_timer}  # Timer処理
		# --- Undead処理 ---
		if {_timer} >= 20:
			set {_timer} to 0
		if {_timer} = 0:
			loop all entities:
				metadata value "necromancer-entity-undead" of loop-entity is set
				set {_undeadtime} to metadata value "necromancer-entity-undead-timer" of loop-entity
				add 1 to {_undeadtime}
				set metadata value "necromancer-entity-undead-timer" of loop-entity to {_undeadtime}
				if mod({_undeadtime}, 10) = 0:
					subtract 1.2 from loop-entity's health
		# -----------------
		# --- Boss Bar処理 ---
		set bossbar "%{_player}%-Necromance" title to "&5&lNecromance&0: &4&l%{Kit-Necromance::%{_player}%}%"
		set bossbar "%{_player}%-Necromance" value to {Kit-Necromance::%{_player}%}
		# ---------------------
		# --- 死体発光処理 ---
		delete {_undetected}
		delete {_tg}
		set {_baseloc} to location of head of {_player}
		set {_m} to 0
		loop 10 times:
			if {_tg} is set:
				continue
			add 1 to {_m}
			set {_meterloc} to location {_m} meters in front of {_baseloc}
			loop all entities in radius 1.5 around {_meterloc}:
				checkEntityType(loop-entity, armor stand) is true
				metadata value "deadplayer" of loop-entity is set
				set {_tg} to loop-entity
		# --- 例外処理 ---
		if {_tg} is not set:
			set {_undetected} to true
		if {_undetected} is true:
			if {_targeted} is set:
				# --- 発光消滅処理 ---
				delete metadata value "targetdead.%{_player}%" of {_targeted}
				packetUnglowing({_player}, {_targeted})
				# ------------------
			delete {_targeted}
			wait a tick
			continue
		# ----------------
		packetGlowing({_player}, {_tg})
		if {_tg} is not {_targeted}:
			# --- 発光消滅処理 ---
			delete metadata value "targetdead.%{_player}%" of {_targeted}
			packetUnglowing({_player}, {_targeted})
			# ------------------
		set metadata value "targetdead.%{_player}%" of {_tg} to true
		set {_targeted} to {_tg}
		# ---------------------
		wait a tick
	remove bossbar "%{_player}%-Necromance"