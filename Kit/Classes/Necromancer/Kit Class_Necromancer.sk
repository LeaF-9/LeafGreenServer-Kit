# Necromancerのスキル Ver1.0.0

# Skills
on rightclick holding a zombie spawn egg:
	name of player's tool is "§5Summon Dead"
	cancel event
	if checkCT(player, name of tool of player) is true:
		setCT(player, name of player's tool, 60, false)
		kitMsg(player, "§5死者5体を召喚した...")
		playSound("entity.zombie.ambient", 1, 0.5, player)
		loop all blocks in radius 5 around player:
			y-coordinate of loop-block is y-coordinate of block at player
			add location of block 2 below loop-block to {_ls::*}
		loop 5 times:
			set {_l} to a random location out of {_ls::*}
			remove {_l} from {_ls::*}
			set {_z} to true
			chance of 20%:
				set {_z} to false
			if {_z} is true:
				set {_undead} to kitSpawn_Necromancer_Zombie(player, {_l})
			else:
				set {_undead} to kitSpawn_Necromancer_Skeleton(player, {_l})
			push {_undead} upwards at speed 0.85
			kitParticle_SummonDead({_l})

function kitParticle_SummonDead(baseloc: location):
	set {_addy} to 0
	loop 5 times:
		loop 5 times:
			set {_rad} to 0
			add 0.2 to {_addy}
			loop 10 times:
				add 36 to {_rad}
				set {_el} to {_baseloc}
				add 0.5 * sin({_rad}) to x-pos of {_el}
				add 0.5 * cos({_rad}) to z-pos of {_el}
				add {_addy} to y-pos of {_el}
				spawnParticle_Color(entity_effect, 100, 0, 100, {_el})
		wait a tick

function kitSkillNecromancer(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_tool}) is true:
		if {_item.num} is 1:
			kitSkill_Necromancer_1({_player})
		else if {_item.num} is 2:
			kitSkill_Necromancer_2({_player})
		else if {_item.num} is 3:
			kitSkill_Necromancer_3({_player})
		else if {_item.num} is 4:
			kitSkill_Necromancer_4({_player})
		else if {_item.num} is 5:
			kitSkill_Necromancer_5({_player})
		else if {_item.num} is 6:
			kitSkill_Necromancer_6({_player})
		else if {_item.num} is 7:
			kitSkill_Necromancer_7({_player})
		else if {_item.num} is 8:
			kitSkill_Necromancer_8({_player})
	return true

# Abilities
on death:
	if type of victim is not a player:  # 自分のMobが死亡した際の処理
		metadata value "gametype" of victim is "Kit"
		if metadata value "necromancer-entity" of victim is not set:
			stop
		set {_summoner} to metadata value "necromancer-entity" of victim
		kitAddNecromance({_summoner}, 1)
		if metadata value "sally-fatalities" of victim is set:
			kitSkill_SallyFatalities(victim)
	else:  # プレイヤーが死んだ際の処理
		metadata value "gametype" of victim is "Kit"
		if {Class::%victim%} is "Necromancer":
			if damage was caused by void:
				if {LastKiller::%victim%} is not set:
					stop
			if {Stats.%victim%::DumpSoul} is true:
				kitAddNecromance(victim, 5)
			else:
				kitAddNecromance(victim, 1)
				kitSpawn_Necromancer_Ghost(victim, location of victim, true)
		loop all players:
			{Stats.%loop-player%::DeathDetector} is true
			kitSkill_DeathDetector(loop-player)

on rightclick:
	{Class::%player%} is "Necromancer"
	set {_tool} to player's tool
	set {_item.type} to kitItemTypeChecker({_tool})
	set {_item.num} to kitItemNumberChecker({_tool})
	{_item.type} is "Weapon.main"
	set {_tg} to targeted entity
	{_tg} is set
	type of {_tg} is an armor stand
	distance between {_tg} and player <= 50
	metadata value "deadplayer" of {_tg} is set
	set {_dead} to metadata value "deadplayer" of {_tg}
	if {_item.num} is 3:
		kitAddNecromance(player, 3)
	else if {_item.num} is 2:
		kitWeapon_Necromancer_2(player)
	else if {_item.num} is 1:
		kitWeapon_Necromancer_1(player, location of {_tg})
	playSound("entity.zombie.infect", 1, 0.5, {_tg})
	playSound("entity.evoker.cast_spell", 1, 0.5, player, true)
	set {_dis} to round(distance between player and {_tg})
	loop all entities:
		type of loop-entity is an armor stand
		metadata value "deadplayer" of loop-entity is {_dead}
		delete loop-entity
	set {_baseloc} to location of player
	add 1 to y-coordinate of {_baseloc}
	loop {_dis} times:
		add 1 to {_num}
		set {_loc} to location {_num} meters in front of {_baseloc}
		spawnParticle_Dust(rgb(100, 0, 100), 1.25, {_loc})

command /necroset <number>:
	permission: sk.admin
	trigger:
		set {Kit-Necromance::%player%} to arg 1

function kitSpawn_Necromancer_Zombie(player: player, loc: location) :: entity:
	if {team::%{_player}%} is "red":
		set {_color} to "16711680"
	else if {team::%{_player}%} is "blue":
		set {_color} to "255"
	else if {team::%{_player}%} is "yellow":
		set {_color} to "16776960"
	else if {team::%{_player}%} is "green":
		set {_color} to "65280"
	else:
		set {_color} to "16711935"
	set {_nbt} to "{IsBaby:0,ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:leather_helmet"",tag:{display:{color:%{_color}%}},Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}]}"
	set {_mob} to kitSpawnMob_NBT({_player}, zombie, {_loc}, {_nbt})
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-undead" of {_mob} to "zombie"
	set max health of {_mob} to 3
	return {_mob}

function kitSpawn_Necromancer_Skeleton(player: player, loc: location) :: entity:
	if {team::%{_player}%} is "red":
		set {_color} to "16711680"
	else if {team::%{_player}%} is "blue":
		set {_color} to "255"
	else if {team::%{_player}%} is "yellow":
		set {_color} to "16776960"
	else if {team::%{_player}%} is "green":
		set {_color} to "65280"
	else:
		set {_color} to "16711935"
	set {_nbt} to "{ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:leather_helmet"",tag:{display:{color:%{_color}%}},Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}]}"
	set {_mob} to kitSpawnMob_NBT({_player}, skeleton, {_loc}, {_nbt})
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-undead" of {_mob} to "skeleton"
	set max health of {_mob} to 3
	return {_mob}

function kitSpawn_Necromancer_BabyZombie(player: player, loc: location):
	if {team::%{_player}%} is "red":
		set {_color} to "16711680"
	else if {team::%{_player}%} is "blue":
		set {_color} to "255"
	else if {team::%{_player}%} is "yellow":
		set {_color} to "16776960"
	else if {team::%{_player}%} is "green":
		set {_color} to "65280"
	else:
		set {_color} to "16711935"
	set {_nbt} to nbt compound from "{IsBaby:1,ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:leather_helmet"",tag:{display:{color:%{_color}%}},Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}]}"
	set {_mob} to kitSpawnMob_NBT({_player}, zombie, {_loc}, {_nbt})
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-babyzombie" of {_mob} to true

on damage:
	if metadata value "necromancer-entity-babyzombie" of victim is true:
		set damage to 10000
	else if metadata value "necromancer-entity-babyzombie" of attacker is true:
		set damage to 1

function kitSpawn_Necromancer_Grudge(player: player, loc: location):
	set {_nbt} to nbt compound from "{Silent:1,IsBaby:0,ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:player_head"",tag:{SkullOwner:{Id:[I;907160796,1821854615,-1727336627,-176309982],Properties:{textures:[{Value:""eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvZGFhOGZjOGRlNjQxN2I0OGQ0OGM4MGI0NDNjZjUzMjZlM2Q5ZGE0ZGJlOWIyNWZjZDQ5NTQ5ZDk2MTY4ZmMwIn19fQ==""}]}}},Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ActiveEffects:[{Id:2,Amplifier:2,Duration:999999},{Id:14,Amplifier:0,Duration:999999}]}"
	set {_mob} to kitSpawnMob_NBT({_player}, zombie, {_loc}, {_nbt})
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-grudgesoul" of {_mob} to true
	wait 30 seconds
	{_mob} is alive
	loop 5 times:
		set {_l} to aroundEffect({_mob})
		spawnParticle(smoke, {_l})
	loop all entities:
		loop-entity is {_mob}
		delete loop-entity

on damage:
	if metadata value "necromancer-entity-grudgesoul" of attacker is true:
		set damage to 1
	if metadata value "necromancer-entity-grudgesoul" of victim is true:
		cancel event
		if attacker is set:
			set {_victim} to metadata value "necromancer-entity" of victim
			kitCheckTeam({_victim}, attacker, false) is true
			applyEffect(attacker, wither, 1, 5 seconds, true)
		set {_el} to location of victim
		delete victim
		loop 20 times:
			spawnParticle(witch, {_el})
			wait a tick

function kitSpawn_Necromancer_Vengeful(player: player, loc: location):
	set {_nbt} to nbt compound from "{ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:leather_chestplate"",tag:{display:{color:16750230}},Count:1b},{id:""minecraft:zombie_head"",Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ActiveEffects:[{Id:1,Amplifier:0,Duration:999999},{Id:14,Amplifier:0,Duration:999999}]}"
	set {_mob} to kitSpawnMob_NBT({_player}, skeleton, {_loc}, {_nbt})
	set max health of {_mob} to 5
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-vengefulspirit" of {_mob} to 5

on damage:
	if metadata value "necromancer-entity-vengefulspirit" of victim is set:
		set {_hp} to metadata value "necromancer-entity-vengefulspirit" of victim
		subtract 1 from {_hp}
		if {_hp} <= 0:
			set damage to 10000
		else:
			set damage to 0.1
			set metadata value "necromancer-entity-vengefulspirit" of victim to {_hp}
	else if metadata value "necromancer-entity-vengefulspirit" of attacker is set:
		set damage to 0
		applyEffect(victim, wither, 3, 1 seconds, true)

function kitSpawn_Necromancer_Ghost(player: player, loc: location, head: boolean):
	if {_head} is true:
		set {_nbt} to nbt compound from "{ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:leather_chestplate"",tag:{display:{color:0}},Count:1b},{id:""minecraft:player_head"",tag:{SkullOwner:%{_player}%},Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ActiveEffects:[{Id:1,Amplifier:2,Duration:999999},{Id:5,Amplifier:4,Duration:999999},{Id:14,Amplifier:0,Duration:999999}]}"
	else:
		set {_nbt} to nbt compound from "{ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:leather_chestplate"",tag:{display:{color:0}},Count:1b},{id:""minecraft:wither_skeleton_skull"",Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ActiveEffects:[{Id:1,Amplifier:2,Duration:999999},{Id:5,Amplifier:4,Duration:999999},{Id:14,Amplifier:0,Duration:999999}]}"
	set {_mob} to kitSpawnMob_NBT({_player}, wither skeleton, {_loc}, {_nbt})
	set metadata value "necromancer-entity" of {_mob} to {_player}
	set metadata value "necromancer-entity-ghost" of {_mob} to true

on damage of wither skeleton:
	metadata value "necromancer-entity-ghost" of victim is true
	set damage to 100

function kitAddNecromance(player: player, num: number):
	if {Ult.%{_player}%::Necromancer} is true:
		add {_num} to {Ult.%{_player}%::Necromance}
	else:
		add {_num} to {Kit-Necromance::%{_player}%}

function kitRemoveNecromance(player: player, skill: item):
	set {_lore::*} to lore of {_skill}
	loop {_lore::*}:
		loop-value contains "§5Necromance"
		set {_nec} to loop-value
	replace every "§5Necromance§8: §4" with "" in {_nec}
	set {_nec} to {_nec} parsed as number
	if kitPlayerWeaponItem({_player}, "Necromancer", "main") is kitWeaponItem("Necromancer", 4, "main"):
		set {_nec} to round({_nec} * 0.7)
	subtract {_nec} from {Kit-Necromance::%{_player}%}

function kitCheckNecromance(player: player, skill: item) :: boolean:
	set {_lore::*} to lore of {_skill}
	loop {_lore::*}:
		loop-value contains "§5Necromance"
		set {_nec} to loop-value
	replace every "§5Necromance§8: §4" with "" in {_nec}
	set {_nec} to {_nec} parsed as number
	if kitPlayerWeaponItem({_player}, "Necromancer", "main") is kitWeaponItem("Necromancer", 4, "main"):
		set {_nec} to round({_nec} * 0.7)
	if {Kit-Necromance::%{_player}%} >= {_nec}:
		return true
	else:
		send action bar "§5§lNecromanceが不足しています!" to {_player}
		return false

function kitNecromanceItem(player: player, num: number, type: text = "Skill") :: item:
	set {_tool} to {_player}'s tool
	if kitItemAllChecker({_tool}, "Necromancer", {_type}, {_num}) is true:
		set {_necitem} to {_tool}
	else:
		loop all items in {_player}'s inventory:
			kitItemAllChecker(loop-item, "Necromancer", {_type}, {_num}) is true
			set {_necitem} to loop-item
	return {_necitem}

# Timer
function kitTimerNecromancer(player: player):
	if {Kit-Necromance::%{_player}%} is not set:
		set {Kit-Necromance::%{_player}%} to 0
	create bossbar titled "&5&lNecromance&0: &4&l%{Kit-Necromance::%{_player}%}%" and id "%{_player}%-Necromance" for {_player} with progress {Kit-Necromance::%{_player}%} with colors purple with style segmented 10
	while {Class::%{_player}%} is "Necromancer":
		add 1 to {_timer}  # Timer処理
		# --- Undead処理 ---
		if {_timer} >= 200:
			set {_timer} to 0
		if {_timer} = 0:
			loop all zombies:
				metadata value "necromancer-entity-undead" of loop-zombie is "zombie"
				subtract 1.2 from loop-zombie's health
			loop all skeletons:
				metadata value "necromancer-entity-undead" of loop-skeleton is "skeleton"
				subtract 1.2 from loop-skeleton's health
		# -----------------
		# --- Boss Bar処理 ---
		set bossbar "%{_player}%-Necromance" title to "&5&lNecromance&0: &4&l%{Kit-Necromance::%{_player}%}%"
		set bossbar "%{_player}%-Necromance" value to {Kit-Necromance::%{_player}%}
		# ---------------------
		# --- 死体発光処理 ---
		delete {_undetected}
		delete {_tg}
		set {_tg} to target entity of {_player}
		# --- 例外処理 ---
		if {_targeted} is not set:
			set {_undetected} to true
		if {_tg} is not set:
			set {_undetected} to true
		if type of {_tg} is not armor stand:
			set {_undetected} to true
		if metadata value "deadplayer" of {_tg} is not set:
			set {_undetected} to true
		if distance between {_tg} and {_player} > 50:
			set {_undetected} to true
		if {_undetected} is true:
			if {_targeted} is set:
				# --- 発光消滅処理 ---
				packetUnglowing({_player}, {_targeted})
				# ------------------
			delete {_targeted}
			wait a tick
			continue
		# ----------------
		packetGlowing({_player}, {_tg})
		if {_tg} is not {_targeted}:
			# --- 発光消滅処理 ---
			packetUnglowing({_player}, {_targeted})
			# ------------------
		set {_targeted} to {_tg}
		# ---------------------
		wait a tick
	remove bossbar "%{_player}%-Necromance"