# Respawn Controller

function kitEffect_RespawnController(player: player):
	set {_loc} to getKitStats({_player}, "SkillLocation")
	if {_loc} is not set:
		nullEngineerPlacePosition({_player})
		stop

	nameCT({_player}, "Respawn Controller")
	# 時間設定
	set {_now} to now
	setKitStats({_player}, "RespawnController-Time", {_now})

	# 機械削除
	kitFakeDeleteData({_player}, "Machine-Respawn Controller")
	# 位置設定
	set {_loc.base} to {_loc}
	set {_loc.core} to {_loc}
	set {_loc.top} to {_loc}
	add 1.5 to y-coordinate of {_loc.core}
	add 2 to y-coordinate of {_loc.top}

	# 機械設置
	set {_transformation::left_rotation} to getAxisAngle4f(0, 0, 0, 1)
	set {_transformation::right_rotation} to getAxisAngle4f(0, 0, 0, 1)
	set {_transformation::translation} to getVector3f(-0.4, -0.4, -0.4)
	set {_transformation::scale} to getVector3f(0.8, 0.8, 0.8)
	set {_block} to getBlockState(nether quartz ore)
	set {_coredisplay} to kitFakeBlock({_player}, {_loc.core}, {_block}, {_transformation::*}, "Machine-Respawn Controller")

	set {_transformation::translation} to getVector3f(-0.5, 0, -0.5)
	set {_transformation::scale} to getVector3f(1, 1, 1)
	set {_block} to getBlockState(nether brick fence)
	kitFakeBlock({_player}, {_loc.base}, {_block}, {_transformation::*}, "Machine-Respawn Controller")
	kitFakeBlock({_player}, {_loc.top}, {_block}, {_transformation::*}, "Machine-Respawn Controller")

	set {_loc.particle} to {_loc.base}
	add 1.5 to y-pos of {_loc.particle}
	setKitStats({_player}, "RespawnController-Location", {_loc.particle})  # 演出の基準となる地点を保存
	kitMsg({_player}, "<##7F1184>Respawn Controller§cを設置しました!")
	playSound("entity.evoker.prepare_attack", 1, 1.5, {_loc.base})

	# coreを回転させる関数
	kitEffect_RespawnController_Core({_player}, {_coredisplay})
	while getKitStats({_player}, "RespawnController-Time") is {_now}:
		wait 5 ticks
		delete {_tp::*}

		# 範囲内のプレイヤーに効果付与
		loop all players in radius 10 around {_loc.base}:
			kitCheckTeam(loop-player, {_player}, false) is true
			if getKitStats(loop-player, "RespawnController") is not set:  # 復活時間延長効果が付与されていない場合
				setKitStats(loop-player, "RespawnController", {_player})
				# 演出
				playSound("entity.evoker.cast_spell", 0.9, 1.4, loop-player)
				set {_el} to location of loop-player
				add 1 to y-coordinate of {_el}
				loop 10 times:
					spawnParticle_Vector(witch, randomVector(), 0.8, {_el})
				add loop-player to {_pl::*}  # 範囲内に入ったことがあるかどうか
			set {_tp::%loop-player%} to true  # 現在範囲内にいるかどうか
		
		# 範囲内に入ったプレイヤーかつ現在範囲内にいないプレイヤーを検知
		loop {_pl::*}:
			getKitStats(loop-value, "RespawnController") is {_player}
			{_tp::%loop-value%} is not set
			deleteKitStats(loop-value, "RespawnController")
			delete {_pl::%loop-index%}

		set {_exist} to kitFakeCheck({_player}, "Machine-Respawn Controller")
		if {_exist} is false:
			deleteKitStats({_player}, "RespawnController-Time")
			deleteKitStats({_player}, "RespawnController-Location")
			loop {_pl::*}:
				getKitStats(loop-value, "RespawnController") is {_player}
				deleteKitStats(loop-value, "RespawnController")

on death of player:
	set {_RespawnController} to getKitStats(victim, "RespawnController")
	{_RespawnController} is set
	set {_player} to {_RespawnController}
	if checkFuel({_player}, 6) is false:
		stop
	setKitStats(victim, "SpawnTime", 15)
	kitParticle_RespawnController_Launch({_player}, victim)



local function kitEffect_RespawnController_Core(player: player, display: entity):
	set {_now} to getKitStats({_player}, "RespawnController-Time")
	set {_yaw} to yaw of {_display}
	set {_rotate.yaw} to 20
	set {_add.yaw} to {_rotate.yaw} / 20

	set {_uping} to true
	set {_y} to y-pos of {_display}
	set {_y.base} to 0
	set {_y.move} to 0.1
	set {_y.edit} to {_y.move} / 20
	set {_y.max} to 0.1
	set {_y.min} to -0.1

	set {_ln} to 0
	while getKitStats({_player}, "RespawnController-Time") is {_now}:
		delete {_exist}
		loop all block displays:
			loop-block display is {_display}
			set {_exist} to true
		if {_exist} is not set:
			stop

		set {_baseloc} to location of {_display}
		set {_tploc} to {_baseloc}
		add {_add.yaw} to {_yaw}
		set yaw of {_tploc} to {_yaw}

		set {_y.add} to {_y.edit}
		if {_uping} is false:
			set {_y.add} to {_y.add} * (-1)

		add {_y.add} to {_y.base}
		set {_uping} to false if {_y.base} >= {_y.max}
		set {_uping} to true if {_y.base} <= {_y.min}
		set y-pos of {_tploc} to {_y} + {_y.base}

		teleport {_display} to {_tploc}
		wait a tick



local function kitParticle_RespawnController_Launch(player: player, target: player):
	set {_baseloc} to getKitStats({_player}, "RespawnController-Location")

	# ビームの照射
	set {_targetloc} to location 1 meter above {_target}
	kitParticle_RespawnController_Beam({_baseloc}, {_targetloc})

	# 対象に機械の位置を開示
	kitParticle_RespawnController_Expose({_player}, {_target})

	# 対象にメッセージ
	message formatted "§5機械により §9§l復活時間が延長 §5されました..." to {_target}



local function kitParticle_RespawnController_Beam(baseloc: location, targetloc: location):
	playSound("entity.evoker.prepare_wololo", 1, 1.15, {_targetloc})

	set {_vector} to setVector({_baseloc}, {_targetloc})
	set {_baseloc} to setDirToVec({_baseloc}, {_vector})
	
	set {_distance} to distance between {_baseloc} and {_targetloc}
	set {_loop} to round({_distance} * 2)

	loop 20 times:
		loop {_loop} times:
			set {_ln} to loop-number-2
			set {_el} to location {_ln} * 0.5 meters in front of {_baseloc}
			spawnParticle(witch, {_el})
		wait a tick



local function kitParticle_RespawnController_Expose(player: player, target: player):
	# 発光させる機械の保存
	loop all block displays:
		metadata value "kit-block" of loop-block display is "Machine-Respawn Controller"
		metadata value "Machine-Respawn Controller" of loop-block displays is {_player}
		add loop-block display to {_machines::*}
	
	loop 400 times:
		loop {_machines::*}:
			set {_machine} to loop-value-2
			packetGlowing({_target}, {_machine})
		wait a tick
	
	loop {_machines::*}:
		set {_machine} to loop-value
		packetUnglowing({_target}, {_machine})