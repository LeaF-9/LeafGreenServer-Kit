# Weapon-Name: Cyber Lance

on damage:
	{Class::%attacker%} is "Engineer"
	set {_tool} to attacker's tool
	if kitItemAllChecker({_tool}, "Engineer", "Weapon.main", 2) is false:
		stop
	if {Stats.%attacker%::CyberLance-Energy} is not set:
		stop
	set {_energy} to {Stats.%attacker%::CyberLance-Energy}
	delete {Stats.%attacker%::CyberLance-Energy}
	delete {Stats.%attacker%::CyberLance-Saving}
	set {_energy.calc} to {_energy} / 20
	set {_fuel} to round({_energy.calc} * 10)
	if {Kit-Fuel::%{_player}%} < {_fuel}:
		stop
	setFuelCT(attacker)
	subtract {_fuel} from {Kit-Fuel::%attacker%}
	kitParticle_CyberLance_Attack(attacker, victim, {_energy.calc})
	set {_damage.add} to 0.25 * {_energy.calc}
	set damage to damage + {_damage.add}
	loop all players in radius 10 * {_energy.calc} around victim:
		kitCheckTeam(victim, loop-player, true) is true
		kitParticle_CyberLance_Trail(victim. loop-player)
		kitTrail(loop-player, 10 seconds)

on sneak toggle:
	{Class::%player%} is "Engineer"
	player is not sneaking
	set {_tool} to player's tool
	if kitItemAllChecker({_tool}, "Engineer", "Weapon.main", 2) is false:
		stop
	# Energyセット
	if {Stats.%player%::CyberLance-Energy} is not set:
		set {Stats.%player%::CyberLance-Energy} to 0
	set {_now} to now
	set {Stats.%player%::CyberLance-Saving} to {_now}
	wait a tick
	set {_true} to false
	while {_true} is false:
		set {_tool} to player's tool
		# スニーク解除 (Energy保持)
		if player is not sneaking:
			set {_true} to true
			continue
		# ツール変更 (Energy消去)
		else if kitItemAllChecker({_tool}, "Engineer", "Weapon.main", 2) is false:
			delete {_true}
			continue
		# Energy満タン (Energy保持)
		else if {Stats.%player%::CyberLance-Energy} >= 100:
			set {Stats.%player%::CyberLance-Energy} to 100
			set {_true} to true
			continue
		# Energy処理
		add 1 to {Stats.%player%::CyberLance-Energy}
		# Action Bar処理
		set {_linenum} to round({Stats.%player%::CyberLance-Energy} / 2)
		chargeActionBar(player, {_linenum}, 50)
		# チャージ中サウンド
		set {_soundpitch} to {Stats.%player%::CyberLance-Energy} / 75 + 0.5
		playSound("item.armor.equip_chain", 0.5, {_soundpitch}, player)
		# チャージ中のパーティクル
		kitParticle_CyberLance_Charge(player)
		wait a tick
	if {_true} is not true:
		delete {Stats.%player%::CyberLance-Energy}
		send action bar "§e§lEnergy§cは消滅しました" to player
		stop
	set {_savingtime} to 0
	# チャージ完了時のパーティクル
	kitParticle_CyberLance_Complete(player)
	# チャージ完了時の音
	playSound("entity.villager.work_weaponsmith", 1, 2, player)
	# チャージ保持時間
	while {_true} is true:
		add 1 to {_savingtime}
		set {_tool} to player's tool
		# ツール変更 (Energy削除)
		if kitItemAllChecker({_tool}, "Engineer", "Weapon.main", 2) is false:
			delete {Stats.%player%::CyberLance-Energy}
			delete {Stats.%player%::CyberLance-Saving}
			stop
		# 再チャージ (処理ストップ)
		if {Stats.%player%::CyberLance-Saving} is not {_now}:
			stop
		# savingtime超過
		if {_savingtime} > 20:
			set {_true} to false
			continue
		# Action Bar処理
		set {_linenum} to round({Stats.%player%::CyberLance-Energy} / 2)
		chargeActionBar(player, {_linenum}, 50)
		# 保持中のパーティクル演出
		kitParticle_CyberLance_Saving(player)
		wait a tick
	while {Stats.%player%::CyberLance-Energy} > 0:
		# ツール変更 (Energy削除)
		set {_tool} to player's tool
		if kitItemAllChecker({_tool}, "Engineer", "Weapon.main", 2) is false:
			delete {Stats.%player%::CyberLance-Energy}
			delete {Stats.%player%::CyberLance-Saving}
			stop
		# 再チャージ (処理ストップ)
		if {Stats.%player%::CyberLance-Saving} is not {_now}:
			stop
		# 減少処理
		subtract 1 from {Stats.%player%::CyberLance-Energy}
		# Action Bar処理
		set {_linenum} to round({Stats.%player%::CyberLance-Energy} / 2)
		chargeActionBar(player, {_linenum}, 50)
		wait a tick

function kitParticle_CyberLance_Attack(player: player, target: entity, power: number):
	# 電気っぽい音
	playSound("entity.allay.hurt", 1.25, 1.25, {_target})
	# from-to直線
	set {_from} to location of {_player}
	set {_to} to location of {_target}
	set {_v} to setVector({_from}, {_to})
	set yaw of {_from} to yaw of {_v}
	set pitch of {_from} to pitch of {_v}
	set {_num.distance} to round(distance between {_player} and {_target})
	loop {_num.distance} times:
		set {_el} to location loop-number meters in front of {_from}
		spanwParticle(end_rod, {_el})
	# toに円形爆風
	set {_s} to 0
	set {_t} to 0
	loop 10 time:
		loop 18 time:
			set {_el} to {_from}
			set {_vector} to {_el}
			set {_x} to x-coordinate of {_el}
			set {_y} to y-coordinate of {_el}
			set {_z} to z-coordinate of {_el}
			set x-coordinate of {_vector} to {_x} + ( {_power} * sin({_s}) * cos({_t}) )
			set y-coordinate of {_vector} to {_y} + ( {_power} * cos({_s}) )
			set z-coordinate of {_vector} to {_z} + ( {_power} * sin({_s}) * sin({_t}) )
			spawnParticle_DustTransition(rgb(255, 255, 255), rgb(255, 255, 0), 3, {_vector})
			add 20 to {_t}
		add 20 to {_s}
	# 円形爆風にランダム位置の支柱
	loop 10 times:
		set {_to} to location of {_target}
		add a random number between -1 and 1 to x-pos of {_to}
		add a random number between -1 and 1 to y-pos of {_to}
		add a random number between -1 and 1 to z-pos of {_to}
		set {_v} to setVector({_from}, {_to})
		set yaw of {_from} to yaw of {_v}
		set pitch of {_from} to pitch of {_v}
		set {_ln}
		loop round({_power} * 5) times:
			add 0.2 to {_ln}
			set {_el} to location {_ln} meters in front of {_from}
			spawnParticle_Dust(rgb(255, 255, 0), 1, {_el})

function kitParticle_CyberLance_Trail(player.from: entity, player.to: player):
	# from-to Vibration
	set {_loc.from} to location of {_player.from}
	set {_loc.to} to location of {_player.to}
	spawnParticle_Vibration({_loc.to}, 1 second, {_loc.from})

function kitParticle_CyberLance_Charge(player: player):
	set {_baseloc} to aroundEffect({_player})
	loop 5 times:
		set {_el} to location 0.2 * loop-number meters above {_baseloc}
		spawnParticle_DustTransition(rgb(255, 250, 205), rgb(255, 250, 0), 0.1, {_el})
		wait a tick

function kitParticle_CyberLance_Complete(player: player):
	set {_baseloc} to location 1 meter above {_player}
	loop 20 times:
		set {_v} to randomVector({_baseloc})
		spawnParticle_Vector(wax_off, {_v}, 0.3, {_baseloc})


function kitParticle_CyberLance_Saving(player: player):
	set {_el} to aroundEffect({_player})
	spawnParticle(falling_nectar, {_el})