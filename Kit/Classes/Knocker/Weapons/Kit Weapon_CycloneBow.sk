# Cyclone Bow

on shoot:
	metadata value "gametype" of shooter is "Kit"
	{Class::%shooter%} is "Knocker"
	set {_tool} to shooter's tool
	kitItemAllChecker({_tool}, "Knocker", "Weapon", 3) is true
	if shooter is sneaking:
		kitEffect_CycloneBow_Blast(shooter, projectile)
	else:
		kitEffect_CycloneBow_Cyclone(shooter, projectile)

on projectile hit:
	if metadata value "cyclone-bow-blast" of projectile is true:
		set metadata value "cyclone-bow-blast" of projectile to false
	if metadata value "cyclone-bow" of projectile is true:
		set metadata value "cyclone-bow" of projectile to false

on damage with priority LOW:
	damage was caused by projectile
	metadata value "cyclone-bow-blast" of projectile is set
	setDamageModification_SET(victim, 3)
	kitParticle_CycloneBow_BlastHit(victim)

local function kitEffect_CycloneBow_Blast(player: player, proj: projectile):
	# 矢の数確認
	set {_arrow} to amount of arrow in {_player}'s inventory
	if {_arrow} < 2:
		stop
	loop 1 times:
		remove an arrow from {_player}
	set metadata value "cyclone-bow-blast" of {_proj} to true
	kitParticle_CycloneBow_Blast({_player}, {_proj})
	set {_vector} to setVector(location of {_player}, location 100 meters in front of {_player}, 5)
	loop 100 times:
		metadata value "cyclone-bow-blast" of {_proj} is true
		set velocity of {_proj} to {_vector}
		wait a tick

local function kitEffect_CycloneBow_Cyclone(player: player, proj: projectile):
	# フルチャージ確認
	set {_pow} to getBowDrawTime({_player})
	if {_pow} < 24:
		stop
	# 矢の数確認
	set {_arrow} to amount of arrow in {_player}'s inventory
	if {_arrow} < 3:
		stop
	loop 2 times:
		remove an arrow from {_player}
	set {_dmg} to 1
	set metadata value "cyclone-bow" of {_proj} to true
	kitParticle_CycloneBow_Cyclone({_player}, {_proj})
	loop 100 times:
		if metadata value "cyclone-bow" of {_proj} is false:
			stop
		set {_exist} to false
		loop all projectiles:
			loop-projectile is {_proj}
			set {_exist} to true
		if {_exist} is false:
			stop

		loop all entities in radius 3 around {_proj}:
			kitCheckTeam({_player}, loop-entity, false) is true
			kitDamage({_player}, loop-entity, {_dmg}, "突風の矢")
			set {_vector} to setVector(location of {_proj}, location of loop-entity)
			set velocity of loop-entity to {_vector}
		wait a tick

local function kitParticle_CycloneBow_Blast(player: player, proj: projectile):
	playSound("entity.blaze.hurt", 1, 1.3, location of {_proj})
	set {_yaw} to yaw of {_player}
	set {_pitch} to pitch of {_player}
	loop 100 times:
		if metadata value "cyclone-bow-blast" of {_proj} is false:
			continue
		set {_baseloc} to location of {_proj}
		set yaw of {_baseloc} to {_yaw}
		set pitch of {_baseloc} to {_pitch}
		set {_els::*} to particleLocation_CircleV({_baseloc}, 10, 0.5)
		loop {_els::*}:
			spawnParticle_Dust(rgb(174, 224, 230), 0.6, loop-value-2)
		wait a tick

local function kitParticle_CycloneBow_Cyclone(player: player, proj: projectile):
	playSound("entity.wither.shoot", 1, 1.6, location of {_proj})
	set {_yaw} to yaw of {_player} + 180
	set {_pitch} to pitch of {_player} * -1
	loop 100 times:
		if metadata value "cyclone-bow" of {_proj} is false:
			continue
		playSound("entity.wither.shoot", 0.75, 1.9, location of {_proj})
		set {_baseloc} to location of {_proj}
		set yaw of {_baseloc} to {_yaw}
		set pitch of {_baseloc} to {_pitch}
		set {_baseloc} to location 1.5 meters behind {_baseloc}
		set {_els::*} to particleLocation_TornadoV({_baseloc}, 10, 0.5, 0.5, 3, loop-number * 10)
		loop {_els::*}:
			spawnParticle_Dust(rgb(174, 224, 230), 0.85, loop-value-2)
		wait a tick

local function kitParticle_CycloneBow_BlastHit(player: player):
	playSound("entity.dragon_fireball.explode", 1, 2, {_player})
	spawnParticle(explosion_emitter, {_player})