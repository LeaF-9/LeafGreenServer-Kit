# Sanguine Bog

on projectile hit:
	projectile is a snowball
	metadata value "sanguine-bog-generator" of projectile is true
	set metadata value "sanguine-bog-generator" of projectile to false
	kitEFfect_SanguineBog_Generate(shooter, location of projectile)



function kitEffect_SanguineBog(player: player):
	nameCT({_player}, "Sanguine Bog")
	kitMsg({_player}, "§4血の池§cを生成する§4§l血痕弾§cを発射します...")
	shoot a snowball from {_player} at speed 1.5
	set item of shot snowball to redstone block
	set metadata value "sanguine-bog-generator" of shot snowball to true
	kitParticle_SanguineBog_Projectile({_player}, shot snowball)

local function kitEFfect_SanguineBog_Generate(player: player, loc: location):
	kitParticle_SanguineBog_Prepare({_loc})
	wait a second
	loop all players in radius 10 around {_loc}:
		kitCheckTeam(loop-player, {_player}, false) is true
		kitBlood(loop-player)
		kitEffectDescription(loop-player, "§4出血")
		kitParticle_SanguineBog_Bleed(loop-player)
	kitParticle_SanguineBog_Red({_loc})
	loop 60 times:
		set {_ln} to loop-number
		loop all players in radius 10 around {_loc}:
			kitCheckTeam(loop-player, {_player}, false) is true
			getDebuffs(loop-player, "Blood") is true
			kitParticle_SanguineBog_Captured(loop-player)
			apply slowness 3 to loop-player for a tick
			if mod({_ln}, 5) = 0:
				set {_vector} to vector(0, -1, 0)
				set velocity of loop-player to {_vector}
		wait a tick



local function kitParticle_SanguineBog_Projectile(player: player, proj: entity):
	playSound("entity.zombie.step", 1, 1.1, {_player})
	loop 100 times:
		if metadata value "sanguine-bog-generator" of {_proj} is false:
			stop
		loop 5 times:
			set {_projl} to location of {_proj}
			set {_el} to moveRandomLocation({_projl}, 1)
			spawnParticle_BlockData(falling_dust, red wool, {_el})
		wait a tick

local function kitParticle_SanguineBog_Prepare(loc: location):
	playSound("block.portal.trigger", 1, 2, {_loc})
	set {_now} to now
	loop 30 times:
		set {_dl} to {_loc}
		add {_add.x} to x-pos of {_dl}
		add {_add.z} to z-pos of {_dl}
		drop a redstone block at {_dl}
		set{_dropItem} to last dropped item
		set metadata value "gametype" of {_dropItem} to "Kit"
		set metadata value "sanguine-bog" of {_dropItem} to {_now}
		kitParticle_SanguineBog_Generate({_dropItem})
	set {_to} to location 15 meters above {_loc}
	loop 20 times:
		loop all entities:
			metadata value "gametype" of loop-entity is "Kit"
			metadata value "sanguine-bog" of loop-entity is {_now}
			set {_from} to location of loop-entity
			set {_vector} to setVector({_from}, {_to}, 0.7)
			set velocity of loop-entity to {_vector}
		loop 10 times:
			set {_el} to moveRandomLocation({_loc}, 1)
			spawnParticle_Color(entity_effect, rgb(200, 1, 37), {_el})
		wait a tick
	playSound("block.respawn_anchor.charge", 1, 0.5, {_loc})
	kitParticle_SanguineBog_Bog({_loc})
	loop all entities:
		metadata value "gametype" of loop-entity is "Kit"
		metadata value "sanguine-bog" of loop-entity is {_now}
		set {_power.n} to a random number between -1 and 1
		set {_power.e} to a random number between -1 and 1
		set {_power.d} to a random number between 0 and 2
		push loop-entity north at speed {_power.n}
		push loop-entity east at speed {_power.e}
		push loop-entity downwards at speed {_power.d}
	wait a second
	loop all entities:
		metadata value "gametype" of loop-entity is "Kit"
		metadata value "sanguine-bog" of loop-entity is {_now}
		delete loop-entity

local function kitParticle_SanguineBog_Generate(entity: entity):
	loop 40 times:
		spawnParticle_Dust(rgb(100, 1, 37), 1, {_entity})
		wait a tick

local function kitParticle_SanguineBog_Bog(loc: location):
	set {_y} to 15
	set {_rad} to 0
	set {_len} to 0
	loop 15 times:
		loop 9 times:
			add 10 to {_rad}
			subtract 0.1 from {_y}
			add 0.07 to {_len}

			set {_vec} to vector({_len}, 0, 0)
			rotate {_vec} around y-axis by {_rad}
			set {_el} to {_loc} ~ {_vec}
			add {_y} to y-pos of {_el}
			spawnParticle_Color(entity_effect, rgb(200, 1, 37), {_el})
		wait a tick

local function kitParticle_SanguineBog_Bleed(player: player):
	set {_pel} to location of {_player}
	add 1 to y-pos of {_pel}
	set pitch of {_pel} to 0
	loop 6 times:
		add 60 to yaw of {_pel}
		set {_m} to 0
		loop 3 times:
			add 1 to {_m}
			set {_plel} to location {_m} meters in front of {_pel}
			spawnParticle_Color(entity_effect, rgb(200, 1, 37), {_plel})

local function kitParticle_SanguineBog_Red(loc: location):
	add rgb(200, 1, 37) to {_colors::*}
	add rgb(231, 46, 80) to {_colors::*}
	add rgb(212, 33, 33) to {_colors::*}

	loop 60 times:
		if mod(61 - loop-number, 20) = 0:
			playSound("block.lava.ambient", 1, 2, {_loc})
		loop 3 times:
			set {_m} to a random number between 0 and 10
			set {_rad} to a random number between 0 and 360
			set {_drad} to a random number between 10 and 30
			loop 5 times:
				set {_vec} to vector({_m}, 0, 0)
				rotate {_vec} around y-axis by {_rad}
				set {_el} to {_loc} ~ {_vec}

				set {_color} to a random element out of {_colors::*}
				spawnParticle_Dust({_color}, 2, {_el})
				add {_drad} to {_rad}
		wait a tick

local function kitParticle_SanguineBog_Captured(player: player):
	chance of 10%:
		playSound("block.bubble_column.bubble_pop", 1, 0.6, {_player})
	set {_el} to aroundEffect({_player})
	spawnParticle_BlockData(falling_dust, redstone block, {_el})