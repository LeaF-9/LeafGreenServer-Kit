# Voodoo Doll

import:
	com.destroystokyo.paper.entity.Pathfinder
	com.destroystokyo.paper.entity.Pathfinder$PathResult

function kitEffect_VoodooDoll(player: player):
	set {_SkillTarget} to getKitStats({_player}, "SkillTarget")
	if {_SkillTarget} is not set:
		send action bar "§c§l対象が存在しません!" to {_player}
		stop

	# PathFinder
	set {_canReach} to kitEffect_VoodooDoll_Pathfind({_player}, {_SkillTarget})
	if {_canReach} is false:
		send action bar "§c§l到達不可の地点には設置できません!" to {_player}
		set {_tool} to tool of {_player}
		set item cooldown of {_tool} for {_player} to 1 second
		stop

	if kitCheckSpirit({_player}, "Voodoo Doll") is false:
		stop

	nameCT({_player}, "Voodoo Doll")
	if getKitStats({_player}, "VoodooDoll") is set:
		deleteKitStats({_player}, "VoodooDoll")
		loop all entities:
			type of loop-entity is an armor stand
			metadata value "gametype" of loop-entity is "Kit"
			metadata value "Kit-VoodooDoll" of loop-entity is "%{_player}%"
			delete loop-entity
	set {_tg} to {_SkillTarget}
	set {_memsg} to kitGhostMessage("§5%{_tg}% §2の藁人形を生成した...", true)
	set {_youmsg} to kitGhostMessage("§4自分の藁人形が作成された! §6壊しに行こう!", true)
	kitMsg({_player}, {_memsg})
	message formatted {_youmsg} to {_tg}
	kitEffectDescription({_tg}, "§5§l藁人形の呪術")
	playSound("entity.villager.work_fletcher", 1, 0.5, {_player})
	set {_armorloc} to location of {_player}
	set {_now} to now
	spawn an armor stand at location of {_player}
	set metadata value "gametype" of spawned armor stand to "Kit"
	set metadata value "Kit-VoodooDoll" of spawned armor stand to "%{_player}%"
	set metadata value "Kit-VoodooTime" of spawned armor stand to "%{_now}%"
	set helmet of spawned armor stand to skull of {_tg}
	setKitStats({_player}, "VoodooDoll", {_now})
	set {_vector} to setVector(location of {_tg}, location of {_player})
	set {_effbaseloc} to location of head of {_tg}
	set yaw of {_effbaseloc} to yaw of {_vector}
	set pitch of {_effbaseloc} to pitch of {_vector}
	set {_t} to round(distance between {_player} and {_tg})
	loop {_t} times:
		set {_el} to location loop-number meters in front of {_effbaseloc}
		spawnParticle(end_rod, {_el})
	while getKitStats({_player}, "VoodooDoll") is {_now}:
		delete {_exist}
		if {_tg} does not have potion wither:
			apply wither 1 to {_tg} for 10 seconds
		loop all entities:
			type of loop-entity is an armor stand
			metadata value "gametype" of loop-entity is "Kit"
			metadata value "Kit-VoodooDoll" of loop-entity is "%{_player}%"
			metadata value "Kit-VoodooTime" of loop-entity is "%{_now}%"
			set {_exist} to true
			set {_armortarget} to loop-entity
			set {_id} to id of loop-entity
			set {_el} to aroundEffect(loop-entity)
			spawnParticle(soul, {_el})
		if {Class::%{_tg}%} is not set:
			delete {_exist}
			deleteKitStats({_player}, "VoodooDoll")
		if {_exist} is true:
			packetGlowing({_tg}, {_armortarget})
		else:
			packetUnglowing({_tg}, {_armortarget})
			deleteKitStats({_player}, "VoodooDoll")
		wait a tick
	remove wither from {_tg}
	loop all entities:
		type of loop-entity is an armor stand
		metadata value "gametype" of loop-entity is "Kit"
		metadata value "Kit-VoodooDoll" of loop-entity is "%{_player}%"
		metadata value "Kit-VoodooTime" of loop-entity is "%{_now}%"
		delete loop-entity

on damage of armor stand:
	attacker is set
	metadata value "Kit-VoodooDoll" of victim is set
	set {_player} to metadata value "Kit-VoodooDoll" of victim parsed as player
	if kitCheckTeam(attacker, {_player}, false) is true:
		deleteKitStats({_player}, "VoodooDoll")
		set {_memsg} to kitGhostMessage("§5藁人形が破壊された!", true)
		kitMsg({_player}, {_memsg})
		delete victim

local function kitEffect_VoodooDoll_Pathfind(player: player, target: player, count: number = 10000) :: boolean:
	set {_start} to location of block at {_target}
	set {_goal} to location of block at {_player}

	if {_start} is {_goal}:
		return true

	set {_score} to h({_start}, {_goal})
	set {_open::sorted::%{_score}%} to {_score}
	set {_open::sorted::%{_score}%::%{_start}%} to {_start}
	set {_open::list::%{_start}%} to true
	set {_score::%{_start}%} to {_score}

	while {_open::list::*} is set:
		add 1 to {_process}
		if {_process} > {_count}:
			stop loop

		if {_found} is set:
			stop loop

		set {_first} to first element out of {_open::sorted::*}
		set {_parent} to first element out of {_open::sorted::%{_first}%::*}

		set {_score} to {_score::%{_parent}%}
		set {_h1} to h({_parent}, {_goal})
		set {_g} to {_score} - {_h1}

		delete {_open::list::%{_parent}%}
		delete {_open::sorted::%{_first}%::%{_parent}%}
		if {_open::sorted::%{_first}%::*} is not set:
			delete {_open::sorted::%{_first}%}

		set {_close::%{_parent}%} to {_score}

		loop all blocks in radius 1.8 around {_parent}:
			add 1 to {_process}
			if {_process} > {_count}:
				stop loop

			set {_child} to location of loop-block
			{_parent} is not {_child}

			#conditions
			if pass({_child}) is false:
				continue

			if pass(block above {_child}) is false:
				continue

			if pass(block under {_child}) is true:
				if y-pos of {_start} < y-pos of {_child}:
					continue

				if pass(block under {_parent}) is true:
					y-pos of {_parent} <= y-pos of {_child}
					continue

			if {_child} is {_goal}:
				set {_found} to {_child}
				stop loop

			set {_h2} to h({_child}, {_goal})
			set {_cost} to distance between {_parent} and {_child}

			set {_v2} to {_g} + {_cost} + {_h2}
			delete {_v1}
			set {_v1} to {_score::%{_child}%}

			if {_open::list::%{_child}%} is set:
				if {_v2} < {_v1}:
					set {_score} to {_score::%{_child}%}
					delete {_open::sorted::%{_score}%::%{_child}%}
					if {_open::sorted::%{_score}%::*} is not set:
						delete {_open::sorted::%{_score}%}

					set {_open::list::%{_child}%} to true
					set {_open::sorted::%{_v2}%::%{_child}%} to {_child}
					set {_open::sorted::%{_v2}%} to {_v2}
					set {_score::%{_child}%} to {_v2}

			else if {_close::%{_child}%} is set:
				if {_v2} < {_v1}:
					delete {_close::%{_child}%}

					set {_open::list::%{_child}%} to true
					set {_open::sorted::%{_v2}%::%{_child}%} to {_child}
					set {_open::sorted::%{_v2}%} to {_v2}
					set {_score::%{_child}%} to {_v2}

			else:
				set {_open::list::%{_child}%} to true
				set {_open::sorted::%{_v2}%::%{_child}%} to {_child}
				set {_open::sorted::%{_v2}%} to {_v2}
				set {_score::%{_child}%} to {_v2}

	if {_found} is set:
		return true
	return false

local function h(n: location, m: location) :: number:
	set {_v} to vector between {_n} and {_m}
	set {_v} to {_v} * {_v}
	return vector length of {_v} / 1.5

local function pass(pos: location) :: boolean:
	if block at {_pos} is passable:
		return true
	return false