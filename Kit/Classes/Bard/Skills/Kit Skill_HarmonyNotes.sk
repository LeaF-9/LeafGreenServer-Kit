# skill-name: Harmony Notes

function kitEffect_HarmonyNotes(player: player):
	nameCT({_player}, "Harmony Notes")
	kitMsg({_player}, "§d調和を保つ音符を発射します...")
	sendTimeBossbar_GREEN({_player}, "Harmony Notes", 200)
	set {_playerloc} to location of head of {_player}
	set {_targetloc} to location 10 meters in front of {_playerloc}
	set {_vector.notes} to setVector({_playerloc}, {_targetloc})
	set {_loc.notes} to {_playerloc}
	kitParticle_HarmonyNotes_Launch({_loc.notes})
	loop 200 times:
		# vector adjusting
		set {_loc.temp} to location 0.1 meters in front of {_loc.notes}
		delete {_direction::*}
		# ceil
		if block at location 0.5 meters above {_loc.temp} is not passable:
			if y of {_vector.notes} > 0:
				set {_direction::ceil} to true
		# floor
		if block at location 0.5 meters below {_loc.temp} is not passable:
			if y of {_vector.notes} < 0:
				set {_direction::floor} to true
		# north
		if block at location 0.5 meters north of {_loc.temp} is not passable:
			if z of {_vector.notes} < 0:
				set {_direction::north} to true
		# south
		if block at location 0.5 meters south of {_loc.temp} is not passable:
			if z of {_vector.notes} > 0:
				set {_direction::south} to true
		# east
		if block at location 0.5 meters east of {_loc.temp} is not passable:
			if x of {_vector.notes} > 0:
				set {_direction::east} to true
		# west
		if block at location 0.5 meters west of {_loc.temp} is not passable:
			if x of {_vector.notes} < 0:
				set {_direction::west} to true
		# ceil-floor (y)
		if {_direction::ceil} is true:
			set y of {_vector.notes} to y of {_vector.notes} * -1
			if {_direction::floor} is true:
				set y of {_vector.notes} to 0
			else:
				kitParticle_HarmonyNotes_Wave({_loc.temp}, location 0.5 meters above {_loc.temp})
		else if {_direction::floor} is true:
			set y of {_vector.notes} to y of {_vector.notes} * -1
			kitParticle_HarmonyNotes_Wave({_loc.temp}, location 0.5 meters below {_loc.temp})
		# north-south (z)
		if {_direction::north} is true:
			set z of {_vector.notes} to z of {_vector.notes} * -1
			if {_direction::south} is true:
				set z of {_vector.notes} to 0
			else:
				kitParticle_HarmonyNotes_Wave({_loc.temp}, location 0.5 meters north of {_loc.temp})
		else if {_direction::south} is true:
			set z of {_vector.notes} to z of {_vector.notes} * -1
			kitParticle_HarmonyNotes_Wave({_loc.temp}, location 0.5 meters south of {_loc.temp})
		# east-west (x)
		if {_direction::east} is true:
			set x of {_vector.notes} to x of {_vector.notes} * -1
			if {_direction::west} is true:
				set x of {_vector.notes} to 0
			else:
				kitParticle_HarmonyNotes_Wave({_loc.temp}, location 0.5 meters east of {_loc.temp})
		if {_direction::west} is true:
			set x of {_vector.notes} to x of {_vector.notes} * -1
			kitParticle_HarmonyNotes_Wave({_loc.temp}, location 0.5 meters west of {_loc.temp})
		# direction deciding
		set {_loc.notes} to setDirToVec({_loc.notes}, {_vector.notes})
		# location deciding
		set {_loc.notes} to location 0.1 meters in front of {_loc.notes}
		kitParticle_HarmonyNotes_Sphere({_loc.notes})
		# effects
		set {_tier} to 1
		if getKitStats({_player}, "Fortissimo") is true:
			set {_tier} to 2
		
		set {_limit} to 5
		loop all entities in radius 5 around {_loc.notes}:
			if {_limit} <= 0:
				continue

			set {_loc.player} to location 1 meter above loop-entity
			if kitCheckTeam(loop-entity, {_player}, true) is true:
				setSupporter(loop-entity, {_player})
				kitParticle_HarmonyNotes_Beam({_loc.notes}, {_loc.player}, true)
				kitEffectDescription(loop-entity, "§d§l再生能力")
				set {_potiontype} to regeneration
			else if kitCheckTeam(loop-entity, {_player}, false) is true:
				kitParticle_HarmonyNotes_Beam({_loc.notes}, {_loc.player}, false)
				add {_player} to {damager.%loop-entity%::*}
				set {_potiontype} to poison
				kitEffectDescription(loop-entity, "§2§l毒")
			subtract 1 from {_limit}
			applyEffect(loop-entity, {_potiontype}, {_tier}, 2)
		wait a tick
	kitParticle_HarmonyNotes_Explode({_loc.notes})



local function kitParticle_HarmonyNotes_Launch(loc: location):
	kitSound_HarmonyNotes_Launch({_loc})
	loop 10 times:
		set {_el} to {_loc}
		set {_rn} to dice(3)
		if {_rn} is 1:
			spawnParticle_Dust(rgb(248, 229, 140), 1.25, {_el})
		else if {_rn} is 2:
			spawnParticle_Dust(rgb(254, 242, 99), 0.75, {_el})
		else:
			spawnParticle_DustTransition(rgb(248, 181, 0), rgb(247, 241, 223), 1, {_el})
	loop 10 times:
		set {_el} to {_loc}
		set {_rn} to dice(2)
		if {_rn} is 1:
			spawnParticle_BlockData(falling_dust, yellow wool, {_el})
		else:
			spawnParticle_BlockData(falling_dust, yellow terracotta, {_el})

local function kitParticle_HarmonyNotes_Sphere(loc: location):
	spawnParticle_Note("yellow", {_loc})
	set {_locs::*} to particleLocation_Sphere({_loc}, 10, 1, 30)
	loop {_locs::*}:
		set {_el} to loop-value
		chance of 1%:
			spawnParticle_BlockData(falling_dust, yellow wool, {_el})
		spawnParticle_Dust(rgb(245, 229, 107), 0.65, {_el})

local function kitParticle_HarmonyNotes_Beam(from: location, to: location, ally: boolean):
	chance of 10%:
		playSound("block.amethyst_block.chime", 1, 2, {_from})
	set {_baseloc} to setDirToVec({_from}, setVector({_from}, {_to}))
	set {_distance} to distance between {_from} and {_to}
	loop round({_distance} * 10) times:
		set {_el} to location loop-number * 0.1 meters in front of {_baseloc}
		if {_ally} is true:
			set {_color.start} to rgb(245, 229, 107)
			set {_color.end} to rgb(255, 255, 255)
		else:
			set {_color.start} to rgb(82, 47, 96)
			set {_color.end} to rgb(0, 0, 0)
		spawnParticle_DustTransition({_color.start}, {_color.end}, 0.5, {_el})

local function kitParticle_HarmonyNotes_Wave(base: location, loc: location):
	playSound("block.end_portal_frame.fill", 1, 2, {_loc})
	set {_baseloc} to setDirToVec({_loc}, setVector({_base}, {_loc}))
	loop 10 times:
		set {_els::*} to particleLocation_CircleV({_baseloc}, 3 * loop-number, 0.15 * loop-number)
		loop {_els::*}:
			set {_el} to loop-value-2
			spawnParticle_Dust(rgb(255, 219, 79), 0.75, {_el})
		wait a tick

local function kitParticle_HarmonyNotes_Explode(loc: location):
	loop 30 times:
		set {_loc} to setDirToVec({_loc}, randomVector())
		set {_m} to a random number between 0 and 1.5
		set {_el} to location {_m} meters in front of {_loc}
		set {_rn} to dice(3)
		if {_rn} is 1:
			spawnParticle_BlockData(falling_dust, yellow wool, {_el})
		else if {_rn} is 2:
			spawnParticle_BlockData(falling_dust, orange wool, {_el})
		else:
			spawnParticle_BlockData(falling_dust, red wool, {_el})
	loop 3 times:
		if loop-number is 1:
			set {_pitch} to 1.19
		else if loop-number is 2:
			set {_pitch} to 0.89
		else:
			set {_pitch} to 0.79
		playSound("block.note_block.flute", 1, {_pitch}, {_loc})
		wait a tick



local function kitSound_HarmonyNotes_Launch(loc: location):
	loop 3 times:
		if loop-number is 1:
			set {_pitch} to 1.06
		else if loop-number is 2:
			set {_pitch} to 1.78
		else:
			set {_pitch} to 1.41
		playSound("block.note_block.chime", 1, {_pitch}, {_loc})
		wait a tick