# skill-name: Calm Lullaby

function kitSkill_Bard_8(player: player):
	toolCT({_player}, "Bard", 8)
	kitEffect_CalmLullaby({_player})



local function kitEffect_CalmLullaby(player: player):
	kitMsg({_player}, "§7泣く子も鎮まる§b§l子守唄§7を演奏します...")
	set {_now} to now
	set {Stats.%{_player}%::CalmLullabby} to {_now}
	set {_m} to 7
	if {Stats.%{_player}%::Fortissimo} is true:
		set {_m} to 10
		kitParticle_Fortissimo({_player})
	kitParticle_CalmLullaby({_player}, {_m})
	sendTimeBossbar_GREEN({_player}, "Calm Lullaby", 60)
	loop 60 times:
		if {Stats.%{_player}%::CalmLullabby} is not {_now}:
			continue
		loop all players in radius {_m} around {_player}:
			kitCheckTeam(loop-player, {_player}, false) is true
			add 2 to {_sleepy::%loop-player%}
			kitParticle_CalmLullaby_Sleepy(loop-player)
		wait a tick
	if {Stats.%{_player}%::CalmLullabby} is not {_now}:
		if {Stats.%{_player}%::CalmLullabby} is not set:
			kitMsg({_player}, "§b子守唄 §1は中断されました...")
		stop
	kitParticle_CalmLullaby_Burst({_player}, {_m})
	kitMsg({_player}, "§b子守唄§5により鎮まりかえる...")
	loop all players:
		{_sleepy::%loop-player%} is set
		set {_value} to {_sleepy::%loop-player%}
		kitSleep(loop-player, {_value})
		kitEffectDescription(loop-player, "§5§l睡眠")
		kitParticle_CalmLullaby_Zzz(loop-player)



local function kitParticle_CalmLullaby(player: player, meter: number):
	kitSound_CalmLullaby({_player})
	set {_baserad} to 0
	loop 60 times:
		set {_baseloc} to location 1 meter above {_player}
		set {_ln} to 0
		loop 8 times:
			add 1 to {_ln}
			set {_rad} to {_baserad} + {_ln} * 45
			set {_el} to {_baseloc}
			add {_meter} * sin({_rad}) to x-pos of {_el}
			add {_meter} * cos({_rad}) to z-pos of {_el}
			spawnParticle_Note("lightblue", {_el})
		add 20 to {_baserad}
		wait a tick

local function kitParticle_CalmLullaby_Sleepy(player: player):
	loop 3 times:
		set {_el} to aroundEffect({_player})
		if y-pos of {_el} - y-pos of location of {_player} <= 1:
			add 1 to y-pos of {_el}
		spawnParticle(bubble_pop, {_el})

local function kitParticle_CalmLullaby_Zzz(player: player):
	loop 20 times:
		spawnParticle_DustTransition(rgb(104, 164, 217), rgb(187, 219, 243), 2, aroundEffect({_player}))
		spawnParticle_Vector(cloud, randomVector(), 0.3, location 1 meter above {_player})

local function kitParticle_CalmLullaby_Burst(player: player, meter: number):
	playSound("block.brewing_stand.brew", 1, 0.73, {_player})
	set {_baseloc} to location of {_player}
	loop 100 times:
		set {_el} to setDirToVec({_baseloc}, randomVector())
		set {_rm} to a random number between 0 and {_meter}
		set {_el} to location {_rm} meters in front of {_el}
		spawnParticle_BlockData(falling_dust, cyan wool, {_el})
		chance of 30%:
			set {_el} to setDirToVec({_baseloc}, randomVector())
			set {_rm} to a random number between 0 and {_meter}
			set {_el} to location {_rm} meters in front of {_el}
			spawnParticle_BlockData(falling_dust, blue wool, {_el})
		chance of 30%:
			set {_el} to setDirToVec({_baseloc}, randomVector())
			set {_rm} to a random number between 0 and {_meter}
			set {_el} to location {_rm} meters in front of {_el}
			spawnParticle_BlockData(falling_dust, light blue wool, {_el})
		chance of 10%:
			set {_el} to setDirToVec({_baseloc}, randomVector())
			set {_rm} to a random number between 0 and {_meter}
			set {_el} to location {_rm} meters in front of {_el}
			spawnParticle_Block(diamond block, {_el})
	loop 5 times:
		set {_y} to loop-number
		set {_ln} to 0
		set {_rad} to 220
		loop 8 times:
			add 1 to {_ln}
			set {_rad} to {_rad} + 45 * {_ln}
			set {_el} to {_baseloc}
			add {_meter} * sin({_rad}) to x-pos of {_el}
			add {_meter} * cos({_rad}) to z-pos of {_el}
			add {_y} to y-pos of {_el}
			spawnParticle_Note("blue", {_el})
		wait a tick



local function kitSound_CalmLullaby(player: player):
	loop 4 times:
		if loop-number is 1:
			set {_pitch.1} to 1.06
			set {_pitch.2} to 1.33
			set {_pitch.3} to 1.59
		else if loop-number is 2:
			set {_pitch.1} to 0.667
			set {_pitch.2} to 1.06
			set {_pitch.3} to 1.59
		else if loop-number is 3:
			set {_pitch.1} to 0.707
			set {_pitch.2} to 1.06
			set {_pitch.3} to 1.59
		else if loop-number is 4:
			set {_pitch.1} to 0.794
			set {_pitch.2} to 1.06
			set {_pitch.3} to 1.41
		set {_ln} to 0
		loop 3 times:
			add 1 to {_ln}
			playSound("block.note_block.bell", 1, {_pitch.%{_ln}%}, {_player})
			wait 2 ticks
		loop ((20 * (3 / 4)) - (3 * 2)) times:
			wait a tick