# skill-name: Sweet Serenade

options:
	effect-distance: 10
	base-cycle: 20
	max-absorption: 3
	heal-amount: 0.5
	metadata-damage: "Sweet Serenade - Last Damage"



on damage of player:
	set {_SweetSerenade-Target} to getKitStats(victim, "SweetSerenade-Target")
	{_SweetSerenade-Target} is set
	set {_now} to now
	set metadata value {@metadata-damage} of victim to {_now}



function kitEffect_SweetSerenade(player: player):
	set {_SkillTarget} to getKitStats({_player}, "SkillTarget")
	if {_SkillTarget} is not set:
		send action bar "§c§l対象を指定してください" to {_player}
		stop
	set {_target} to {_SkillTarget}
	set {_SweetSerenade} to getKitStats({_player}, "SweetSerenade")
	if {_target} is {_SweetSerenade}:
		kitMsg({_player}, "§c§l現在演奏中の味方に対して付与することはできません")
		stop
	nameCT({_player}, "Sweet Serenade")

	kitMsg({_player}, "§d%{_target}% §cに§4ハートの小夜曲§cを捧げます...")
	message formatted "§b%{_player}% §dがハートの小夜曲を演奏してくれた!" to {_target}
	kitParticle_SweetSerenade_Launch({_player}, {_target})
	setKitStats({_player}, "SweetSerenade", {_target})
	setKitStats({_player}, "SweetSerenade-Target", {_player})
	setSupporter({_target}, {_player})

	set {_id} to a random UUID
	set {_bar.title} to "§d§l小夜曲"
	add {_player} to {_bar.targets::*}
	add {_target} to {_bar.targets::*}
	create bossbar titled {_bar.title} and id {_id} for {_bar.targets::*} with progress 0 with colors pink with style solid

	set {_timer} to 0
	while getKitStats({_player}, "SweetSerenade") is {_target}:
		set {_SweetSerenade-Target} to getKitStats({_player}, "SweetSerenade-Target")
		if {_SweetSerenade-Target} is not {_player}:
			deleteKitStats({_player}, "SweetSerenade")
			continue
		set {_distance} to distance between {_target} and {_player}
		if {_distance} > {@effect-distance}:
			deleteKitStats({_player}, "SweetSerenade")
			continue

		# ボスバー設定
		set {_prog} to 100 - (({_distance} / {@effect-distance}) * 100)
		set bossbar {_id} value to {_prog}
		add 1 to {_timer}
		
		set {_checker} to {@base-cycle}
		if getKitStats({_player}, "Fortissimo") is true:
			set {_checker} to {_checker} * 0.5
		if {_timer} >= {_checker}:
			if {_checker} is not {@base-cycle}:
				kitParticle_Fortissimo({_player}, 6, false)
			set {_timer} to 0
			kitHeal({_target}, {@heal-amount}, 1)
			kitEffectDescription({_target}, "§d❤{@heal-amount}")
			kitParticle_SweetSerenade_Beam({_player}, {_target})

			# 金ハート処理
			set {_metadata} to metadata value {@metadata-damage} of {_target}
			if {_metadata} is not set:
				set {_metadata} to date(2000, 1, 1)
			set {_now} to now
			set {_timeDif} to difference between {_metadata} and {_now}

			if {_timeDif} >= 1 second:	
				set {_maxGold} to {@max-absorption} * 2
				set {_gold} to {_target}.getAbsorptionAmount()
				log "%{_gold}%"
				if {_gold} < {_maxGold}:
					add 1 to {_gold}
					if {_gold} > {_maxGold}:
						set {_gold} to {_maxGold}
					set {_attribute} to max absorption attribute of {_target}
					if {_attribute} is 0:
						set max absorption attribute of {_target} to 100
					kitAbsorption({_target}, {_gold})
					kitParticle_SweetSerenade_Gold({_target})
		wait a tick
	remove bossbar {_id}
	kitMsg({_player}, "§9%{_target}% §5への小夜曲は途切れた...")
	if getKitStats({_target}, "SweetSerenade-Target") is {_player}:
		deleteKitStats({_target}, "SweetSerenade-Target")
		message formatted "§7小夜曲が聴こえなくなりました" to {_target}
		kitAbsorption({_target}, 0)



local function kitParticle_SweetSerenade_Launch(player: player, target: player):
	# 音
	kitSound_SweetSerenade_Launch({_target})
	# パーティクル
	set {_m} to distance between {_player} and {_target} / 5
	set {_baseloc} to location of head of {_player}
	set {_vector} to setVector({_baseloc}, location of head of {_target})
	set {_baseloc} to setDirToVec({_baseloc}, {_vector})
	loop 5 times:
		set {_el} to location {_m} * loop-number meters in front of {_baseloc}
		spawnParticle_Note("pink", {_el})
		set {_eel} to {_el}
		add a random number between -0.5 and 0.5 to x-pos of {_eel}
		add a random number between -0.5 and 0.5 to y-pos of {_eel}
		add a random number between -0.5 and 0.5 to z-pos of {_eel}
		spawnParticle(heart, {_eel})
		loop 5 times:
			set {_eeel} to {_eel}
			add a random number between -0.1 and 0.1 to x-pos of {_eeel}
			add a random number between -0.1 and 0.1 to y-pos of {_eeel}
			add a random number between -0.1 and 0.1 to z-pos of {_eeel}
			spawnParticle_BlockData(falling_dust, pink_wool, {_eeel})
		wait a tick

local function kitParticle_SweetSerenade_Beam(player: player, target: player):
	playSound("block.note_block.bell", 1, 1.4, {_player})
	set {_m} to distance between {_player} and {_target} / 5
	set {_baseloc} to location of head of {_player}
	set {_vector} to setVector({_baseloc}, location of head of {_target})
	set {_baseloc} to setDirToVec({_baseloc}, {_vector})
	loop 5 times:
		set {_el} to location {_m} * loop-number meters in front of {_baseloc}
		spawnParticle_Note("pink", {_el})
		wait a tick

local function kitParticle_SweetSerenade_Gold(player: player):
	playSound("block.bell.use", 1, 1.85, {_player})
	set {_baseloc} to location 1 meter above {_player}

	loop 10 times:
		spawnParticle_Block(gold block, moveRandomLocation({_baseloc}, 1))
		spawnParticle_BlockData(falling_dust, gold block, moveRandomLocation({_baseloc}, 1))



local function kitSound_SweetSerenade_Launch(player: player):
	loop 3 times:
		if loop-number is 1:
			set {_pitch} to 1.19
		else if loop-number is 2:
			set {_pitch} to 1.35
		else:
			set {_pitch} to 1.4
		playSound("block.note_block.bell", 1, {_pitch}, {_player})
		wait 3 ticks