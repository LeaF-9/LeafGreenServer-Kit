# skill-name: Beat Clapper

on damage with priority LOW:
	set {_attacker} to getAttacker(victim)
	{_attacker} is set
	getKitStats({_attacker}, "BeatClapper") is set
	setDamageModification_MUL(victim, 2)
	kitParticle_BeatClapper_Damage({_attacker})

function kitEffect_BeatClapper(player: player):
	set {_SkillLocation} to getKitStats({_player}, "SkillLocation")
	if {_SkillLocation} is not set:
		send action bar "§c§l発動地点が有効ではありません!" to {_player}
		stop
	set {_loc} to {_SkillLocation}

	nameCT({_player}, "Beat Clapper")
	set {_now} to now
	setKitStats({_player}, "BeatClapper-Time", {_now})
	kitParticle_BeatClapper_Place({_loc})
	kitFakeDeleteData({_player}, "Beat Clapper")

	set {_rotation} to getQuaternionf(0, 0, 0, 1)
	set {_translation} to getVector3f(-0.25, 0, -0.25)
	set {_scale} to getVector3f(0.5, 1, 0.5)
	set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
	set {_block} to getBlockData(spruce fence)
	set {_hasMetadataDisplay} to kitFakeBlock({_player}, {_loc}, {_block}, {_transformation}, "Beat Clapper")
	set metadata value "Beat Clapper-Lever" of {_hasMetadataDisplay} to "%{_player}%"

	set {_translation} to getVector3f(-0.5, 1, -0.5)
	set {_scale} to getVector3f(1, 1, 1)
	set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
	set {_block} to getBlockData(spruce pressure plate)
	set {_hasMetadataDisplay} to kitFakeBlock({_player}, {_loc}, {_block}, {_transformation}, "Beat Clapper")
	set metadata value "Beat Clapper-Lever" of {_hasMetadataDisplay} to "%{_player}%"

	set {_translation} to getVector3f(-0.5, 0, -0.5)
	set {_scale} to getVector3f(1, 0.5, 1)
	set {_transformation} to getTransformation({_rotation}, {_rotation}, {_translation}, {_scale})
	set {_block} to getBlockData(note block)
	kitFakeBlock({_player}, {_loc}, {_block}, {_transformation}, "Beat Clapper")
	kitMsg({_player}, "§6§l音波を発する装置§eを設置しました!")
	set {_timer} to 0
	set {_y} to 0
	while getKitStats({_player}, "BeatClapper-Time") is {_now}:
		wait a tick
		set {_exist} to kitFakeCheck({_player}, "Beat Clapper")
		if {_exist} is false:
			deleteKitStats({_player}, "BeatClapper-Time")
			continue
		set {_goal} to 40
		if getKitStats({_player}, "Fortissimo") is true:
			set {_goal} to 20
		if {_y} < 0:
			add 0.05 to {_y}
		kitEffect_BeatClapper_Lever({_player}, {_loc}, {_y})
		add 1 to {_timer}
		if {_timer} < {_goal}:
			continue
		set {_timer} to 0
		set {_y} to -0.5
		kitEffect_BeatClapper_Clap({_player}, {_loc})
		kitEffect_BeatClapper_Wave({_player}, {_loc})
		kitEffect_BeatClapper_Lever({_player}, {_loc}, {_y})
		kitParticle_BeatClapper_Lever({_loc})

# ダメージ倍増効果
local function kitEffect_BeatClapper_Clap(player: player, loc: location):
	loop all players in radius 10 around {_loc}:
		kitCheckTeam({_player}, loop-player, true) is true
		add loop-player to {_claps::*}
		setKitStats(loop-player, "BeatClapper", {_player})
		kitParticle_BeatClapper_Clap(loop-player)
		kitEffectDescription(loop-player, "§c§l火力増加")
	wait a tick
	loop {_claps::*}:
		getKitStats(loop-value, "BeatClapper") is {_player}
		deleteKitStats(loop-value, "BeatClapper")

# 音波
local function kitEffect_BeatClapper_Wave(player: player, loc: location):
	kitParticle_BeatClapper_Wave({_loc}, 10)
	set {_m} to 0
	loop 20 times:
		add 0.5 to {_m}
		set {_min} to {_m} - 0.25
		set {_max} to {_m} + 0.25
		loop all entities in radius 12 around {_loc}:
			{_hit.%id of loop-entity%} is not set
			block at location 0.1 meters below loop-entity is not passable
			kitCheckTeam(loop-entity, {_player}, false) is true
			set {_distance} to distance between loop-entity and {_player}
			if {_distance} is between {_min} and {_max}:
				set {_hit.%id of loop-entity%} to true
				kitDamage({_player}, loop-entity, 2, "音波")
				applyEffect(loop-entity, glowing, 1, 40)
				kitEffectDescription(loop-entity, "§4❤2 §8& §e§l発光")
				sendTimeBossbar_RED(loop-entity, "§e発光", 40)
		wait a tick

# 機械動作
local function kitEffect_BeatClapper_Lever(player: player, loc: location, y: number):
	if {_y} is 0:
		stop
	set {_tploc} to {_loc}
	add {_y} to y-pos of {_tploc}
	loop all block displays:
		metadata value "kit-block" of loop-block display is "Beat Clapper"
		metadata value "Beat Clapper" of loop-block display is "%{_player}%"
		metadata value "Beat Clapper-Lever" of loop-block display is "%{_player}%"
		teleport loop-block display to {_tploc}



local function kitParticle_BeatClapper_Place(loc: location):
	playSound("block.wooden_door.open", 1, 0.7, {_loc})
	kitParticle_BeatClapper_Rhythm({_loc})

local function kitParticle_BeatClapper_Lever(loc: location):
	playSound("item.lodestone_compass.lock", 1, 0.65, {_loc})
	kitParticle_BeatClapper_Rhythm({_loc})

local function kitParticle_BeatClapper_Rhythm(loc: location):
	loop 10 times:
		set {_el} to {_loc}
		add a random number between -1 and 1 to x-pos of {_el}
		add a random number between -1 and 1 to z-pos of {_el}
		add a random number between 0 and 1.5 to y-pos of {_el}
		set {_color} to a random number between 0 and 1
		spawnParticle_NoteOption({_color}, {_el})

local function kitParticle_BeatClapper_Clap(player: player):
	playSound("block.note_block.snare", 1, 1, {_player}, true)
	set {_el} to location 2 meters above {_player}
	spawnParticle_Note("orange", {_el})

local function kitParticle_BeatClapper_Wave(loc: location, meter: number):
	add rgb(255, 175, 26) to {_colors::*}
	add rgb(247, 183, 9) to {_colors::*}
	add rgb(252, 195, 74) to {_colors::*}
	add 0.1 to y-pos of {_loc}

	set {_count} to 600
	set {_addrad} to 360 / {_count}
	set {_rotatevec} to vector({_meter}, 0, 0)
	loop 5 times:
		set {_rad} to 0
		loop {_count} times:
			set {_vec} to {_rotatevec}
			rotate {_vec} around y-axis by {_rad}
			set {_el} to {_loc} ~ {_vec}
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Trail({_color}, {_el}, 20 ticks, {_loc})
			add {_addrad} to {_rad}
		wait a tick

local function kitParticle_BeatClapper_Damage(player: player):
	playSound("block.respawn_anchor.set_spawn", 1, 1.85, {_player})
	loop 10 times:
		spawnParticle_Note("red", aroundEffect({_player}))