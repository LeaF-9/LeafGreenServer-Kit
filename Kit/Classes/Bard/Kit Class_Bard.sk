# Bardのスキル Ver1.0.0

# Skills
on rightclick holding a jukebox:
	name of player's tool is "§eMelody Effect"
	cancel event
	open chest with 1 row named "§b§lSelect a Melody" to player
	wait 1 tick
	set slot 1 of player's current inventory to music disc blocks named "§aHEALING" with lore "§f[§d§l効果§f]", "§8- §a§l再生能力"
	set slot 2 of player's current inventory to music disc 13 named "§aRESISTANCE" with lore "§f[§d§l効果§f]", "§8- §a§l耐性"
	set slot 3 of player's current inventory to music disc wait named "§aSPEED" with lore "§f[§d§l効果§f]", "§8- §a§l移動速度上昇"
	set slot 4 of player's current inventory to music disc cat named "§cWEAKNESS" with lore "§f[§d§l効果§f]", "§8- §c§l弱体化"
	set slot 5 of player's current inventory to music disc mall named "§cFATIGUE" with lore "§f[§d§l効果§f]", "§8- §c§l採掘速度低下"
	set slot 6 of player's current inventory to music disc stal named "§cSLOWNESS" with lore "§f[§d§l効果§f]", "§8- §c§l移動速度低下"

on inventory click:
	metadata value "gametype" of player is "Kit"
	type of event-inventory is chest inventory
	name of event-inventory is "§b§lSelect a Melody"
	cancel event
	set {_item} to event-item
	if name of {_item} contains "HEALING":
		set {_potiontype} to regeneration
	else if name of {_item} contains "RESISTANCE":
		set {_potiontype} to resistance
	else if name of {_item} contains "SPEED":
		set {_potiontype} to speed
	else if name of {_item} contains "WEAKNESS":
		set {_potiontype} to weakness
	else if name of {_item} contains "FATIGUE":
		set {_potiontype} to mining fatigue
	else if name of {_item} contains "SLOWNESS":
		set {_potiontype} to slowness
	setKitStats(player, "MelodyEffect", {_potiontype})
	kitMsg(player, "§aMelody Effect§eを %name of {_item}% §eに変更しました")

# Timer
function kitTimerBard(player: player):
	while {Class::%{_player}%} is "Bard":
		set {_potiontype} to getKitStats({_player}, "MelodyEffect")
		if {_potiontype} is regeneration:
			set {_ally} to true
			set {_color} to "red"
			set {_pitch.high} to 1.59
			set {_pitch.mid} to 1.33
			set {_pitch.low} to 1.06
			set {_text} to "§d§l再生能力"
		else if {_potiontype} is resistance:
			set {_ally} to true
			set {_color} to "yellow"
			set {_pitch.high} to 1.78
			set {_pitch.mid} to 1.41
			set {_pitch.low} to 1.06
			set {_text} to "§e§l耐性"
		else if {_potiontype} is speed:
			set {_ally} to true
			set {_color} to "lightblue"
			set {_pitch.high} to 1.89
			set {_pitch.mid} to 1.41
			set {_pitch.low} to 1.19
			set {_text} to "§b§l俊敏"
		else if {_potiontype} is weakness:
			set {_ally} to false
			set {_color} to "green"
			set {_pitch.high} to 2
			set {_pitch.mid} to 1.5
			set {_pitch.low} to 1.33
			set {_text} to "§8§l弱体化"
		else if {_potiontype} is mining fatigue:
			set {_ally} to false
			set {_color} to "purple"
			set {_pitch.high} to 2
			set {_pitch.mid} to 1.78
			set {_pitch.low} to 1.33
			set {_text} to "§7§l疲労"
		else if {_potiontype} is slowness:
			set {_ally} to false
			set {_color} to "blue"
			set {_pitch.high} to 1.78
			set {_pitch.mid} to 1.33
			set {_pitch.low} to 1.19
			set {_text} to "§8§l鈍足"
		set {_tier} to 1
		set {_Fortissimo} to getKitStats({_player}, "Fortissimo")
		if {_Fortissimo} is true:
			set {_tier} to 2
		kitParticle_MelodyEffect_Range({_player}, {_color})
		delete {_play}
		loop all players in radius 10 around {_player}:
			kitCheckTeam(loop-player, {_player}, {_ally}) is true
			if {_potiontype} is weakness:
				if checkPacketEffect(loop-player, weakness) is true:
					continue
			else:
				if loop-player has potion {_potiontype}:
					continue
			applyEffect(loop-player, {_potiontype}, {_tier}, 100, false, "none")
			kitEffectDescription(loop-player, {_text})
			sendTimeBossbar_YELLOW(loop-player, "Melody Effect", 100)
			kitParticle_MelodyEffect_Player(loop-player, {_color})
			if {_play} is not set:
				set {_play} to true
				kitSound_MelodyEffect({_player}, {_pitch.low}, {_pitch.mid}, {_pitch.high})
		wait a second

local function kitParticle_MelodyEffect_Range(player: player, color: text):
	set {_baseloc} to location 1 meter above {_player}
	loop 36 times:
		set {_effloc} to {_baseloc}
		set {_rad} to 10 * loop-number
		add 10 * sin({_rad}) to x-pos of {_effloc}
		add 10 * cos({_rad}) to z-pos of {_effloc}
		spawnParticle_Note({_color}, {_effloc}, {_player})

local function kitParticle_MelodyEffect_Player(player: player, color: text):
	if getInvisibleStatus({_player}) is true:
		stop
	set {_baseloc} to location of {_player}
	add 1 to y-pos of {_baseloc}
	loop 6 times:
		set {_effloc} to {_baseloc}
		set {_rad} to 60 * loop-number
		add 0.5 * sin({_rad}) to x-pos of {_effloc}
		add 0.5 * cos({_rad}) to z-pos of {_effloc}
		spawnParticle_Note({_color}, {_effloc})

local function kitSound_MelodyEffect(player: player, pitch.1: number, pitch.2: number, pitch.3: number):
	loop 3 times:
		playSound("block.note_block.harp", 1, {_pitch.%loop-number%}, {_player})
		wait a tick