# Defenderのスキル Ver1.0.0

# Weapons
on damage of player:
	metadata value "gametype" of attacker is "Kit"
	damage was caused by attack
	{Class::%attacker%} is "Defender"
	set {_tool} to attacker's tool
	set {_item.kit} to kitItemKitChecker({_tool})
	{_item.kit} is "Defender"
	set {_item.type} to kitItemTypeChecker({_tool})
	{_item.type} is "Weapon.main"
	set {_item.num} to kitItemNumberChecker({_tool})
	if {_item.num} is 1:
		set {_per} to kitPercentDuel(attacker, victim, 5, true)
		chance of {_per}%:
			set damage to damage * 1.5
			kitStun(victim, 3 seconds)
			loop 3 times:
				playSound("block.stone.break", 1, 1, victim)
				drawDot count 3, particle "blockcrack", material dirt, center location 1 meters above victim, visibleRange 30
				wait a tick
	else if {_item.num} is 2:
		set {_per} to kitPercentDuel(attacker, victim, 10, true)
		chance of {_per}%:
			kitBlood(victim)
			loop 5 times:
				set {_loc} to aroundEffect(victim)
				drawDot count 1, particle "blockcrack", material redstone block, center {_loc}, visibleRange 30

on damage of player:
	victim is blocking
	name of victim's offhand tool is "§6Wooden Shield"
	set {_per} to kitPercent(victim, 10, true)
	chance of {_per}%:
		cancel event
		playSound("block.anvil.place", 1, 0.8, victim)
		add 1 to {Stats.%victim%::WoodenShield}
		add 34 to damage value of victim's offhand tool
		if {Stats.%victim%::WoodenShield} >= 10:
			delete victim's offhand tool
			playSound("entity.item.break", 1, 0.5, victim)

function kitWeaponDefender(player: player):
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	checkCT({_player}, name of {_player}'s tool) is true
	if {_item.num} is 4:
		kitWeapon_Defender_4({_player})
	else if {_item.num} is 5:
		kitWeapon_Defender_5({_player})

function kitWeapon_Defender_4(player: player):
	toolCT({_player}, "Defender", 4, "Weapon.main")
	set {_base} to location of {_player}
	set pitch of {_base} to 0
	set {_m} to 0
	loop 5 times:
		add 1 to {_m}
		set {_l} to location {_m} meters in front of {_base}
		loop all blocks in radius 1.5 around {_l}:
			loop-block is air
			block below loop-block is set
			drawDot count 1, particle "blockcrack", material type of block below loop-block, center location 0.5 meters below loop-block, visibleRange 30
		playSound("block.grass.break", 1, 0.8, {_l})
		loop all players in radius 1.5 around {_l}:
			kitCheckTeam({_player}, loop-player, false) is true
			{_hit.%loop-player%} is not set
			set {_hit.%loop-player%} to true
			add {_player} to {damager.%loop-player%::*}
			kitStun(loop-player, 5 seconds)
			loop 5 times:
				set {_el} to aroundEffect(loop-player)
				drawDot count 1, particle "blockcrack", material dirt, center {_el}, visibleRange 30

function kitWeapon_Defender_5(player: player):
	toolCT({_player}, "Defender", 5, "Weapon.main")
	playSound("entity.blaze.shoot", 1, 1.5, {_player})
	set {_y} to 0
	loop 20 times:
		add 0.1 to {_y}
		drawDot count 1, particle "flame", center {_player}, visibleRange 30, displacementXYZ 0, {_y}, 0, keepFor 1 second
	set {_from} to vector of location 5 meters in front of {_player}
	set {_to} to vector of {_player}
	set {_vector} to {_from} -- {_to}
	set {_vector} to normalized {_vector}
	set velocity of {_player} to {_vector}

# Skills
function kitSkillDefender(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_player}'s tool) is true:
		if {_item.num} is 1:
			kitSkill_Defender_1({_player})
			return true
		else if {_item.num} is 2:
			kitSkill_Defender_2({_player})
			return true
		else if {_item.num} is 3:
			kitSkill_Defender_3({_player})
			return true
		else if {_item.num} is 4:
			kitSkill_Defender_4({_player})
			return true
		else if {_item.num} is 5:
			kitSkill_Defender_5({_player})
			return false
		else if {_item.num} is 6:
			kitSkill_Defender_6({_player})
			return true
		else if {_item.num} is 7:
			kitSkill_Defender_7({_player})
			return true
		else if {_item.num} is 8:
			kitSkill_Defender_8({_player})
			return true

function kitSkill_Defender_1(player: player):
	toolCT({_player}, "Defender", 1)
	loop all players in radius 10 around {_player}:
		loop-player is not {_player}
		if kitCheckTeam(loop-player, {_player}, true) is true:
			if {Stats.%loop-player%::NoSupport} is not set:
				add {_player} to {supporter.%loop-player%::*}
				kitShield(loop-player, 5)
				kitMsg({_player}, "§a%loop-player% §7に§b強固なバリア§7を張りました!")
				message "§9%{_player}% §bにバリアを張ってもらいました!" to loop-player
	kitMsg({_player}, "§b周りの味方プレイヤーに§l強固なバリア§bを張りました!")
	playSound("entity.wither.ambient", 1, 2, {_player})
	set {_baseloc} to location of {_player}
	loop 5 times:
		loop 20 times:
			add 9 to {_rad}
			add 0.04 to {_y}
			set {_el} to {_baseloc}
			add 10 * sin({_rad}) to x-coordinate of {_el}
			add 10 * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 100, 255, 100, center {_el}, visibleRange 30
		wait a tick

function kitSkill_Defender_2(player: player):
	toolCT({_player}, "Defender", 2)
	set {Stats.%{_player}%::Invincible} to true
	kitMsg({_player}, "§b3秒間完全にダメージを無効化します!")
	playSound("block.piston.extend", 1, 0.5, {_player})
	loop 60 times:
		add 36 to {_rad}
		set {_y} to 0
		set {_baseloc} to location of {_player}
		loop 3 times:
			set {_el} to {_baseloc}
			add 0.5 to {_y}
			add 0.5 * sin({_rad}) to x-coordinate of {_el}
			add 0.5 * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 0, 0, 200, center {_el}, visibleRange 30
		wait a tick
	delete {Stats.%{_player}%::Invincible}
	kitMsg({_player}, "§9ダメージ無効効果が切れました")
	playSound("block.piston.contract", 1, 0.5, {_player})

function kitSkill_Defender_3(player: player):
	if {Stats.%{_player}%::SkillLocation} is set:
		toolCT({_player}, "Defender", 3)
		set {_now} to now
		set {Stats.%{_player}%::DefenseMatrix-Time} to {_now}
		kitFakeDeleteData({_player}, "Defense Matrix")
		set {_loc} to {Stats.%{_player}%::SkillLocation}
		kitFakeBlock({_player}, {_loc}, "minecraft:beacon", "Defense Matrix")
		kitMsg({_player}, "§9Defense Matrix§bを設置しました!")
		playSound("block.anvil.land", 1, 0.5, {_loc})
		while {Stats.%{_player}%::DefenseMatrix-Time} is {_now}:
			wait a second
			delete {_exist}
			loop all entities:
				type of loop-entity is armor stand
				metadata value "kit-armor" of loop-entity is "Defense Matrix"
				metadata value "Defense Matrix" of loop-entity is "%{_player}%"
				set {_exist} to true
			if {_exist} is true:
				kitFakeReload({_player}, "Defense Matrix")
			else:
				delete {Stats.%{_player}%::DefenseMatrix-Time}
	else:
		send action bar "§c§l発動地点が有効ではありません!" to {_player}

on damage:
	{Stats.%victim%::NoSupport} is not set
	metadata value "gametype" of victim is "Kit"
	loop all entities in radius 5 around victim:
		{_a} is not set
		type of loop-entity is armor stand
		metadata value "kit-armor" of loop-entity is "Defense Matrix"
		set {_player} to metadata value "Defense Matrix" of loop-entity parsed as player
		kitCheckTeam({_player}, victim, true) is true
		if {_player} is not victim:
			if type of victim is player:
				setSupporter(victim, {_player})
		set {_a} to true
		set damage to damage * 0.5
		playSound("entity.zombie.attack_wooden_door", 1, 2, victim)
		loop all blocks in radius 1.5 around location of block at loop-entity:
			loop-block is air
			drawDot count 3, particle "critmagic", center location of loop-block, visibleRange 30, keepFor 0.5 seconds

function kitSkill_Defender_4(player: player):
	toolCT({_player}, "Defender", 4)
	kitMsg({_player}, "§c正面に突進します!")
	playSound("entity.wither.shoot", 1, 0.5, {_player})
	drawDot particle "explosionlarge", center {_player}, visibleRange 30, keepFor 1 second
	set {_ff} to location 100 meters in front of {_player}
	set y-coordinate of {_ff} to y-coordinate of {_player}
	loop 20 times:
		set {_f} to location 10 meters in front of {_player}
		set y-coordinate of {_f} to y-coordinate of {_player}
		set {_dx} to x-coordinate of {_ff} - x-coordinate of {_f}
		if {_dx} > 0:
			set x-coordinate of {_ff} to x-coordinate of {_ff} - 0.1
		else if {_dx} < 0:
			set x-coordinate of {_ff} to x-coordinate of {_ff} + 0.1
		set {_dz} to z-coordinate of {_ff} - z-coordinate of {_f}
		if {_dz} > 0:
			set z-coordinate of {_ff} to z-coordinate of {_ff} - 0.1
		else if {_dz} < 0:
			set z-coordinate of {_ff} to z-coordinate of {_ff} + 0.1
		set {_from} to vector of {_ff}
		set {_to} to vector of {_player}
		set {_vector} to {_from} -- {_to}
		set {_vector} to normalized {_vector}
		set x of {_vector} to x of {_vector} * 0.75
		set y of {_vector} to y of {_vector} * 0.75
		set z of {_vector} to z of {_vector} * 0.75
		set velocity of {_player} to {_vector}
		loop all entities in radius 2 around {_player}:
			kitCheckTeam({_player}, loop-entity, false) is true
			make {_player} damage loop-entity by 6
			make a fake explosion at loop-entity
			push loop-entity upwards at speed 1
			set {_from2} to vector of loop-entity
			set {_vector2} to {_from2} -- {_to}
			set {_vector2} to normalized {_vector2}
			set velocity of loop-entity to {_vector2}
		wait a tick

options:
	distance: 0.6

function kitSkill_Defender_5(player: player):
	wait 6 ticks
	playSound("item.armor.equip_netherite", 1, 1, {_player})
	set {_l} to location of {_player}
	set {_pitch} to pitch of {_l}
	set {_height} to {@distance} * cos({_pitch})
	set {_width} to {@distance} * sin({_pitch})
	set {_l1} to location 2 meters in front of {_l}
	set pitch of {_l1} to 0
	set {_l2} to location {_height} meters below {_l1}
	set {_l3} to location {_height} * 2 meters below {_l1}
	set {_l4} to location {@distance} meters to the left of {_l1}
	set {_l5} to location {_height} meters below {_l4}
	set {_l6} to location {_height} * 2 meters below {_l4}
	set {_l7} to location {@distance} meters to the right of {_l1}
	set {_l8} to location {_height} meters below {_l7}
	set {_l9} to location {_height} * 2 meters below {_l7}
	set {_l10} to location {@distance} * 2 meters to the left of {_l1}
	set {_l11} to location {_height} meters below {_l10}
	set {_l12} to location {_height} * 2 meters below {_l10}
	set {_l13} to location {@distance} * 2 meters to the right of {_l1}
	set {_l14} to location {_height} meters below {_l13}
	set {_l15} to location {_height} * 2 meters below {_l13}
	set {_l16} to location {@distance} * 3 meters to the left of {_l1}
	set {_l17} to location {_height} meters below {_l16}
	set {_l18} to location {_height} * 2 meters below {_l16}
	set {_l19} to location {@distance} * 3 meters to the right of {_l1}
	set {_l20} to location {_height} meters below {_l19}
	set {_l21} to location {_height} * 2 meters below {_l19}
	loop 21 times:
		if loop-number is 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20 or 21:
			set pitch of {_l%loop-number%} to 0
			if loop-number is 2, 5, 8, 11, 14, 17 or 20:
				set {_x} to -1
			else:
				set {_x} to -2
			set {_l%loop-number%} to location {_width} * {_x} meters in front of {_l%loop-number%}
		set pitch of {_l%loop-number%} to {_pitch}
	loop 21 times:
		if {Stats.%{_player}%::KingShield-%loop-number%} is not set:
			set {Stats.%{_player}%::KingShield-%loop-number%} to 5
		spawn an armor stand at {_l%loop-number%} with nbt compound from "{Invulnerable:1b,PersistenceRequired:1b,NoBasePlate:1b,NoGravity:1b,Invisible:1b,Marker:1b,Pose:{Head:[%{_pitch}%f,0f,0f]},ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:blue_stained_glass_pane"",Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ArmorDropChances:[0.085F,0.085F,0.085F,0.0F]}"
		set metadata value "%{_player}%-shield" of spawned armor stand to "%loop-number%"
		set metadata value "gametype" of spawned armor stand to "Kit"
		if {Stats.%{_player}%::KingShield-%loop-number%} is 0:
			delete spawned armor stand
		else if {Stats.%{_player}%::KingShield-%loop-number%} is 1:
			set helmet of spawned armor stand to glass pane
		else if {Stats.%{_player}%::KingShield-%loop-number%} is 2:
			set helmet of spawned armor stand to white glass pane
		else if {Stats.%{_player}%::KingShield-%loop-number%} is 3:
			set helmet of spawned armor stand to light blue glass pane
		else if {Stats.%{_player}%::KingShield-%loop-number%} is 4:
			set helmet of spawned armor stand to cyan glass pane
		if {Stats.%{_player}%::KingShield-%loop-number%} > 0:
			set {_sl} to {_l%loop-number%}
			add 1.2 + 0.8 * cos({_pitch}) to y-coordinate of {_sl}
			set pitch of {_sl} to 0
			set {_fm} to 0.8 * sin({_pitch})
			set {_sl} to location {_fm} meters in front of {_sl}
			spawn a slime at {_sl} with nbt compound from "{NoGravity:1b,Size:0.5,PersistenceRequired:1,NoAI:1,Silent:1,DropItem:0,Team:""noCollision"",ActiveEffects:[{Id:14,Amplifier:0,Duration:12000,ShowParticles:0b}]}"
			set metadata value "%{_player}%-shield" of spawned slime to "%loop-number%"
			set metadata value "gametype" of spawned slime to "Kit"
			set spawned slime's display name to "%{_player}%"
	while {_player} is blocking with shield:
		set {_l} to location of {_player}
		set {_pitch} to pitch of {_l}
		set {_height} to {@distance} * cos({_pitch})
		set {_width} to {@distance} * sin({_pitch})
		set {_l1} to location 2 meters in front of {_l}
		set pitch of {_l1} to 0
		set {_l2} to location {_height} meters below {_l1}
		set {_l3} to location {_height} * 2 meters below {_l1}
		set {_l4} to location {@distance} meters to the left of {_l1}
		set {_l5} to location {_height} meters below {_l4}
		set {_l6} to location {_height} * 2 meters below {_l4}
		set {_l7} to location {@distance} meters to the right of {_l1}
		set {_l8} to location {_height} meters below {_l7}
		set {_l9} to location {_height} * 2 meters below {_l7}
		set {_l10} to location {@distance} * 2 meters to the left of {_l1}
		set {_l11} to location {_height} meters below {_l10}
		set {_l12} to location {_height} * 2 meters below {_l10}
		set {_l13} to location {@distance} * 2 meters to the right of {_l1}
		set {_l14} to location {_height} meters below {_l13}
		set {_l15} to location {_height} * 2 meters below {_l13}
		set {_l16} to location {@distance} * 3 meters to the left of {_l1}
		set {_l17} to location {_height} meters below {_l16}
		set {_l18} to location {_height} * 2 meters below {_l16}
		set {_l19} to location {@distance} * 3 meters to the right of {_l1}
		set {_l20} to location {_height} meters below {_l19}
		set {_l21} to location {_height} * 2 meters below {_l19}
		loop 21 times:
			if loop-number is 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20 or 21:
				set pitch of {_l%loop-number%} to 0
				if loop-number is 2, 5, 8, 11, 14, 17 or 20:
					set {_x} to -1
				else:
					set {_x} to -2
				set {_l%loop-number%} to location {_width} * {_x} meters in front of {_l%loop-number%}
			set pitch of {_l%loop-number%} to {_pitch}
		loop 21 times:
			add {Stats.%{_player}%::KingShield-%loop-number%} to {_shieldhp}
			if {Stats.%{_player}%::KingShield-%loop-number%} is not 0:
				set {_check::%loop-number%} to true
			else:
				set {_check::%loop-number%} to false
		loop all entities:
			if type of loop-entity is an armor stand:
				metadata value "%{_player}%-shield" of loop-entity is set
				set {_num} to metadata value "%{_player}%-shield" of loop-entity parsed as number
				if {_check::%{_num}%} is true:
					teleport loop-entity to {_l%{_num}%}
					add nbt compound of "{Pose:{Head:[%{_pitch}%f,0f,0f]}}" to nbt compound of loop-entity
				else:
					delete loop-entity
			else if type of loop-entity is a slime:
				metadata value "%{_player}%-shield" of loop-entity is set
				set {_num} to metadata value "%{_player}%-shield" of loop-entity parsed as number
				if {_check::%{_num}%} is true:
					set {_sl} to {_l%{_num}%}
					add 1.2 + 0.8 * cos({_pitch}) to y-coordinate of {_sl}
					set pitch of {_sl} to 0
					set {_fm} to 0.8 * sin({_pitch})
					set {_sl} to location {_fm} meters in front of {_sl}
					teleport loop-entity to {_sl}
				else:
					delete loop-entity
		if {_shieldhp} <= 0:
			loop all items in {_player}'s inventory:
				name of loop-item is "§1King Shield"
				delete loop-item
#			loop {Stats.%player%::*}:
#				loop-index contains "KingShield"
#				delete {Stats.%player%::%loop-index%}
		wait a tick
	playSound("item.armor.equip_generic", 1, 1, {_player})
	loop all entities:
		if type of loop-entity is an armor stand:
			metadata value "%{_player}%-shield" of loop-entity is set
			delete loop-entity
		else if type of loop-entity is a slime:
			metadata value "%{_player}%-shield" of loop-entity is set
			delete loop-entity

on damage of slime:
	set {_name} to victim's display name parsed as player
	metadata value "%{_name}%-shield" of victim is set
	if {team::%{_name}%} is not {team::%attacker%}:
		if damage was caused by attack, projectile or void:
			playSound("entity.armor_stand.hit", 1, 1, victim)
			set damage to 0
			set {_num} to metadata value "%{_name}%-shield" of victim parsed as number
			subtract 1 from {Stats.%{_name}%::KingShield-%{_num}%}
			if {Stats.%{_name}%::KingShield-%{_num}%} is 0:
				delete victim
			else if {Stats.%{_name}%::KingShield-%{_num}%} is 1:
				set helmet of victim to glass pane
			else if {Stats.%{_name}%::KingShield-%{_num}%} is 2:
				set helmet of victim to white glass pane
			else if {Stats.%{_name}%::KingShield-%{_num}%} is 3:
				set helmet of victim to light blue glass pane
			else if {Stats.%{_name}%::KingShield-%{_num}%} is 4:
				set helmet of victim to cyan glass pane
		else:
			cancel event
	else:
		cancel event

function kitSkill_Defender_6(player: player):
	toolCT({_player}, "Defender", 6)
	set {Stats.%{_player}%::MobileFortress} to true
	kitMsg({_player}, "<##1e90ff>8秒間,<##00bfff>領域外からの攻撃を無効化します!")
	playSound("block.beacon.power_select", 1, 1, {_player})
	set {_y} to 0
	loop 200 times:
		set {_baseloc} to location of {_player}
		set {_rad} to 0
		add 0.2 to {_dy}
		if {_dy} >= 4:
			set {_dy} to 0
		if {_dy} > 2:
			set {_y} to 2 - ({_dy} - 2)
		else:
			set {_y} to {_dy}
		loop 144 times:
			set {_el} to {_baseloc}
			add 9 to {_rad}
			add 8 * sin({_rad}) to x-coordinate of {_el}
			add 8 * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 0, 191, 255, center {_el}, visibleRange 100
		wait a tick
	delete {Stats.%{_player}%::MobileFortress}
	kitMsg({_player}, "§bMobile Fortress<##6495ed>の効果が終了しました")

on damage:
	{Stats.%victim%::NoSupport} is not set
	loop all players in radius 8 around victim:
		{_mf} is not set
		{team::%loop-player%} is {team::%victim%}
		{Stats.%loop-player%::MobileFortress} is true
		set {_mf} to loop-player
	{_mf} is set
	if distance between attacker and {_mf} > 8:
		cancel event
		playSound("block.beacon.deactivate", 0.7, 2, victim)

on leftclick holding a heart of the sea:
	name of player's tool contains "§3Wall Protection"
	cancel event
	{Class::%player%} is "Defender"
	if name of player's tool contains "§9[5*9]":
		set name of player's tool to "§3Wall Protection §9[9*5]"
	else:
		set name of player's tool to "§3Wall Protection §9[5*9]"

function kitSkill_Defender_7(player: player):
	if checkCT({_player}, "§3Wall Protection") is true:
		setCT({_player}, "§3Wall Protection", 60)
		playSound("entity.arrow.shoot", 1, 0.5, {_player})
		set {Stats.%{_player}%::WPyaw} to yaw of {_player}
		shoot a snowball from {_player} at speed 1.5
		if name of {_player}'s tool contains "§9[5*9]":
			set {_size} to "5*9"
		else:
			set {_size} to "9*5"
		set metadata value "wallprotection" of shot entity to {_size}
		drawDot count 3, particle "redstone", RGB 64, 224, 208, center shot entity, visibleRange 30, keepFor 1.5 seconds

on projectile hit:
	projectile is a snowball
	metadata value "wallprotection" of projectile is set
	set {_size} to metadata value "wallprotection" of projectile
	if {_size} is "5*9":
		set {_h} to 5
		set {_w} to 5
	else:
		set {_h} to 9
		set {_w} to 3
	if {Stats.%shooter%::WPyaw} is between 225 and 315:
		set {_dir} to true
	if {Stats.%shooter%::WPyaw} is between 45 and 135:
		set {_dir} to true
	delete {Stats.%shooter%::WPyaw}
	set {Stats.%shooter%::WallProtection} to true
	kitMsg(shooter, "<##40e0d0>大きな壁を生成しました!")
	playSound("block.glass.place", 1.5, 0.5, projectile)
	set {_base} to location of block at projectile
	loop {_w} times:
		set {_wnum} to loop-number
		if {_dir} is true:
			set {_wlloc::%{_wnum}%} to location of block {_wnum} - 1 meters north of {_base}
			set {_wrloc::%{_wnum}%} to location of block {_wnum} - 1 meters south of {_base}
		else:
			set {_wlloc::%{_wnum}%} to location of block {_wnum} - 1 meters east of {_base}
			set {_wrloc::%{_wnum}%} to location of block {_wnum} - 1 meters west of {_base}
		loop {_h} times:
			set {_hnum} to loop-number-2
			set {_hlloc::%{_hnum}%} to location of block {_hnum} - 1 meters above {_wlloc::%{_wnum}%}
			set {_hrloc::%{_hnum}%} to location of block {_hnum} - 1 meters above {_wrloc::%{_wnum}%}
		loop {_hlloc::*}:
			if block at loop-value-2 is air:
				set {_lb::%loop-value-2%} to loop-value-2
				set block at loop-value-2 to blue glass
		loop {_hrloc::*}:
			if block at loop-value-2 is air:
				set {_lb::%loop-value-2%} to loop-value-2
				set block at loop-value-2 to blue glass
	loop {_lb::*}:
		add loop-value to {Block.%shooter%::*}
	wait 10 seconds
	delete {Stats.%shooter%::WallProtection}
	playSound("block.glass.break", 1.5, 0.5, projectile)
	loop {_lb::*}:
		if block at loop-value is not air:
			set block at loop-value to air
			drawDot count 1, particle "blockcrack", material blue glass, center loop-value, visibleRange 30
		remove loop-value from {Block.%shooter%::*}

on break of blue glass:
	metadata value "gametype" of player is "Kit"
	cancel event
	wait a tick
	loop all players:
		{Stats.%loop-player%::WallProtection} is true
		{Block.%loop-player%::*} contains event-location
		set {_ok} to true
	if {_ok} is true:
		playSound("block.glass.break", 1, 1, event-location)
		set block at event-location to light blue glass

on break of light blue glass:
	metadata value "gametype" of player is "Kit"
	cancel event
	wait a tick
	loop all players:
		{Stats.%loop-player%::WallProtection} is true
		{Block.%loop-player%::*} contains event-location
		set {_ok} to true
	if {_ok} is true:
		playSound("block.glass.break", 1, 1, event-location)
		set block at event-location to white glass

on break of white glass:
	metadata value "gametype" of player is "Kit"
	cancel event
	wait a tick
	loop all players:
		{Stats.%loop-player%::WallProtection} is true
		{Block.%loop-player%::*} contains event-location
		set {_ok} to loop-player
	if {_ok} is set:
		playSound("block.glass.break", 1, 1, event-location)
		set block at event-location to air
		remove event-location from {Block.%{_ok}%::*}

function kitSkill_Defender_8(player: player):
	set {_armor::helmet} to helmet of {_player}
	set {_armor::chestplate} to chestplate of {_player}
	set {_armor::leggings} to leggings of {_player}
	set {_armor::boots} to boots of {_player}
	loop {_armor::*}:
		if loop-value is not air:
			set {_ok} to true
	if {_ok} is true:
		toolCT({_player}, "Defender", 8)
		set {Stats.%{_player}%::GuardCrash} to true
		kitShield({_player}, 10)
		kitMsg({_player}, "<##b22222>防具を壊して<##20b2aa>シールドを張ります!")
		set helmet of {_player} to air
		set chestplate of {_player} to air
		set leggings of {_player} to air
		set boots of {_player} to air
		playSound("block.enchantment_table.use", 1, 1.5, {_player})
		loop all players in radius 5 around {_player}:
			loop-player is not {_player}
			kitCheckTeam(loop-player, {_player}, true) is true
			{Stats.%loop-player%::NoSupport} is not set
			apply resistance 2 to loop-player for 5 seconds
			message "§5%{_player}% §eに耐性を貰った!" to loop-player
		remove slowness from {_player}
		apply speed 2 to {_player} for 5 seconds
		set {_baseloc} to location of {_player}
		loop 100 times:
			if loop-number is between 1 and 5:
				add 0.5 to {_y}
				set {_rad} to 0
				loop 72 times:
					set {_el} to {_baseloc}
					add 18 to {_rad}
					add 5 * sin({_rad}) to x-coordinate of {_el}
					add 5 * cos({_rad}) to z-coordinate of {_el}
					add {_y} to y-coordinate of {_el}
					drawDot count 1, particle "redstone", RGB 178, 34, 34, center {_el}, visibleRange 30
				wait a tick
			if {Stats.%{_player}%::GuardCrash} is true:
				if {Kit-Shield::%{_player}%} is set:
					set {_loc} to location of {_player}
					add 0.02 to {_dy}
					if {_dy} >= 4:
						set {_dy} to 0
					if {_dy} > 2:
						set {_y.f} to 2 - ({_dy} - 2)
					else:
						set {_y.f} to {_dy}
					add {_y.f} to y-coordinate of {_loc}
					add 9 to {_rad}
					add 0.5 * sin({_rad}) to x-coordinate of {_loc}
					add 0.5 * cos({_rad}) to z-coordinate of {_loc}
					drawDot count 1, particle "flame", center {_loc}, visibleRange 30
				else:
					set {Stats.%{_player}%::GuardCrash} to false
					playSound("block.respawn_anchor.deplete", 1.5, 1, {_player})
					apply strength 2 to {_player} for 5 seconds
					kitMsg({_player}, "§9シールド§cの崩壊で§4§l暴走した!")
					set {_gl} to location of {_player}
					add 1 to y-coordinate of {_gl}
					loop 50 times:
						draw 1 flame particle at {_gl} with direction randomVector({_gl}) and speed 0.5, keepFor 1 tick
			wait a tick
		{Stats.%{_player}%::GuardCrash} is set
		kitMsg({_player}, "§4Guard Crash§eの効果が終了しました")
		remove strength from {_player}
		delete {Kit-Shield::%{_player}%}
		delete {Kit-ShieldTime::%{_player}%}
		apply ambient slowness 3 to {_player} for 10000000000 seconds
		set helmet of {_player} to {_armor::helmet}
		set chestplate of {_player} to {_armor::chestplate}
		set leggings of {_player} to {_armor::leggings}
		set boots of {_player} to {_armor::boots}
		delete {Stats.%{_player}%::GuardCrash}
	else:
		send action bar "§c防具がないため発動できません" to {_player}

# Ultimate
function kitUltDefender(player: player):
	message "§cダメージを完全に無効化するバリアを張ります!" to {_player}
	message "§c触れた味方にもバリアを3秒付与します!" to {_player}
	set {Stats.%{_player}%::UltDefender} to true
	loop 200 times:
		loop all players:
			metadata value "gametype" of loop-player is "Kit"
			{Stats.%loop-player%::UltDefender} is true
			set {_s} to 0
			set {_t} to 0
			set {_pl} to location of loop-player
			add 1 to y-coordinate of {_pl}
			loop 19 time:
				loop 36 time:
					set {_loc} to {_pl}
					set {_vector} to {_loc}
					set {_x} to x-coordinate of {_loc}
					set {_y} to y-coordinate of {_loc}
					set {_z} to z-coordinate of {_loc}
					set x-coordinate of {_vector} to {_x} + ( 1 * sin({_s}) * cos({_t}) )
					set y-coordinate of {_vector} to {_y} + ( 1 * cos({_s}) )
					set z-coordinate of {_vector} to {_z} + ( 1 * sin({_s}) * sin({_t}) )
					chance of 1%:
						drawDot count 1, particle "redstone", RGB 0, 255, 255, center {_vector}, visibleRange 100
					add 10 to {_t}
				add 10 to {_s}
		loop all players in radius 2 around {_player}:
			loop-player is not {_player}
			{TrueTeam::%{_player}%} is {TrueTeam::%loop-player%}
			{Stats.%loop-player%::NoSupport} is not set
			if {_time::%loop-player%} is not set:
				set {_time::%loop-player%} to 0
				add loop-player to {_give::*}
			if {_time::%loop-player%} is not 60:
				playSound("entity.player.levelup", 1, 0.8, loop-player)
			if {Stats.%loop-player%::UltDefender} is not set:
				set {Stats.%loop-player%::UltDefender} to true
			set {_time::%loop-player%} to 60
			set {_hit::%loop-player%} to true
		loop {_give::*}:
			{_hit::%loop-value-2%} is not set
			subtract 1 from {_time::%loop-value-2%}
			if {_time::%loop-value-2%} <= 0:
				delete {Stats.%loop-value-2%::UltDefender}
		delete {_hit::*}
		wait a tick
	delete {Stats.%{_player}%::UltDefender}
	loop {_give::*}:
		if {Stats.%loop-value%::UltDefender} is true:
			delete {Stats.%loop-value%::UltDefender}

on damage of player:
	if {Stats.%victim%::UltDefender} is set:
		cancel event
		playSound("entity.item.break", 1, 0.5, victim)
		if attacker exists:
			push victim in direction of attacker at speed 1