# Angelic Bow

on damage of player:
	{Class::%attacker%} is "Paladin"
	damage was caused by projectile
	if metadata value "angelic-bow-healing" of projectile is true:
		cancel event
		kitEffect_AngelicBow_Healing(attacker, location of projectile)
		stop
	metadata value "angelic-bow" of projectile is true
	kitCheckAlive(attacker) is true
	kitHeal(attacker, 1, 3)
	heal attacker by 1 heart

on shoot:
	metadata value "gametype" of shooter is "Kit"
	{Class::%shooter%} is "Paladin"
	set {_tool} to shooter's tool
	kitItemAllChecker({_tool}, "Paladin", "Weapon.main", 3) is true
	set metadata value "angelic-bow" of projectile to true
	shooter is sneaking
	set {_arrow} to amount of arrow in shooter's inventory
	{_arrow} >= 3
	loop 3 times:
		remove an arrow from shooter
	set metadata value "angelic-bow-healing" of projectile to true
	# --- パーティクルの演出 ---
	kitParticle_AngelicBow_Arrow(shooter, projectile)
	# -----------------------

function kitEffect_AngelicBow_Healing(player: player, baseloc: location):
	kitParticle_AngelicBow_Ground({_baseloc})
	loop all players in radius 5 around {_baseloc}:
		{_player} is not loop-player
		kitCheckTeam({_player}, loop-player, true) is true
		kitHeal(loop-player, 3)
		kitParticle_AngelicBow_Heal(loop-player)

function kitParticle_AngelicBow_Ground(baseloc: loc):
	playSound("block.beacon.power_select", 1, 2, {_baseloc})
	set {_m} to 0
	loop 10 times:
		add 1 to {_m}
		set {_rad} to 0
		loop 36 times:
			add 10 to {_rad}
			set {_el} to {_baseloc}
			add {_m} * sin({_rad}) to x-pos of {_el}
			add {_m} * cos({_rad}) to z-pos of {_el}
			spawnParticle_Color(entity_effect, 235, 235, 100, {_el})
		wait a tick

function kitParticle_AngelicBow_Heal(target: player):
	playSound("entity.allay.ambient_without_item", 1, 1.6, {_target})
	set {_el} to location 1 meter above {_target}
	loop 10 times:
		set {_v} to randomVector({_el})
		spawnParticle_Vector(end_rod, {_v}, 0.1, {_el})

function kitParticle_AngelicBow_Arrow(player: player, proj: projectile):
	playSound("entity.allay.item_given", 1, 1.6, {_player})
	set {_baseloc} to location of {_player}
	loop 20 times:
		set {_loc.proj} to location of {_proj}
		# --- 矢に輪を描く演出 ---
		set {_eb} to {_loc.proj}
		set yaw of {_eb} to yaw of {_baseloc}
		set pitch of {_eb} to pitch of {_baseloc}
		set {_m1} to {_eb}
		set {_p} to pitch of {_m1}
		if {_p} < 0:
			set {_p} to -1 * 90 - {_p}
			set {_y} to yaw of {_m1}
			add 180 to {_y}
			if {_y} >= 360:
				set {_y} to {_y} - 360
			set yaw of {_m1} to {_y}
		else:
			set {_p} to {_p} - 90
		set pitch of {_m1} to {_p}
		loop 18 times:
			set {_test1} to 0.5 * cos({_rad})
			set {_t1} to location {_test1} meters in front of {_m1}
			set {_m2} to {_eb}
			set pitch of {_m2} to 0
			set {_test2} to 0.5 * sin({_rad})
			set {_t2} to location {_test2} meters to the right of {_m2}
			set x-coordinate of {_eb} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_eb}
			set y-coordinate of {_eb} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_eb}
			set z-coordinate of {_eb} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_eb}
			spawnParticle_DustTransition(rgb(235, 235, 110), rgb(255, 255, 255), 2.5, {_eb})
			add 20 to {_rad}
		# --------------------------
		wait a tick