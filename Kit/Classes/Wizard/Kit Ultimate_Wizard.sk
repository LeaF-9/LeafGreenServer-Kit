# Arcane Sorcery

options:
	itemname: "<##1beee3>§lArcane Staff"
	max-vector-length: 0.05
	beam-damage: 0.5
	beam-distance: 50

import:
	java.lang.Math

function kitUltWizard(player: player):
	wait a tick
	give a netherite hoe named {@itemname} to {_player}

on rightclick holding a netherite hoe:
	name of player's tool is {@itemname}
	cancel event
	getKitStats(player, "ArcaneSorcery") is not set
	kitEffect_ArcaneSorcery(player)



local function kitEffect_ArcaneSorcery(player: player):
	set {_now} to now
	setKitStats({_player}, "ArcaneSorcery", {_now})
	set {_slot} to {_player}.getInventory().getHeldItemSlot()

	# 準備フェーズ
	kitParticle_ArcaneSorcery_Circle({_player}, {_now})
	loop 60 times:
		if getKitStats({_player}, "ArcaneSorcery") is not {_now}:
			stop

		{_player}.getInventory().setHeldItemSlot({_slot})  # 武器スロット固定化
		set velocity of {_player} to vector(0, 0, 0)
		kitParticle_ArcaneSorcery_Charge({_player})
		wait a tick
	
	# 発射フェーズ
	# ビームエンティティ召喚
	set {_backloc} to location 1 meter in front of (head of {_player})
	set {_item} to sea lantern
	set {_color} to rgb(125, 250, 219).asBukkitColor()
	set {_translate.z} to ({@beam-distance} / 2) + 1
	set {_leftRotation} to getQuaternionf(0, 0, 0, 1)
	set {_rightRotation} to getQuaternionf(0, 0, 0, 1)
	set {_translation} to getVector3f(0, 0, {_translate.z})
	set {_scale} to getVector3f(3, 3, {@beam-distance})
	set {_transformation} to getTransformation({_leftRotation}, {_rightRotation}, {_translation}, {_scale})

	spawn a item display at {_backloc}
	set {_display} to spawned item display
	set metadata value "gametype" of {_display} to "Kit"
	set metadata value "Arcane Sorcery" of {_display} to {_player}
	set metadata value "Arcane Sorcery - Time" of {_display} to {_now}

	setBrightness({_display})
	{_display}.setGlowColorOverride({_color})
	{_display}.setGlowing(true)
	{_display}.setTeleportDuration(1)
	{_display}.setInterpolationDuration(1)
	{_display}.setViewRange(1000)
	setDisplayItem({_display}, {_item})
	{_display}.setTransformation({_transformation})

	kitParticle_ArcaneSorcery_Explode({_player})
	set {_addrad} to Math.toRadians(200 / 20)
	# set {_maxrad} to 180
	loop 100 times:
		wait a tick
		# 条件確認
		if getKitStats({_player}, "ArcaneSorcery") is not {_now}:
			continue
		
		kitSound_ArcaneSorcery_Beam({_player})
		{_player}.getInventory().setHeldItemSlot({_slot})  # 武器スロット固定化
		# Playerの視点操作
		set velocity of {_player} to vector(0, 0, 0)

		set {_nowloc} to location 1 meter in front of (head of {_player})
		set {_basevec} to setVector({_backloc}, location 1 meter in front of {_backloc})  # movelocから前方に向けたvector
		set {_plusvec} to setVector({_nowloc}, location 1 meter in front of {_nowloc}, 0)
		set vector length of {_plusvec} to {@max-vector-length} if vector length of {_plusvec} > {@max-vector-length}
		set {_vec} to {_basevec} + {_plusvec}
		# set yaw of {_player} to yaw of {_vec}
		# set pitch of {_player} to pitch of {_vec}

		set {_nextloc} to setDirToVec({_nowloc}, {_vec})
		set {_backloc} to {_nextloc}

		# ビームエンティティの状態操作
		kitParticle_ArcaneSorcery_Magic({_nextloc})
		kitParticle_ArcaneSorcery_Beam({_nextloc})
		teleport {_display} to {_nextloc}

		{_leftRotation}.rotateZ({_addrad})
		set {_transformation} to getTransformation({_leftRotation}, {_rightRotation}, {_translation}, {_scale})
		{_display}.setTransformation({_transformation})

		# ヒット確認
		set {_m} to 1
		set {_count} to 50
		set {_addm} to {@beam-distance} / {_count}
		set {_hitradius} to 3
		loop {_count} times:
			set {_hitloc} to location {_m} meters in front of {_nextloc}
			loop all entities in radius {_hitradius} around {_hitloc}:
				kitCheckTeam(loop-entity, {_player}, false, true) is true
				kitDamageInstant({_player}, loop-entity, {@beam-damage}, "神秘の大魔法", true)
				kitParticle_ArcaneSorcery_HitEntity({_player}, loop-entity)
			add {_addm} to {_m}
	
	# 終了処理
	{_display}.remove()
	if getKitStats({_player}, "ArcaneSorcery") is {_now}:
		deleteKitStats({_player}, "ArcaneSorcery")
		remove a netherite hoe named {@itemname} from {_player}



local function kitParticle_ArcaneSorcery_Circle(player: player, now: date):
	playSound("block.respawn_anchor.set_spawn", 100, 0.9, {_player})
	add rgb(204, 239, 241) to {_colors::*}
	add rgb(192, 250, 252) to {_colors::*}
	add rgb(183, 236, 225) to {_colors::*}

	loop 60 times:
		if getKitStats({_player}, "ArcaneSorcery") is not {_now}:
			stop
		
		set {_pitch} to 0.5 + (1.5 * ((loop-number) / 60))
		playSound("entity.allay.item_thrown", 3, {_pitch}, {_player})
		
		set {_baseloc} to location 1 meter in front of (head of {_player})
		set {_basevec} to setVector({_baseloc}, location 10 meters in front of  {_baseloc})
		set {_rotateloc} to {_baseloc}
		add 90 to pitch of {_rotateloc}
		set {_rotatevec} to setVector({_rotateloc}, location 10 meters in front of {_rotateloc}, 2)

		set {_loopnum} to loop-number
		# 円
		delete {_hexagons::*}
		set {_count} to 120
		set {_straightmeter} to {_count} / 5
		set {_rad} to 0
		set {_radius} to 2
		loop {_count} times:
			set {_rotate} to {_rotatevec}
			rotate {_rotate} around {_basevec} by {_rad}
			set {_el} to {_baseloc} ~ {_rotate}

			if mod({_rad}, 72) is 0 or 72:
				add {_el} to {_hexagons::*}
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Dust({_color}, 0.5, {_el})
			add 360 / {_count} to {_rad}
		
		# 星
		set {_dis.hex} to distance between {_hexagons::1} and {_hexagons::2} / {_straightmeter}  # 1 countに進むmeter(hex)
		set {_dis.star} to distance between {_hexagons::1} and {_hexagons::3} / {_straightmeter}  # 1 countに進むmeter(star)
		loop ({_loopnum} * 2) times:
			set {_loopnum.2} to loop-number-2
			set {_count.star} to mod({_loopnum.2}, {_straightmeter})
			if {_loopnum.2} < ({_straightmeter} * 1):
				set {_loc.hex} to setDirToVec({_hexagons::1}, setVector({_hexagons::1}, {_hexagons::2}))
				set {_loc.star} to setDirToVec({_hexagons::1}, setVector({_hexagons::1}, {_hexagons::3}))
			else if {_loopnum.2} < ({_straightmeter} * 2):
				set {_loc.hex} to setDirToVec({_hexagons::2}, setVector({_hexagons::2}, {_hexagons::3}))
				set {_loc.star} to setDirToVec({_hexagons::3}, setVector({_hexagons::3}, {_hexagons::5}))
			else if {_loopnum.2} < ({_straightmeter} * 3):
				set {_loc.hex} to setDirToVec({_hexagons::3}, setVector({_hexagons::3}, {_hexagons::4}))
				set {_loc.star} to setDirToVec({_hexagons::5}, setVector({_hexagons::5}, {_hexagons::2}))
			else if {_loopnum.2} < ({_straightmeter} * 4):
				set {_loc.hex} to setDirToVec({_hexagons::4}, setVector({_hexagons::4}, {_hexagons::5}))
				set {_loc.star} to setDirToVec({_hexagons::2}, setVector({_hexagons::2}, {_hexagons::4}))
			else:
				set {_loc.hex} to setDirToVec({_hexagons::5}, setVector({_hexagons::5}, {_hexagons::1}))
				set {_loc.star} to setDirToVec({_hexagons::4}, setVector({_hexagons::4}, {_hexagons::1}))
			set {_el.hex} to location {_count.star} * {_dis.hex} meters in front of {_loc.hex}
			set {_el.star} to location {_count.star} * {_dis.star} meters in front of {_loc.star}
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Dust({_color}, 0.5, {_el.hex})
			set {_color} to a random element out of {_colors::*}
			spawnParticle_Dust({_color}, 0.5, {_el.star})
		wait a tick

local function kitParticle_ArcaneSorcery_Charge(player: player):
	set {_baseloc} to location 1 meter above {_player}
	loop 10 times:
		spawnParticle_Speed(ominous_spawning, 5, {_baseloc})

local function kitParticle_ArcaneSorcery_Explode(player: player):
	kitSound_ArcaneSorcery_Launch({_player})
	set {_baseloc} to location 1 meter above {_player}
	spawnParticle(flash, {_baseloc})

	loop 50 times:
		spawnParticle_Vector(end_rod, randomVector(), 0.25, {_baseloc})
		spawnParticle_Vector(glow_squid_ink, randomVector(), 0.5, {_baseloc})

local function kitParticle_ArcaneSorcery_Magic(loc: location):
	add rgb(21, 241, 230) to {_colors::*}
	add rgb(12, 235, 243) to {_colors::*}
	add rgb(19, 247, 217) to {_colors::*}
		
	set {_baseloc} to {_loc}
	set {_basevec} to setVector({_baseloc}, location 10 meters in front of  {_baseloc})
	set {_rotateloc} to {_baseloc}
	add 90 to pitch of {_rotateloc}
	set {_rotatevec} to setVector({_rotateloc}, location 10 meters in front of {_rotateloc}, 2)

	# 円
	set {_count} to 120
	set {_straightmeter} to {_count} / 5
	set {_rad} to 0
	set {_radius} to 2
	loop {_count} times:
		set {_rotate} to {_rotatevec}
		rotate {_rotate} around {_basevec} by {_rad}
		set {_el} to {_baseloc} ~ {_rotate}

		if mod({_rad}, 72) is 0 or 72:
			add {_el} to {_hexagons::*}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Dust({_color}, 0.5, {_el})
		add 360 / {_count} to {_rad}
	
	# 星
	set {_dis.hex} to distance between {_hexagons::1} and {_hexagons::2} / {_straightmeter}  # 1 countに進むmeter(hex)
	set {_dis.star} to distance between {_hexagons::1} and {_hexagons::3} / {_straightmeter}  # 1 countに進むmeter(star)
	loop {_count} times:
		set {_loopnum.2} to loop-number-2
		set {_count.star} to mod({_loopnum.2}, {_straightmeter})
		if {_loopnum.2} < ({_straightmeter} * 1):
			set {_loc.hex} to setDirToVec({_hexagons::1}, setVector({_hexagons::1}, {_hexagons::2}))
			set {_loc.star} to setDirToVec({_hexagons::1}, setVector({_hexagons::1}, {_hexagons::3}))
		else if {_loopnum.2} < ({_straightmeter} * 2):
			set {_loc.hex} to setDirToVec({_hexagons::2}, setVector({_hexagons::2}, {_hexagons::3}))
			set {_loc.star} to setDirToVec({_hexagons::3}, setVector({_hexagons::3}, {_hexagons::5}))
		else if {_loopnum.2} < ({_straightmeter} * 3):
			set {_loc.hex} to setDirToVec({_hexagons::3}, setVector({_hexagons::3}, {_hexagons::4}))
			set {_loc.star} to setDirToVec({_hexagons::5}, setVector({_hexagons::5}, {_hexagons::2}))
		else if {_loopnum.2} < ({_straightmeter} * 4):
			set {_loc.hex} to setDirToVec({_hexagons::4}, setVector({_hexagons::4}, {_hexagons::5}))
			set {_loc.star} to setDirToVec({_hexagons::2}, setVector({_hexagons::2}, {_hexagons::4}))
		else:
			set {_loc.hex} to setDirToVec({_hexagons::5}, setVector({_hexagons::5}, {_hexagons::1}))
			set {_loc.star} to setDirToVec({_hexagons::4}, setVector({_hexagons::4}, {_hexagons::1}))
		set {_el.hex} to location {_count.star} * {_dis.hex} meters in front of {_loc.hex}
		set {_el.star} to location {_count.star} * {_dis.star} meters in front of {_loc.star}
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Dust({_color}, 0.5, {_el.hex})
		set {_color} to a random element out of {_colors::*}
		spawnParticle_Dust({_color}, 0.5, {_el.star})
	wait a tick

local function kitParticle_ArcaneSorcery_Beam(loc: location):
	add rgb(21, 241, 230) to {_colors::*}
	add rgb(12, 235, 243) to {_colors::*}
	add rgb(19, 247, 217) to {_colors::*}

	set {_baseloc} to {_loc}
	set {_basevec} to setVector({_baseloc}, location 1 meter in front of {_baseloc})
	set {_rotateloc} to {_baseloc}
	add 90 to pitch of {_rotateloc}
	set {_rotatevec} to setVector({_rotateloc}, location 1 meter in front of {_rotateloc}, 2)

	set {_count} to 10
	set {_m} to 0
	set {_addm} to {@beam-distance} / {_count}
	set {_circlecount} to 30
	set {_addrad} to 360 / {_circlecount}
	loop {_count} times:
		add {_addm} to {_m}

		set {_base} to location {_m} meters in front of {_baseloc}
		set {_rad} to 0
		loop {_circlecount} times:
			set {_rotate} to {_rotatevec}
			rotate {_rotate} around {_basevec} by {_rad}
			set {_el} to {_base} ~ {_rotate}

			set {_color} to a random element out of {_colors::*}
			spawnParticle_Dust({_color}, 0.5, {_el})

			add {_addrad} to {_rad}

local function kitParticle_ArcaneSorcery_HitEntity(player: player, entity: entity):
	set {_baseloc} to location 1 meter above {_entity}
	playSound("entity.allay.hurt", 0.1, 2, {_baseloc})
	playSound("entity.allay.hurt", 0.1, 2, {_player}, true)

	set {_rc} to a random integer between 3 and 5
	loop {_rc} times:
		set {_d} to dice(3)
		spawnParticle_BlockData(falling_dust, cyan wool, moveRandomLocation({_baseloc}, 1)) if {_d} is 1
		spawnParticle_BlockData(falling_dust, warped wart block, moveRandomLocation({_baseloc}, 1)) if {_d} is 2
		spawnParticle_BlockData(falling_dust, light blue wool, moveRandomLocation({_baseloc}, 1)) if {_d} is 1



local function kitSound_ArcaneSorcery_Launch(player: player):
	playSound("block.respawn_anchor.deplete", 100, 0.65, {_player})

local function kitSound_ArcaneSorcery_Beam(player: player):
	set {_pitch} to a random number between 0.5 and 2
	playSound("item.flintandsteel.use", 10, {_pitch}, {_player})