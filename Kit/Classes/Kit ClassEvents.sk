import:
    java.lang.Runnable

local function kitRunnableExecution(player: player, event: object, title: text = ""):
	stop if itemChecker({_player}) is false

	set {_item} to {_player}'s tool
	set {_titlelower} to {_title} in lowercase
	set {_functionkey} to "function-%{_titlelower}%"
	set {_nsk} to getNamespacedKey({_item}, {_functionkey}, "boolean")
	stop if {_nsk} is not true

	set {_itemkey} to getNamespacedKey({_item}, "item-key", "string")

	set {_behindkey} to ""

	if {_title} is not "RightClick":
		set {_behindkey} to {_title}
		replace "-" with "" in {_behindkey}
		set {_behindkey} to "_%{_behindkey}%"

	set {_func::run} to function reference "kitEffect_%{_itemkey}%%{_behindkey}%" called with ({_player}, {_event})
	set {_interact} to new proxy instance of Runnable using {_func::*}
	{_interact}.run()

# Events
on rightclick:
	kitRunnableExecution(player, event, "RightClick")

on shoot:
	kitRunnableExecution(shooter, event, "Shoot")

on leftclick:
	kitRunnableExecution(player, event, "LeftClick")

on damage with priority LOWEST:
	kitRunnableExecution(attacker, event, "Attack-Lowest") if checkEntityType(attacker, player) is true
	kitRunnableExecution(victim, event, "Damage-Lowest") if checkEntityType(victim, player) is true

on damage with priority LOW:
	kitRunnableExecution(attacker, event, "Attack-Low") if checkEntityType(attacker, player) is true
	kitRunnableExecution(victim, event, "Damage-Low") if checkEntityType(victim, player) is true

on damage with priority NORMAL:
	kitRunnableExecution(attacker, event, "Attack-Normal") if checkEntityType(attacker, player) is true
	kitRunnableExecution(victim, event, "Damage-Normal") if checkEntityType(victim, player) is true

on damage with priority HIGH:
	kitRunnableExecution(attacker, event, "Attack-High") if checkEntityType(attacker, player) is true
	kitRunnableExecution(victim, event, "Damage-High") if checkEntityType(victim, player) is true

on damage with priority HIGHEST:
	kitRunnableExecution(attacker, event, "Attack-Highest") if checkEntityType(attacker, player) is true
	kitRunnableExecution(victim, event, "Damage-Highest") if checkEntityType(victim, player) is true

local function itemChecker(player: player) :: boolean:
	return false if metadata value "gametype" of {_player} is not "Kit"

	set {_item} to {_player}'s tool
	set {_itemkit} to kitItemKitChecker({_item})
	return false if {_itemkit} is not set

	set {_itemtype} to kitItemTypeChecker({_item})
	return false if {_itemtype} is not set
	
	set {_itemnum} to kitItemNumberChecker({_item})
	return false if {_itemnum} is not set

	return false if checkCT({_player}, name of {_item}) is false
	return false if checkItemCT({_player}, {_item}) is false

	return true