# Item tag Checker
function kitItemKitChecker(skill: item) :: text:
	set {_nbt} to nbt compound of {_skill}
	set {_kit} to tag "kit" of {_nbt}
	return {_kit}

function kitItemTypeChecker(skill: item) :: text:
	set {_nbt} to nbt compound of {_skill}
	set {_type} to tag "type" of {_nbt}
	return {_type}

function kitItemNumberChecker(skill: item) :: number:
	set {_nbt} to nbt compound of {_skill}
	set {_num} to tag "number" of {_nbt}
	set {_num} to "%{_num}%" parsed as number
	return {_num}

function kitItemAllChecker(skill: item, kit: text, type: text, num: number) :: boolean:
	if kitItemKitChecker({_skill}) is {_kit}:
		if kitItemTypeChecker({_skill}) is {_type}:
			if kitItemNumberChecker({_skill}) is {_num}:
				return true
			else:
				return false
		else:
			return false
	else:
		return false

function kitItemTagChanger(skill: item, kit: text, type: text, num: number) :: item:
	set {_nbt} to nbt compound of {_skill}
	set tag "kit" of {_nbt} to {_kit}
	set tag "type" of {_nbt} to {_type}
	set tag "number" of {_nbt} to {_num}
	set {_newitem} to {_skill} with nbt {_nbt}
	return {_newitem}

# Player Choosing Checker
function kitSelectChecker_Weapon(player: player, kit: text) :: number:
	set {_uuid} to UUID of {_player}
	load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "player.%{_player}%.selectchecker"
	set {_num} to yml value "custom.%{_kit}%.weapon" from "player.%{_player}%.selectchecker"
	unload yml "player.%{_player}%.selectchecker"
	return {_num}

function kitSelectChecker_Skill(player: player, kit: text) :: numbers:
	set {_uuid} to UUID of {_player}
	load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "player.%{_player}%.selectchecker"
	loop 3 times:
		set {_num} to yml value "custom.%{_kit}%.skill.%loop-number%" from "player.%{_player}%.selectchecker"
		add {_num} to {_numlist::*}
	return {_numlist::*}