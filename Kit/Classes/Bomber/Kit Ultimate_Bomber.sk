# Nucleus Explosion

function kitUltBomber(player: player):
	wait a tick
	give a redstone block named "§4§lNuclear Bomb" to {_player}

on rightclick holding a redstone block:
	name of player's tool is "§4§lNuclear Bomb"
	cancel event
	remove a redstone block named "§4§lNuclear Bomb" from player
	playSound("entity.tnt.primed", 1.5, 0.5, player)
	shoot a primed tnt from player at speed 1.5
	set metadata value "attacker" of shot primed tnt to "%player%"
	set metadata value "kit-bomber" of shot primed tnt to 10
	set metadata value "ult-bomber" of shot primed tnt to "true"
	set glowing of shot primed tnt to true
	setFuseTime(shot primed tnt, 100)
	set {_shotentity} to shot primed tnt
	loop 100 times:
		spawnParticle(lava, {_shotentity})
		wait a tick

on explosion:
	if metadata value "ult-bomber" of event-entity is set:
		set {_act} to metadata value "attacker" of event-entity
		set {_act} to {_act} parsed as player
		set {_loc} to event-location
		wait a tick
		set {_count} to 5
		set {_count.min} to 5
		set {_count.max} to 20
		set {_round} to 10
		set {_round.min} to 10
		set {_round.max} to 30
		set {_ticknum} to 200
		loop {_ticknum} times:
			loop {_count} times:
				delete {_ok.loc}
				while {_ok.loc} is not set:
					set {_round.num} to a random number between 0 and {_round}
					set {_checkloc} to setDirToVec({_loc}, randomVector())
					set {_checkloc} to location {_round.num} meters in front of {_checkloc}
					if block at {_checkloc} is passable:
						set {_ok.loc} to true
				loop all entities in radius 5 around {_checkloc}:
					kitCheckTeam(loop-entity, {_act}, false, true) is true
					kitDamage({_act}, loop-entity, 3)
				spawnParticle(explosion_emitter, {_checkloc})
				set {_rb} to a random integer between 1 and 2
				set {_pitch} to a random number between 0.5 and 2
				if {_rb} is 1:
					playSound("entity.firework_rocket.large_blast", 1.5, {_pitch}, {_checkloc})
				else:
					playSound("entity.firework_rocket.blast", 1.5, {_pitch}, {_checkloc})
			# add
			add ({_count.max} - {_count.min}) / {_ticknum} to {_count}
			add ({_round.max} - {_round.min}) / {_ticknum} to {_round}
			wait a tick