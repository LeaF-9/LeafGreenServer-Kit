# Thiefのスキル Ver1.0.0

# Weapons
function kitWeaponThief(player: player):
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	checkCT({_player}, name of {_tool}) is true
	if {_item.num} is 3:
		kitWeapon_Thief_3({_player})
	else if {_item.num} is 4:
		kitWeapon_Thief_4({_player})

# Skills
function kitSkillThief(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_tool}) is true:
		if {_item.num} is 1:
			kitSkill_Thief_1({_player})
			return true
		else if {_item.num} is 2:
			kitSkill_Thief_2({_player})
			return true
		else if {_item.num} is 3:
			kitSkill_Thief_3({_player})
			return true
		else if {_item.num} is 4:
			kitSkill_Thief_4({_player})
			return true
		else if {_item.num} is 5:
			kitSkill_Thief_5({_player})
			return false
		else if {_item.num} is 6:
			kitSkill_Thief_6({_player})
			return true
		else if {_item.num} is 7:
			kitSkill_Thief_7({_player})
			return true
		else if {_item.num} is 8:
			kitSkill_Thief_8({_player})
			return true

on drop:
	{Class::%player%} is "Thief"
	set {_item} to event-item
	set {_nbt} to nbt item compound of {_item}
	set {_tag} to tag "stolen" of {_nbt}
	if {_tag} is not set:
		stop
	loop {StealItem-%{_tag}%.%player%::*}:
		loop-value is {_item}
		set {_index} to loop-index parsed as number + 1
	if {StealItem-%{_tag}%.%player%::%{_index}%} is not set:
		set {_index} to 1
	playSound("entity.experience_orb.pickup", 1, 1.65, player, true)
	send action bar "§b§lスキルを変更しました!" to player
	wait a tick
	player's tool is event-item
	remove event-item from player
	give {StealItem-%{_tag}%.%player%::%{_index}%} to player

# Abilities

# --- Stealed Item管理 ---
on inventory click:
	metadata value "gametype" of player is "Kit"
	type of event-inventory is chest inventory
	# --- Skill 6 ---
	if inventory name of event-inventory is "§6§lSkin Scanner":
		cancel event
		set {_playeritem} to clicked item
		{_playeritem} is set
		"%type of {_playeritem}%" is not "air"
		set {_target} to display name of {_playeritem}
		replace "§f§l" with "" in {_target}
		set {_target} to {_target} parsed as player
		kitSetSkinScanner(player, {_target})
		close player's inventory
	# ---------------
	# --- Skill 8 ---
	else if inventory name of event-inventory is "§d§lFence Marker":
		cancel event
		if {Stats.%player%::FenceMarker} is set:
			set {_fakeskill} to clicked item
			{_fakeskill} is set
			"%type of {_fakeskill}%" is not "air"
			close player's inventory
			set {_lore::*} to lore of {_fakeskill}
			loop {_lore::*}:
				if loop-value contains "§6所持者§7: §e":
					set {_target} to loop-value
					replace "§6所持者§7: §e" with "" in {_target}
					set {_target} to {_target} parsed as player
				else if loop-value contains "§6キット§7: §e":
					set {_type} to loop-value
					replace "§6キット§7: §e" with "" in {_type}
				else if loop-value contains "§6ナンバー§7: §e":
					set {_skillnum} to loop-value
					replace "§6ナンバー§7: §e" with "" in {_skillnum}
					set {_skillnum} to {_skillnum} parsed as number
			set {_skill} to kitPlayerSkillItem({_target}, {_type}, {_skillnum})
			if {_target}'s inventory contains {_skill}:
				kitItemTargetTimer(player, {_skill})
				kitMsg(player, "§8Fence Marker§dより §a%display name of {_skill}% §dを強奪した!")
				message formatted "§a%display name of {_skill}% §1を奪われた!" to {_target}
				playSound("entity.item.pickup", 1, 0.5, player)
				playSound("entity.witch.drink", 1, 0.9, {Stats.%player%::FenceMarker})
				set {_from} to {Stats.%player%::FenceMarker}
				set {_to} to location of head of {_target}
				set {_vector} to setVector({_from}, {_to})
				set yaw of {_from} to yaw of {_vector}
				set pitch of {_from} to pitch of {_vector}
				set {_dis} to round(distance between {_from} and {_to})
				loop {_dis} times:
					set {_el} to location loop-number meters in front of {_from}
					spawnParticle(smoke, {_el})
				loop all items in player's inventory:
					{_deleted} is not set
					kitItemAllChecker(loop-item, "Thief", "Skill", 8) is true
					set {_deleted} to true
					set {_tool} to loop-item
					remove loop-item from player
				set {Stats.%player%::Stealing.Fence Marker} to true
				set {Stats.%{_target}%::Stealed.Fence Marker} to true
				give {_skill} to player
				remove all {_skill} from {_target}
				wait 10 seconds
				if {Stats.%player%::Stealing.Fence Marker} is true:
					remove {_skill} from player
					give {_tool} to player
					delete {Stats.%player%::Stealing.Fence Marker}
				if {Stats.%{_target}%::Stealed.Fence Marker} is true:
					give {_skill} to {_target}
					delete {Stats.%{_target}%::Stealed.Fence Marker}
			else:
				send action bar "§c§l既にそのプレイヤーはスキルを所持していません!" to player
		else:
			send action bar "§c§l既にマーカーが破壊されています!" to player
	# -----------------
# -----------------------

on damage of player:
	if damage was caused by fall:
		{CLS::%victim%} is "THI"
		cancel event

# Timer
function kitTimerThief(player: player):
	set {_wn} to kitSelectChecker_Weapon({_player}, "Thief")
	if {_wn} is 1, 2 or 5:
		stop
	if {_wn} is 4:
		set {Stats.%{_player}%::GemStinger} to 0
		create bossbar titled "&a&lGem Bullets&e: &2&l%{Stats.%{_player}%::GemStinger}%" and id "%{_player}%-GemStinger" for {_player} with progress {Stats.%{_player}%::GemStinger} with colors green with style segmented 10
	while {Class::%{_player}%} is "Thief":
		if {_wn} is 3:
			add 1 to {_timer}
			kitEffect_MysticCard_Restore({_player}, {_timer})
		else if {_wn} is 4:
			set bossbar "%{_player}%-GemStinger" title to "&a&lGem Bullets&e: &2&l%{Stats.%{_player}%::GemStinger}%"
			set bossbar "%{_player}%-GemStinger" value to {Stats.%{_player}%::GemStinger}
		wait a second
	if {_wn} is 4:
		remove bossbar "%{_player}%-GemStinger"