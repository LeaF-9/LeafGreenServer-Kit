# Weapon-Name: Gem Stinger

on damage with priority LOW:
	set {_attacker} to getAttacker(victim)
	{Class::%{_attacker}%} is "Thief"
	# sneak + 攻撃時
	if damage was caused by attack:
		if {_attacker} is not sneaking:
			stop
		if "%type of victim%" is not "player":
			stop
		set {_tool} to {_attacker}'s tool
		kitItemAllChecker({_tool}, "Thief", "Weapon", 2) is true
		kitEffect_GemStinger_Drop({_attacker}, victim)
	# 宝石弾丸ヒット時
	else if damage was caused by projectile:
		metadata value "gem-stinger-bullet" of projectile is set
		setDamageModification_SET(victim, 2)
		if "%type of victim%" is "player":
			kitStun(victim, 10)
			kitEffectDescription(victim, "§6§l眩暈")
		kitParticle_GemStinger_Hit(victim)

on pick up emerald block:
	if name of item is not "%player%":
		stop
	if metadata value "gem-stinger" of event-dropped item is not true:
		stop
	delete event-dropped item
	kitEffect_GemStinger_Pickup(player)

on projectile hit:
	metadata value "gem-stinger-bullet" of projectile is set
	set metadata value "gem-stinger-bullet" of projectile to false

function kitWeapon_Thief_2(player: player):
	if {_player} is not sneaking:
		stop
	if kitStats_GET({_player}, "GemStinger") <= 0:
		stop
	set {_GemStinger} to kitStats_GET({_player}, "GemStinger")
	subtract 1 from {_GemStinger}
	kitStats_SET({_player}, "GemStinger", {_GemStinger})
	kitEffect_GemStinger_Launch({_player})

function kitEffect_GemStinger_Drop(attacker: player, victim: player):
	kitParticle_GemStinger_Crack({_victim})
	subtract 10 from durability of helmet of {_victim}
	subtract 10 from durability of chestplate of {_victim}
	subtract 10 from durability of leggings of {_victim}
	subtract 10 from durability of boots of {_victim}
	set {_ln} to a random integer between 1 and 3
	loop {_ln} times:
		set {_droploc} to aroundEffect({_victim})
		drop an emerald block named "%{_attacker}%" at {_droploc}
		set metadata value "gametype" of last dropped item to "Kit"
		set metadata value "delete" of last dropped item to "%{_player}%"
		set metadata value "undelete" of last dropped item to true
		set metadata value "gem-stinger" of last dropped item to true
		kitParticle_GemStinger_Drop({_droploc})

function kitEffect_GemStinger_Pickup(player: player):
	kitParticle_GemStinger_Pickup({_player})
	applyEffect({_player}, resistance, 1, 1.5 seconds)
	set {_GemStinger} to kitStats_GET({_player}, "GemStinger")
	add 1 to {_GemStinger}
	kitStats_SET({_player}, "GemStinger", {_GemStinger})

function kitEffect_GemStinger_Launch(player: player):
	kitParticle_GemStinger_Launch({_player})
	shoot a snowball from {_player} at speed 1.3
	set {_proj} to shot snowball
	set item of {_proj} to emerald block
	set metadata value "gem-stinger-bullet" of {_proj} to true
	kitParticle_GemStinger_Bullet({_proj})

function kitParticle_GemStinger_Crack(player: player):
	playSound("entity.allay.item_taken", 1, 1.8, {_player})
	loop 10 times:
		spawnParticle_Block(emerald block, aroundEffect({_player}))

function kitParticle_GemStinger_Drop(loc: location):
	loop 3 times:
		spawnParticle_Vector(glow, randomVector(), 0.1, {_loc})

function kitParticle_GemStinger_Pickup(player: player):
	playSound("entity.allay.item_thrown", 1, 2, {_player}, true)
	set {_baseloc} to location of {_player}
	add 1 to y-pos of {_baseloc}
	loop 5 times:
		spawnParticle_Vector(scrape, randomVector(), 0.3, {_baseloc})

function kitParticle_GemStinger_Launch(player: player):
	playSound("entity.allay.hurt", 1, 2, {_player})

function kitParticle_GemStinger_Bullet(proj: projectile):
	loop 60 times:
		if metadata value "gem-stinger-bullet" of {_proj} is not true:
			continue
		spawnParticle(composter, {_proj})
		wait a tick

function kitParticle_GemStinger_Hit(player: player):
	playSound("entity.allay.death", 1, 2, {_player})
	loop 10 times:
		spawnParticle_Vector(totem_of_undying, randomVector(), 0.5, {_player})