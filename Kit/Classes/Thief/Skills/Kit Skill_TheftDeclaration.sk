# Skill-Name: Theft Declaration

function kitEffect_TheftDeclaration(player: player):
	set {_tool} to tool of {_player}
	loop all entities:
		metadata value "gametype" of loop-entity is "Kit"
		metadata value "theft-declaration" of loop-entity is "%{_player}%"
		set {_baseloc} to location of loop-entity
		delete loop-entity
		set {_exist} to true
	if {_exist} is true:
		nameCT({_player}, "Theft Declaration")
		set yaw of {_baseloc} to yaw of {_player}
		set pitch of {_baseloc} to pitch of {_player}
		teleport {_player} to {_baseloc}
		kitMsg({_player}, "§5テレポートのみ行った...")
		playSound("entity.enderman.teleport", 1, 1.3, {_baseloc})
		loop 15 times:
			spawnParticle(reverse_portal, aroundEffect({_player}))
		stop
	set {_tool} to {_player}'s tool
	kitMsg({_player}, "§9予告状を出した...")
	playSound("entity.arrow.shoot", 1, 0.5, {_player})
	set {_from} to location of head of {_player}
	set {_to} to location 30 meters in front of {_from}
	set {_vector} to setVector({_from}, {_to}, 1.5)
	drop a paper named "%{_player}%" at location of head of {_player}
	set metadata value "gametype" of last dropped item to "Kit"
	set metadata value "undelete" of last dropped item to true
	set metadata value "theft-declaration" of last dropped item to "%{_player}%"
	kitParticle_TheftDeclaration_Paper(last dropped item)
	set velocity of last dropped item to {_vector}
	wait 3 seconds
	loop all entities:
		metadata value "gametype" of loop-entity is "Kit"
		metadata value "theft-declaration" of loop-entity is "%{_player}%"
		set {_baseloc} to location of loop-entity
		delete loop-entity
		set {_exist} to true
	{_exist} is true
	nameCT({_player}, "Theft Declaration")

	# 奈落チェック
	loop 10 times:
		continue if {_ok} is true
		add 1 to {_m}
		set {_checkloc} to location {_m} meters below {_baseloc}
		set {_ok} to true if block at {_checkloc} is not passable
	if {_ok} is not set:
		kitMsg({_player}, "§5§o予告状が危険な場所を示したので,やめておこう")
		setCT({_player}, (display name of {_tool}), 10)
		playSound("block.note_block.bass", 1, 1.6, {_player}, true)
		stop

	set yaw of {_baseloc} to yaw of {_player}
	set pitch of {_baseloc} to pitch of {_player}
	teleport {_player} to {_baseloc}
	make a fake explosion at {_baseloc}
	kitParticle_TheftDeclaration({_baseloc})
	kitMsg({_player}, "§c予告の通り窃盗を行なう!")
	playSound("entity.zombie_villager.converted", 1, 2, {_baseloc})
	loop all players in radius 10 around {_baseloc}:
		kitCheckTeam({_player}, loop-player, false, true) is true
		message formatted "§bスキル§cを盗まれてしまった!" to loop-player
		applyEffect(loop-player, blindness, 1, 100)
		kitEffectDescription(loop-player, "§7§l窃盗 §8& §0§l盲目")
		sendTimeBossbar_RED(loop-player, "§7§l窃盗", 200)
		sendTimeBossbar_RED(loop-player, "§0盲目", 100)
		if {Class::%loop-player%} is "Werewolf":
			if getKitStats(loop-player, "Instinct") is true:
				set {_type.%loop-player%} to "Werewolf_Instinct"
			else:
				set {_type.%loop-player%} to {Class::%loop-player%}
		else if {Class::%loop-player%} is "Vampire":
			if getKitStats(loop-player, "BatMode") is true:
				set {_type.%loop-player%} to "Vampire_Bat"
			else:
				set {_type.%loop-player%} to {Class::%loop-player%}
		else:
			set {_type.%loop-player%} to {Class::%loop-player%}
		loop 3 times:
			set {_skill} to kitPlayerSkillItem(loop-player, {_type.%loop-player%}, loop-number)
			if loop-player's inventory contains {_skill}:
				add {_skill} to {_stolenskills.%loop-player%::*}
				set {_newskill} to setNamespacedKey({_skill}, "stolen", "string", "Theft Declaration")
				add {_newskill} to {_skills::*}
		loop 3 times:
			set {_skill} to kitPlayerSkillItem(loop-player, {_type.%loop-player%}, loop-number)
			remove {_skill} from loop-player
		if size of {_stolenskills.%loop-player%::*} is not 0:
			setKitStats(loop-player, "Stolen.Theft Declaration", true)
			add loop-player to {_stolens::*}
	if size of {_skills::*} is 0:
		kitMsg({_player}, "§1スキルを盗むことはできませんでした...")
		stop
	sendTimeBossbar_GREEN({_player}, "Theft Declaration", 200)
	setKitStats({_player}, "Stealing.Theft Declaration", true)
	set {StealItem-Theft Declaration.%{_player}%::*} to {_skills::*}
	remove {_tool} from {_player}
	give {_skills::1} to {_player}
	wait 10 seconds
	loop all players:
		{_stolens::*} contains loop-player
		if getKitStats(loop-player, "Stolen.Theft Declaration") is true:
			loop 3 times:
				set {_skill} to kitPlayerSkillItem(loop-player, {_type.%loop-player%}, loop-number)
				give {_skill} to loop-player
			deleteKitStats(loop-player, "Stolen.Theft Declaration")
	if getKitStats({_player}, "Stealing.Theft Declaration") is true:
		loop {_skills::*}:
			remove loop-value from {_player}
		give {_tool} to {_player}
		delete {StealItem-Theft Declaration.%{_player}%::*}
		deleteKitStats({_player}, "Stealing.Theft Declaration")

function kitParticle_TheftDeclaration_Paper(entity: entity):
	loop 60 times:
		spawnParticle(cloud, location of {_entity})
		wait a tick

on damage of dropped item:
	metadata value "theft-declaration" of victim is set
	cancel event

function kitParticle_TheftDeclaration(loc: location):
	set {_rad} to 0
	loop 10 times:
		set {_m} to 11 - loop-number
		loop 10 times:
			add 36 to {_rad}
			set {_vec} to vector({_m}, 0, 0)
			rotate {_vec} around y-axis by {_rad}
			set {_el} to {_loc} ~ {_vec}
			spawnParticle_Dust(rgb(255, 255, 255), 1, {_el})
		add 10 to {_rad}
		wait a tick