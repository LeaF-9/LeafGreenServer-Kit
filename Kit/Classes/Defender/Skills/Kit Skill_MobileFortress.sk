# Mobile Fortress

options:
	effect-tick: 200
	effect-radius: 8
	metadata-particle: "Mobile Fortress - Cancel Particle"
	metadata-launcher: "Mobile Fortress - Launch Time"
	metadata-protected: "Mobile Fortress - Protected"



on damage with priority HIGH:
	metadata value {@metadata-protected} of victim is set
	set {_attacker} to getAttacker(victim)
	{_attacker} is set
	set {_distance} to distance between {_attacker} and victim
	if {_distance} <= {@effect-radius}:
		stop

	cancel event
	kitEffectDescription(victim, "§9§l防御")

	set {_now} to now
	set {_time} to metadata value {@metadata-particle} of victim
	set {_dif} to difference between {_now} and {_time}
	stop if {_dif} < 20 ticks

	set metadata value {@metadata-particle} of victim to {_now}
	kitParticle_MobileFortress_Damage(victim)
	wait 20 ticks
	delete metadata value {@metadata-particle} of victim



function kitEffect_MobileFortress(player: player):
	nameCT({_player}, "Mobile Fortress")
	set {_now} to now
	set metadata value {@metadata-launcher} of {_player} to {_now}
	kitMsg({_player}, "<##1e90ff>10秒間,<##00bfff>領域外からの攻撃を無効化します!")
	sendTimeBossbar_GREEN({_player}, "Mobile Fortress", {@effect-tick})
	kitParticle_MobileFortress_Shield({_player})
	loop 200 times:
		if metadata value {@metadata-launcher} of {_player} is not {_now}:
			continue

		delete {_enter.now::*}
		loop all entities in radius {@effect-radius} around {_player}:
			kitCheckTeam(loop-entity, {_player}, true) is true
			add loop-entity to {_enter.now::*}
			kitParticle_MobileFortress_Protected(loop-entity)
			if {_enter.past::*} does not contain loop-entity:
				add loop-entity to {_enter.past::*}
				set metadata value {@metadata-protected} of loop-entity to {_now}
				kitSound_MobileFortress_Protected(loop-entity)
		
		loop {_enter.past::*}:
			set {_loop-entity} to loop-value-2
			if {_enter.now::*} contains {_loop-entity}:
				continue
			
			remove {_loop-entity} from {_enter.past::*}
			delete metadata value {@metadata-protected} of {_loop-entity}
			kitParticle_MobileFortress_Broken({_loop-entity})

		wait a tick
	kitMsg({_player}, "§bMobile Fortress<##6495ed>の効果が終了しました")
	loop {_enter.past::*}:
		set {_loop-entity} to loop-value
		if metadata value {@metadata-protected} of {_loop-entity} is not {_now}:
			continue
		
		delete metadata value {@metadata-protected} of {_loop-entity}
		kitParticle_MobileFortress_Broken({_loop-entity})



local function kitParticle_MobileFortress_Damage(entity: entity):
	set {_baseloc} to location of {_entity}
	playSound("block.beacon.deactivate", 0.7, 2, {_baseloc})

	add rgb(82, 167, 236) to {_colors::*}
	add rgb(119, 210, 233) to {_colors::*}
	add rgb(77, 228, 215) to {_colors::*}

	set {_baseloc} to location 1 meter above {_baseloc}
	loop 30 times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		set {_color} to a random element out of {_colors::*}
		set {_size} to a random number between 1 and 2
		spawnParticle_DustTransition({_color}, rgb(7, 42, 82), {_size}, {_el})

local function kitParticle_MobileFortress_Shield(player: player):
	playSound("block.beacon.power_select", 1, 0.8, {_player})
	kitParticle_MobileFortress_Border({_player})

	set {_now} to metadata value {@metadata-launcher} of {_player}
	set {_rad} to 0
	set {_count} to 16
	set {_addrad} to 360 / {_count}

	set {_baseloc} to location of {_player}
	set pitch of {_baseloc} to 0
	set {_ln} to 0
	set {_item} to "minecraft:waxed_oxidized_cut_copper"
	loop {_count} times:
		add 1 to {_ln}
		set {_loc.shield} to {_baseloc}
		set yaw of {_loc.shield} to {_rad}

		set {_transformation} to kitTransformation("[0f,0f,0f,1f]", "[0f,0f,0f,1f]", "[0f,2.5f,{@effect-radius}f]", "[1f,3f,0.1f]")
		set {_nbt} to nbt compound from "{transformation:%{_transformation}%,item:{id:""%{_item}%"",Count:1b},brightness:{block:15,sky:15},teleport_duration:1}"
		spawn an item display at {_loc.shield} with nbt {_nbt}
		set {_itemdisplay} to spawned item display
		set metadata value "gametype" of {_itemdisplay} to "Kit"
		set metadata value "Mobile Fortress" of {_itemdisplay} to "%{_player}%"
		set {_displays::%{_ln}%} to {_itemdisplay}

		add {_addrad} to {_rad}

	set {_baserad} to 0
	set {_addrad} to 360 / 200
	set {_mulrad} to 360 / {_count}
	loop {@effect-tick} times:
		if metadata value {@metadata-launcher} of {_player} is not {_now}:
			continue

		set {_baseloc} to location of {_player}
		set pitch of {_baseloc} to 0

		set {_ln.2} to 0
		loop {_count} times:
			add 1 to {_ln.2}
			set {_display} to {_displays::%{_ln.2}%}

			set {_loc.teleport} to {_baseloc}
			set yaw of {_loc.teleport} to {_baserad} + ({_mulrad} * ({_ln.2} - 1))

			teleport {_display} to {_loc.teleport}

		add {_addrad} to {_baserad}
		wait a tick
	
	loop all item displays:
		{_displays::*} contains loop-item display
		delete loop-item display

local function kitParticle_MobileFortress_Border(player: player):	
	add rgb(82, 167, 236) to {_colors::*}
	add rgb(119, 210, 233) to {_colors::*}
	add rgb(77, 228, 215) to {_colors::*}

	set {_now} to metadata value {@metadata-launcher} of {_player}
	set {_count} to 100
	set {_addrad} to 360 / {_count}

	loop {@effect-tick} times:
		if metadata value {@metadata-launcher} of {_player} is not {_now}:
			stop

		set {_baseloc} to location of {_player}
		set yaw of {_baseloc} to 0
		set pitch of {_baseloc} to 0
		set {_basevec} to setVector({_baseloc}, location 10 meters in front of {_baseloc})

		set {_ln.2} to 0
		loop {_count} times:
			add 1 to {_ln.2}
			set {_rad} to ({_addrad} * ({_ln.2} - 1))

			set {_rotatevec} to {_basevec}
			rotate {_rotatevec} around y-axis by {_rad}

			set {_ln.3} to 0
			set {_basey} to 1
			set {_addy} to 1.5
			loop 3 times:
				add 1 to {_ln.3}

				set {_base} to {_baseloc}
				add {_basey} to y-pos of {_base}
				set {_el} to setDirToVec({_base}, {_rotatevec})
				set {_el} to location {@effect-radius} meters in front of {_el}

				set {_color} to a random element out of {_colors::*}
				spawnParticle_Dust({_color}, 0.75, {_el})
				add {_addy} to {_basey}

		wait a tick

local function kitParticle_MobileFortress_Protected(entity: entity):
	set {_baseloc} to location of {_entity}
	set yaw of {_baseloc} to 0
	set pitch of {_baseloc} to 0
	set {_basevec} to setVector({_baseloc}, location 10 meters in front of {_baseloc})

	add rgb(82, 167, 236) to {_colors::*}
	add rgb(119, 210, 233) to {_colors::*}
	add rgb(77, 228, 215) to {_colors::*}

	set {_count} to 10
	set {_addrad} to 360 / {_count}
	set {_ln} to 0
	loop {_count} times:
		add 1 to {_ln}
		set {_rad} to ({_addrad} * ({_ln} - 1))

		set {_rotatevec} to {_basevec}
		rotate {_rotatevec} around y-axis by {_rad}

		set {_ln.2} to 0
		set {_basey} to 0
		set {_addy} to 1
		loop 3 times:
			add 1 to {_ln.2}

			set {_base} to {_baseloc}
			add {_basey} to y-pos of {_base}
			set {_el} to setDirToVec({_base}, {_rotatevec})
			set {_el} to location 0.5 meters in front of {_el}

			set {_color} to a random element out of {_colors::*}
			spawnParticle_Dust({_color}, 0.75, {_el})
			add {_addy} to {_basey}


local function kitParticle_MobileFortress_Broken(entity: entity):
	kitSound_MobileFortress_Broken({_entity})

	set {_baseloc} to location 1 meter above {_entity}
	loop 30 times:
		set {_el} to moveRandomLocation({_baseloc}, 1)
		spawnParticle_Block(prismarine bricks, {_el})



local function kitSound_MobileFortress_Protected(entity: entity):
	set {_baseloc} to location of {_entity}
	playSound("block.anvil.land", 1, 1.3, {_baseloc})

local function kitSound_MobileFortress_Broken(entity: entity):
	set {_baseloc} to location of {_entity}
	playSound("entity.item.break", 1, 1.3, {_baseloc})