import:
	org.bukkit.attribute.Attribute
	org.bukkit.event.entity.EntityDamageEvent$DamageModifier

# memo
# metadata: "damage modification - %index%" (value: number)
# 加算: add | 乗算: mul | 設定: set
# 受け手(victim)に付与
function setDamageModification_ADD(entity: entity, num: number):
	set metadata value "damage modification - add" of {_entity} to {_num}

function getDamageModification_ADD(entity: entity) :: number:
	set {_num} to metadata value "damage modification - add" of {_entity}
	if {_num} is not set:
		set {_num} to 0
	return {_num}

function removeDamageModification_ADD(entity: entity):
	delete metadata value "damage modification - add" of {_entity}



function setDamageModification_MUL(entity: entity, num: number):
	set metadata value "damage modification - mul" of {_entity} to {_num}

function getDamageModification_MUL(entity: entity) :: number:
	set {_num} to metadata value "damage modification - mul" of {_entity}
	if {_num} is not set:
		set {_num} to 1
	return {_num}

function removeDamageModification_MUL(entity: entity):
	delete metadata value "damage modification - mul" of {_entity}



function setDamageModification_SET(entity: entity, num: number):
	set metadata value "damage modification - set" of {_entity} to {_num}

function getDamageModification_SET(entity: entity) :: number:
	set {_num} to metadata value "damage modification - set" of {_entity}
	if {_num} is not set:
		set {_num} to -1
	return {_num}

function removeDamageModification_SET(entity: entity):
	delete metadata value "damage modification - set" of {_entity}



function setDamageModification_FIX(entity: entity, num: number):
	set metadata value "damage modification - fix" of {_entity} to {_num}

function getDamageModification_FIX(entity: entity) :: number:
	set {_num} to metadata value "damage modification - fix" of {_entity}
	if {_num} is not set:
		set {_num} to -1
	return {_num}

function removeDamageModification_FIX(entity: entity):
	delete metadata value "damage modification - fix" of {_entity}



function getDamageModification_ALL(entity: entity, damage: num) :: number:
	if getDamageModification_FIX({_entity}) is not -1:
		set {_damage} to getDamageModification_FIX({_entity})
		set {_fix} to true

	else:
		if getDamageModification_SET({_entity}) is not -1:
			set {_damage} to getDamageModification_SET({_entity})
		
		set {_dm.add} to getDamageModification_ADD({_entity})
		set {_dm.mul} to getDamageModification_MUL({_entity})
		set {_damage} to ({_damage} + {_dm.add}) * {_dm.mul}
	
	return {_damage}



# Damage Modificationを適用するイベント
on damage with priority MONITOR:

	# ダメージ量取得
	set {_damage} to damage

	if getDamageModification_FIX(victim) is not -1:
		set {_damage} to getDamageModification_FIX(victim)
		set {_fix} to true

	else:
		if getDamageModification_SET(victim) is not -1:
			set {_damage} to getDamageModification_SET(victim)
		
		set {_dm.add} to getDamageModification_ADD(victim)
		set {_dm.mul} to getDamageModification_MUL(victim)
		set {_damage} to ({_damage} + {_dm.add}) * {_dm.mul}

	# ダメージ操作データ消去
	removeDamageModification_ADD(victim)
	removeDamageModification_MUL(victim)
	removeDamageModification_SET(victim)
	removeDamageModification_FIX(victim)

	# attacker消去
	deleteAttacker(victim)

	# シールド処理
	if getShield(victim) > 0:
		ShieldDamageEvent(victim, {_damage}, damage cause)
		send action bar "§3§lシールド §cにダメージを§4§l無効化§cされた!" to attacker
		cancel event
		stop

	# ダメージ量操作
	event.setDamage(DamageModifier.BASE, {_damage} * 2)
	if {_fix} is true:
		event.setDamage(DamageModifier.ARMOR, 0)
		event.setDamage(DamageModifier.RESISTANCE, 0)
	
	kitHealthDisplay_Damage(victim, {_damage}, event)
	
	delete metadata value "raw damage" of victim
	delete metadata value "kit damage" of victim



function kitDamage(attacker: player, victim: entity, damage: number, cause: text, fix: boolean = false):
	if checkEntityType({_victim}, player) is true:
		LastKiller({_victim}, {_attacker})
		setLastDamage({_victim}, {_cause})
	setAttacker({_victim}, {_attacker})

	set {_now} to now
	set metadata value "kit damage" of {_victim} to {_now}

	if {_fix} is true:
		damage {_victim} by {_damage} hearts
	else:
		# Attribute取得
		set {_attribute.armor} to {_victim}.getAttribute(Attribute.ARMOR).getValue()  # 防具値 (最大20)
		set {_attribute.armor_toughness} to {_victim}.getAttribute(Attribute.ARMOR_TOUGHNESS).getValue()  # 防具強度値 (最大20)

		# 軽減率計算
		set {_calcdamage} to {_damage} * 2

		set {_maxarg.1} to {_attribute.armor} / 5
		set {_maxarg.2} to {_attribute.armor} - ((4 * {_calcdamage}) / ({_attribute.armor_toughness} + 8))
		set {_maxarg} to max({_maxarg.1}, {_maxarg.2})
		set {_minarg} to min(20, {_maxarg})

		set {_truedamage} to {_calcdamage} * (1 - {_minarg} / 25)
		set {_truedamage} to {_truedamage} * 0.5
		damage {_victim} by {_truedamage} hearts

# checkDamagableを通さないダメージ関数
function kitDamageNull(attacker: player, victim: entity, damage: number, cause: text, fix: boolean = false):
	delete metadata value "raw damage" of {_victim}
	delete metadata value "kit damage" of {_victim}

	if checkEntityType({_victim}, player) is true:
		LastKiller({_victim}, {_attacker})
		setLastDamage({_victim}, {_cause})
	setAttacker({_victim}, {_attacker})

	kitHealthDisplay_Damage({_victim}, {_damage})

	if {_fix} is true:
		damage {_victim} by {_damage} hearts
	else:
		# Attribute取得
		set {_attribute.armor} to {_victim}.getAttribute(Attribute.ARMOR).getValue()  # 防具値 (最大20)
		set {_attribute.armor_toughness} to {_victim}.getAttribute(Attribute.ARMOR_TOUGHNESS).getValue()  # 防具強度値 (最大20)

		# 軽減率計算
		set {_calcdamage} to {_damage} * 2

		set {_maxarg.1} to {_attribute.armor} / 5
		set {_maxarg.2} to {_attribute.armor} - ((4 * {_calcdamage}) / ({_attribute.armor_toughness} + 8))
		set {_maxarg} to max({_maxarg.1}, {_maxarg.2})
		set {_minarg} to min(20, {_maxarg})

		set {_truedamage} to {_calcdamage} * (1 - {_minarg} / 25)
		set {_truedamage} to {_truedamage} * 0.5
		damage {_victim} by {_truedamage} hearts

function kitDamageInstant(attacker: player, victim: entity, damage: number, cause: text, fix: boolean = false):
	if checkEntityType({_victim}, player) is true:
		LastKiller({_victim}, {_attacker})
		setLastDamage({_victim}, {_cause})
	setAttacker({_victim}, {_attacker})

	set {_now} to now
	set metadata value "kit damage" of {_victim} to {_now}

	# 無敵時間操作
	set {_baseTick} to maximum damage delay of {_victim}
	set maximum damage delay of {_victim} to 1 tick

	if {_fix} is true:
		damage {_victim} by {_damage} hearts
	else:
		# Attribute取得
		set {_attribute.armor} to {_victim}.getAttribute(Attribute.ARMOR).getValue()  # 防具値 (最大20)
		set {_attribute.armor_toughness} to {_victim}.getAttribute(Attribute.ARMOR_TOUGHNESS).getValue()  # 防具強度値 (最大20)

		# 軽減率計算
		set {_calcdamage} to {_damage} * 2

		set {_maxarg.1} to {_attribute.armor} / 5
		set {_maxarg.2} to {_attribute.armor} - ((4 * {_calcdamage}) / ({_attribute.armor_toughness} + 8))
		set {_maxarg} to max({_maxarg.1}, {_maxarg.2})
		set {_minarg} to min(20, {_maxarg})

		set {_truedamage} to {_calcdamage} * (1 - {_minarg} / 25)
		set {_truedamage} to {_truedamage} * 0.5
		damage {_victim} by {_truedamage} hearts
	
	# 無敵時間戻す
	set maximum damage delay of {_victim} to {_baseTick}

on damage of player:
	getKitStats(victim, "Invincible") is true
	cancel event


# Heal
function kitHeal(player: entity, heart: number, particle: number = 5):
	if checkEntityType({_player}, player) is true:
		if getDebuffs({_player}, "Blood") is true:
			stop

	heal {_player} by {_heart} hearts
	kitHealthDisplay_Heal({_player}, {_heart})
	if {_particle} >= 1:
		healEffect({_player}, {_particle})

function healEffect(player: entity, count: number = 5):
	loop {_count} times:
		set {_loc} to location of {_player}
		add a random number between -1 and 1 to x-coordinate of {_loc}
		add a random number between 0 and 2 to y-coordinate of {_loc}
		add a random number between -1 and 1 to z-coordinate of {_loc}
		spawnParticle(heart, {_loc})



# raw damageかどうかを確認する処理
on damage with priority LOWEST:
	# checking unknown damage
	if damage cause is unknown:
		stop
	set {_now} to now
	set metadata value "raw damage" of victim to {_now}

	if attacker exists:
		setAttacker(victim, attacker)

# ダメージを受けた際、それがskriptからのものでないことを確認する関数
function checkDamagable(entity: entity) :: boolean:
	set {_kittime} to metadata value "kit damage" of {_entity}
	if {_kittime} is set:
		set {_now} to now
		set {_diftime} to difference between {_kittime} and {_now}
		if {_diftime} < 1 tick:
			delete metadata value "kit damage" of {_entity}
			return true

	set {_rawtime} to metadata value "raw damage" of {_entity}
	if {_rawtime} is not set:
		return false

	set {_now} to now
	set {_diftime} to difference between {_rawtime} and {_now}
	if {_diftime} >= 1 tick:
		return false

	return true



# ダメージを与えたプレイヤーを処理する関数
function getAttacker(victim: entity) :: entity:
	set {_attacker} to metadata value "attacker" of {_victim}
	return {_attacker}

function setAttacker(victim: entity, attacker: entity):
	set metadata value "attacker" of {_victim} to {_attacker}

function deleteAttacker(victim: entity):
	delete metadata value "attacker" of {_victim}