import:
	org.bukkit.attribute.Attribute
	org.bukkit.event.entity.EntityDamageEvent$DamageModifier

# memo
# metadata: "damage modification - %index%" (value: number)
# 加算: add | 乗算: mul | 設定: set
# 受け手(victim)に付与
function setDamageModification_ADD(entity: entity, num: number):
	set metadata value "damage modification - add" of {_entity} to {_num}

function getDamageModification_ADD(entity: entity) :: number:
	set {_num} to metadata value "damage modification - add" of {_entity}
	if {_num} is not set:
		set {_num} to 0
	return {_num}

function removeDamageModification_ADD(entity: entity):
	delete metadata value "damage modification - add" of {_entity}



function setDamageModification_MUL(entity: entity, num: number):
	set metadata value "damage modification - mul" of {_entity} to {_num}

function getDamageModification_MUL(entity: entity) :: number:
	set {_num} to metadata value "damage modification - mul" of {_entity}
	if {_num} is not set:
		set {_num} to 1
	return {_num}

function removeDamageModification_MUL(entity: entity):
	delete metadata value "damage modification - mul" of {_entity}



function setDamageModification_SET(entity: entity, num: number):
	set metadata value "damage modification - set" of {_entity} to {_num}

function getDamageModification_SET(entity: entity) :: number:
	set {_num} to metadata value "damage modification - set" of {_entity}
	if {_num} is not set:
		set {_num} to -1
	return {_num}

function removeDamageModification_SET(entity: entity):
	delete metadata value "damage modification - set" of {_entity}



# Damage Modificationを適用するイベント
on damage with priority MONITOR:
	checkDamagable(victim) is true

	set {_damage} to damage
	if getDamageModification_SET(victim) is not -1:
		set {_damage} to getDamageModification_SET(victim)
		set {_fix} to true
	
	else:
		set {_dm.add} to getDamageModification_ADD(victim)
		set {_dm.mul} to getDamageModification_MUL(victim)
		set {_damage} to ({_damage} + {_dm.add}) * {_dm.mul}

	event.setDamage(DamageModifier.BASE, {_damage} * 2)
	if {_fix} is true:
		event.setDamage(DamageModifier.ARMOR, 0)
		event.setDamage(DamageModifier.RESISTANCE, 0)



function kitDamage(attacker: player, victim: entity, damage: number, fix: boolean = false):
	if checkEntityType({_victim}, player) is true:
		LastKiller({_victim}, {_attacker})
	
	if getDamageModification_SET({_victim}) is not -1:
		set {_damage} to getDamageModification_SET({_victim})
		set {_fix} to true
	
	else:
		set {_dm.add} to getDamageModification_ADD({_victim})
		set {_dm.mul} to getDamageModification_MUL({_victim})
		set {_damage} to ({_damage} + {_dm.add}) * {_dm.mul}

	if {_fix} is true:
		{Stats.%{_victim}%::DamageTicks} is not set
		{Stats.%{_victim}%::Invincible} is not set
		if {Kit-Shield::%{_victim}%} is set:
			set {_shield} to {Kit-Shield::%{_victim}%}
			subtract {_damage} from {_shield}
			send action bar "§9§lシールドがダメージを無効化した!" to {_victim}
			send action bar "§c§lシールドが攻撃を阻害した!" to {_attacker}
			if {_shield} > 0:
				set {Kit-Shield::%{_victim}%} to {_shield}
				playSound("block.anvil.land", 0.7, 2, {_victim})
			else:
				delete {Kit-Shield::%{_victim}%}
				delete {Kit-ShieldTime::%{_victim}%}
				message formatted "§3§lシールドが崩壊した!" to {_victim}
				playSound("entity.item.break", 0.7, 1, {_victim})
		else:
			set {_health} to health of {_victim}
			subtract {_damage} from {_health}
			if {_health} <= 0:
				damage {_victim} by 10000 hearts
			else:
				set health of {_victim} to {_health}
			playSound("entity.generic.hurt", 1, 1, {_victim})
			play hurt animation on {_victim}
		set {_atktick} to 20  # maximum damage delay of {_victim}
		set {Stats.%{_victim}%::DamageTicks} to round({_atktick} / 2)
		while {Stats.%{_victim}%::DamageTicks} is set:
			wait a tick
			subtract 1 from {Stats.%{_victim}%::DamageTicks}
			if {Stats.%{_victim}%::DamageTicks} <= 0:
				delete {Stats.%{_victim}%::DamageTicks}
	else:
		# Attribute取得
		set {_attribute.armor} to {_victim}.getAttribute(Attribute.GENERIC_ARMOR).getValue()  # 防具値 (最大20)
		set {_attribute.armor_toughness} to {_victim}.getAttribute(Attribute.GENERIC_ARMOR_TOUGHNESS).getValue()  # 防具強度値 (最大20)

		# 軽減率計算
		set {_calcdamage} to {_damage} * 2

		set {_maxarg.1} to {_attribute.armor} / 5
		set {_maxarg.2} to {_attribute.armor} - ((4 * {_calcdamage}) / ({_attribute.armor_toughness} + 8))
		set {_maxarg} to max({_maxarg.1}, {_maxarg.2})
		set {_minarg} to min(20, {_maxarg})

		set {_truedamage} to {_calcdamage} * (1 - {_minarg} / 25)
		set {_truedamage} to {_truedamage} * 0.5
		damage {_victim} by {_truedamage} hearts

function kitDamagePierce(attacker: player, victim: entity, damage: number):
	if checkEntityType({_victim}, player) is true:
		LastKiller({_victim}, {_attacker})

	if getDamageModification_SET({_victim}) is not -1:
		set {_damage} to getDamageModification_SET({_victim})
	
	else:
		set {_dm.add} to getDamageModification_ADD({_victim})
		set {_dm.mul} to getDamageModification_MUL({_victim})
		set {_damage} to ({_damage} + {_dm.add}) * {_dm.mul}

	damage {_victim} by {_damage} hearts

function kitDamageInstant(attacker: player, victim: entity, damage: number):
	if checkEntityType({_victim}, player) is true:
		LastKiller({_victim}, {_attacker})

	if getDamageModification_SET({_victim}) is not -1:
		set {_damage} to getDamageModification_SET({_victim})
	
	else:
		set {_dm.add} to getDamageModification_ADD({_victim})
		set {_dm.mul} to getDamageModification_MUL({_victim})
		set {_damage} to ({_damage} + {_dm.add}) * {_dm.mul}

	{Stats.%{_victim}%::Invincible} is not set
	if {Kit-Shield::%{_victim}%} is set:
		set {_shield} to {Kit-Shield::%{_victim}%}
		subtract {_damage} from {_shield}
		send action bar "§9§lシールドがダメージを無効化した!" to {_victim}
		send action bar "§c§lシールドが攻撃を阻害した!" to {_attacker}
		if {_shield} > 0:
			set {Kit-Shield::%{_victim}%} to {_shield}
			playSound("block.anvil.land", 0.7, 2, {_victim})
		else:
			delete {Kit-Shield::%{_victim}%}
			delete {Kit-ShieldTime::%{_victim}%}
			message formatted "§3§lシールドが崩壊した!" to {_victim}
			playSound("entity.item.break", 0.7, 1, {_victim})
	else:
		set {_health} to health of {_victim}
		subtract {_damage} from {_health}
		if {_health} <= 0:
			damage {_victim} by 10000 hearts
		else:
			set health of {_victim} to {_health}
		playSound("entity.generic.hurt", 1, 1.3, {_victim})
		play hurt animation on {_victim}

on damage of player:
	{Stats.%victim%::Invincible} is true
	cancel event

function kitHeal(player: player, heart: number, particle: number = 5):
	if {Kit-Blood::%{_player}%} is not set:
		heal {_player} by {_heart} hearts
		if {_particle} >= 1:
			healEffect({_player}, {_particle})

function healEffect(player: entity, count: number = 5):
	loop {_count} times:
		set {_loc} to location of {_player}
		add a random number between -1 and 1 to x-coordinate of {_loc}
		add a random number between 0 and 2 to y-coordinate of {_loc}
		add a random number between -1 and 1 to z-coordinate of {_loc}
		spawnParticle(heart, {_loc})



# raw damageかどうかを確認する処理
on damage with priority LOWEST:
	# checking unknown damage
	if damage cause is unknown:
		stop
	# check attacker exists
	if attacker is not set:
		stop
	set {_now} to now
	set metadata value "raw damage" of victim to {_now}

# ダメージを受けた際、それがskriptからのものでないことを確認する関数
function checkDamagable(entity: entity) :: boolean:
	set {_rawtime} to metadata value "raw damage" of {_entity}
	if {_rawtime} is not set:
		return false
	set {_now} to now
	set {_diftime} to difference between {_rawtime} and {_now}
	if {_diftime} >= 1 tick:
		return false
	return true
