# Knockerのスキル Ver1.0.0

# Weapons
on shoot:
	metadata value "gametype" of shooter is "Kit"
	{Class::%shooter%} is "Knocker"
	set {_tool} to shooter's tool
	set {_item.kit} to kitItemKitChecker({_tool})
	{_item.kit} is "Knocker"
	set {_item.type} to kitItemTypeChecker({_tool})
	{_item.type} is "Weapon.main"
	set {_item.num} to kitItemNumberChecker({_tool})
	if {_item.num} is 3:
		set metadata value "gravitybow" of projectile to "true"
	else if {_item.num} is 5:
		set metadata value "bindbow" of projectile to "true"

on projectile hit:
	projectile is arrow
	if metadata value "gravitybow" of projectile is "true":
		set {_from} to location of projectile
		loop all entities in radius 3 around {_from}:
			kitCheckTeam(shooter, loop-entity, false) is true
			LastKiller(loop-entity, shooter)
			set {_to} to location of loop-entity
			set {_vector} to setVector({_from}, {_to})
			set velocity of loop-entity to {_vector}
		playSound("entity.elder_guardian.hurt", 1, 1, {_from})
		loop 10 time:
			loop 18 time:
				set {_el} to {_from}
				set {_v} to {_el}
				set {_x} to x-coordinate of {_el}
				set {_y} to y-coordinate of {_el}
				set {_z} to z-coordinate of {_el}
				set x-coordinate of {_v} to {_x} + ( 3 * sin({_s}) * cos({_t}) )
				set y-coordinate of {_v} to {_y} + ( 3 * cos({_s}) )
				set z-coordinate of {_v} to {_z} + ( 3 * sin({_s}) * sin({_t}) )
				chance of 50%:
					drawDot count 1, particle "redstone", RGB 112, 128, 144, center {_v}, visibleRange 30
				add 20 to {_t}
			add 20 to {_s}
	else if metadata value "bindbow" of projectile is "true":
		set {_center} to location of projectile
		playSound("block.chain.place", 1, 1, {_center})
		loop 10 times:
			loop all entities in radius 3 around {_center}:
				kitCheckTeam(shooter, loop-entity, false) is true
				{_binding::*} does not contain id of loop-entity
				add id of loop-entity to {_binding::*}
			loop all entities:
				kitCheckTeam(shooter, loop-entity, false) is true
				{_binding::*} contains id of loop-entity
				apply slowness 1 to loop-entity for 1 tick
				set {_et} to location of loop-entity
				add 1 to y-coordinate of {_et}
				set {_ve} to setVector({_center}, {_et})
				set {_elbase} to {_center}
				set yaw of {_elbase} to yaw of {_ve}
				set pitch of {_elbase} to pitch of {_ve}
				set {_dis} to round(distance between {_et} and {_elbase} * 2)
				set {_ln} to 0
				loop {_dis} times:
					add 1 to {_ln}
					set {_el} to location 0.5 * {_ln} meters in front of {_elbase}
					drawDot count 1, particle "redstone", RGB 112, 128, 144, center {_el}, visibleRange 30
				if distance between loop-entity and {_center} > 3:
					set {_to} to location of loop-entity
					set {_vector} to setVector({_to}, {_center}, 0.1)
					set velocity of loop-entity to {_vector}
					playSound("entity.guardian.attack", 0.7, 2, loop-entity)
			set {_ln} to 0
			loop 5 times:
				add 0.2 to {_ln}
				set {_ce} to location {_ln} meters above {_center}
				chance of 10%:
					drawDot count 1, particle "redstone", RGB 199, 227, 255, center {_ce}, visibleRange 30
			wait a tick

on damage:
	metadata value "gametype" of attacker is "Kit"
	{Class::%attacker%} is "Knocker"
	damage was caused by projectile
	set damage to damage * 0.8

function kitWeaponKnocker(player: player):
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	checkCT({_player}, name of {_player}'s tool) is true
	if {_item.num} is 4:
		kitWeapon_Knocker_4({_player})

function kitWeapon_Knocker_4(player: player):
	if {_player} has arrow:
		load yml "plugins/skript-yaml/Kit Classes/Knocker.yml" as "uparrow.%{_player}%"
		set {_UPArrow} to yml value "kititems.Updraft Arrow" from "uparrow.%{_player}%"
		unload yml "uparrow.%{_player}%"
		set {_amount} to amount of arrow in {_player}'s inventory
		set {_amoweak} to amount of {_UPArrow} in {_player}'s inventory
		add {_amoweak} to {_amount}
		set {_s} to 35
		set {_a} to 0
		loop {_amount} times:
			add 1 to {_a}
			set slot {_s} of {_player} to {_a} of {_UPArrow}
			if {_a} is 64:
				subtract 1 from {_s}
				set {_a} to 0
		remove all arrows from {_player}

# Skills
function kitSkillKnocker(player: player) :: boolean:
	set {_tool} to {_player}'s tool
	set {_item.num} to kitItemNumberChecker({_tool})
	if checkCT({_player}, name of {_player}'s tool) is true:
		if {_item.num} is 1:
			kitSkill_Knocker_1({_player})
		else if {_item.num} is 2:
			kitSkill_Knocker_2({_player})
		else if {_item.num} is 3:
			kitSkill_Knocker_3({_player})
		else if {_item.num} is 4:
			kitSkill_Knocker_4({_player})
		else if {_item.num} is 5:
			kitSkill_Knocker_5({_player})
		else if {_item.num} is 6:
			kitSkill_Knocker_6({_player})
		else if {_item.num} is 7:
			kitSkill_Knocker_7({_player})
		else if {_item.num} is 8:
			kitSkill_Knocker_8({_player})
	return true

function kitSkill_Knocker_1(player: player):
	toolCT({_player}, "Knocker", 1)
	kitMsg({_player}, "§9周辺のプレイヤー§bを吹き飛ばします!")
	playSound("entity.wither.shoot", 1, 1, {_player})
	set {_center} to location of {_player}
	loop all entities in radius 10 around {_player}:
		kitCheckTeam({_player}, loop-entity, false) is true
		LastKiller(loop-entity, {_player})
		add location of loop-entity to {_dm::*}
		push loop-entity upwards at speed 2
		set {_now} to now
		if type of loop-entity is a player:
			set {Stats.%loop-entity%::TornadoWind} to {_now}
	set {_y} to 0
	set {_rad} to 0
	loop 5 times:
		loop 40 times:
			add 10 to {_rad}
			add 0.1 to {_y}
			set {_el} to {_center}
			add 10 * sin({_rad}) to x-coordinate of {_el}
			add 10 * cos({_rad}) to z-coordinate of {_el}
			add {_y} to y-coordinate of {_el}
			drawDot count 1, particle "redstone", RGB 199, 227, 255, center {_el}, visibleRange 30
			loop {_dm::*}:
				set {_el} to loop-value-3
				add 1 * sin({_rad}) to x-coordinate of {_el}
				add 1 * cos({_rad}) to z-coordinate of {_el}
				add {_y} to y-coordinate of {_el}
				drawDot count 1, particle "redstone", RGB 199, 227, 255, center {_el}, visibleRange 30
		wait a tick
	wait 5 seconds
	loop all players:
		{Stats.%loop-value%::TornadoWind} is {_now}
		delete {Stats.%loop-value%::TornadoWind}

function kitSkill_Knocker_2(player: player):
	toolCT({_player}, "Knocker", 2)
	kitMsg({_player}, "§b3秒間敵を近くに寄せ付けません!")
	apply mining fatigue 2 to {_player} for 3 seconds
	playSound("block.portal.trigger", 0.5, 1, {_player})
	set {_now} to now
	loop 60 times:
		set {_from} to location of {_player}
		loop all entities in radius 10 around {_player}:
			kitCheckTeam(loop-entity, {_player}, false) is true
			LastKiller(loop-entity, {_player})
			if type of loop-entity is a player:
				if {Stats.%loop-entity%::SFFallCancel} is not set:
					set {Stats.%loop-entity%::FallRemove} to {_now}
			set {_to} to location of loop-entity
			set {_vector} to setVector({_from}, {_to}, 0.5)
			set velocity of loop-entity to {_vector}
		set {_s} to 0
		set {_t} to 0
		loop 19 time:
			loop 36 time:
				set {_el} to {_from}
				set {_v} to {_el}
				set {_x} to x-coordinate of {_el}
				set {_y} to y-coordinate of {_el}
				set {_z} to z-coordinate of {_el}
				set x-coordinate of {_v} to {_x} + ( 10 * sin({_s}) * cos({_t}) )
				set y-coordinate of {_v} to {_y} + ( 10 * cos({_s}) )
				set z-coordinate of {_v} to {_z} + ( 10 * sin({_s}) * sin({_t}) )
				chance of 10%:
					drawDot count 1, particle "redstone", RGB 100, 255, 255, center {_v}, visibleRange 30
				add 10 to {_t}
			add 10 to {_s}
		wait a tick
	kitMsg({_player}, "§7§lSeparate Field §9の効果が切れました")
	wait 3 seconds
	loop all players:
		{Stats.%loop-player%::FallRemove} is {_now}
		delete {Stats.%loop-player%::FallRemove}

on damage of player:
	metadata value "gametype" of victim is "Kit"
	damage was caused by fall
	if {Stats.%victim%::TornadoWind} is set:
		set damage to 3
		delete {Stats.%victim%::TornadoWind}
		stop
	if {Stats.%victim%::FallRemove} is set:
		set damage to damage * 0.1
		delete {Stats.%victim%::FallRemove}

function kitSkill_Knocker_3(player: player):
	toolCT({_player}, "Knocker", 3)
	kitMsg({_player}, "§b突風が吹き荒れる!")
	set {_baseloc} to location of head of {_player}
	set {_now} to now
	playSound("entity.wither.hurt", 0.5, 0.5, {_baseloc})
	set {_m} to 0
	loop 50 times:
		add 1 to {_m}
		set {_el} to location {_m} meters in front of {_baseloc}
		drawDot count 1, particle "mobspell", RGB 0, 255, 255, center {_el}, visibleRange 80
	wait a second
	set {_time} to 10
	loop 10 times:
		if mod({_time}, 2) is 0:
			playSound("entity.wither.shoot", 0.1, 0.5, {_baseloc})
			set {_m} to 0
			loop 50 times:
				add 1 to {_m}
				set {_elbase} to location {_m} meters in front of {_baseloc}
				if mod({_m}, 10) is 0:
					playSound("entity.wither.shoot", 0.1, 0.5, {_elbase})
				set {_rad} to 0
				loop 36 times:
					set {_eb} to {_elbase}
					set {_m1} to {_eb}
					set {_p} to pitch of {_m1}
					if {_p} < 0:
						set {_p} to -1 * 90 - {_p}
						set {_y} to yaw of {_m1}
						add 180 to {_y}
						if {_y} >= 360:
							set {_y} to {_y} - 360
						set yaw of {_m1} to {_y}
					else:
						set {_p} to {_p} - 90
					set pitch of {_m1} to {_p}
					set {_test1} to 5 * cos({_rad})
					set {_t1} to location {_test1} meters in front of {_m1}
					set {_m2} to {_eb}
					set pitch of {_m2} to 0
					set {_test2} to 5 * sin({_rad})
					set {_t2} to location {_test2} meters to the right of {_m2}
					set x-coordinate of {_eb} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_eb}
					set y-coordinate of {_eb} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_eb}
					set z-coordinate of {_eb} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_eb}
					chance of 10%:
						drawDot count 1, particle "redstone", RGB 0, 255, 255, center {_eb}, visibleRange 80
					add 10 to {_rad}
		delete {_hit::*}
		set {_m} to 0
		loop 50 times:
			add 1 to {_m}
			set {_blastloc} to location {_m} meters in front of {_baseloc}
			loop all entities in radius 5 around {_blastloc}:
				kitCheckTeam({_player}, loop-entity, false) is true
				{_hit::*} does not contain id of loop-entity
				add id of loop-entity to {_hit::*}
				LastKiller(loop-entity, {_player})
				set {_to} to location of loop-entity
				set {_dv} to setVector({_to}, {_baseloc})
				set {_dl} to {_to}
				set yaw of {_dl} to yaw of {_dv}
				set pitch of {_dl} to pitch of {_dv}
				set {_from} to location 1 meters in front of {_dl}
				set {_vector} to setVector({_from}, {_to})
				set velocity of loop-entity to {_vector}
				if type of loop-entity is a player:
					set {Stats.%loop-entity%::FallRemove} to {_now}
		subtract 1 from {_time}
		wait 2 ticks
	wait 5 seconds
	loop all players:
		{Stats.%loop-player%::FallRemove} is {_now}
		delete {Stats.%loop-player%::FallRemove}

function kitSkill_Knocker_4(player: player):
	if {Stats.%{_player}%::SpatialDistorter} is not set:
		set {Stats.%{_player}%::SpatialDistorter} to 60
	set {_now} to now
	set {Stats.%{_player}%::SpatialDistorterNow} to {_now}
	set {_baseloc} to location of head of {_player}
	loop 15 times:
		{_obloc} is not set
		add 1 to {_m}
		set {_bl} to location {_m} meters in front of {_baseloc}
		if block at {_bl} is not passable:
			set {_obloc} to {_bl}
	if {_obloc} is not set:
		set {_obloc} to location 15 meters in front of {_baseloc}
	playSound("block.portal.ambient", 0.7, 2, {_obloc})
	loop 5 times:
		{Stats.%{_player}%::SpatialDistorter} > 0
		{Stats.%{_player}%::SpatialDistorterNow} is {_now}
		subtract 1 from {Stats.%{_player}%::SpatialDistorter}  # Action BarはKit Timerで作成
		set {_baseloc} to location of head of {_player}
		set {_m} to 0
		delete {_obloc}
		loop 15 times:
			{_obloc} is not set
			add 1 to {_m}
			set {_bl} to location {_m} meters in front of {_baseloc}
			if block at {_bl} is not passable:
				set {_obloc} to {_bl}
		if {_obloc} is not set:
			set {_obloc} to location 15 meters in front of {_baseloc}
		loop all entities in radius 3 around {_obloc}:
			kitCheckTeam(loop-entity, {_player}, false) is true
			LastKiller(loop-entity, {_player})
			set {_to} to location of loop-entity
			set {_vector} to setVector({_obloc}, {_to}, 0.5)
			set velocity of loop-entity to {_vector}
			if type of loop-entity is a player:
				set {Stats.%loop-entity%::FallRemove} to {_now}
		set {_s} to 0
		set {_t} to 0
		loop 19 time:
			loop 36 time:
				set {_el} to {_obloc}
				set {_v} to {_el}
				set {_x} to x-coordinate of {_el}
				set {_y} to y-coordinate of {_el}
				set {_z} to z-coordinate of {_el}
				set x-coordinate of {_v} to {_x} + ( 3 * sin({_s}) * cos({_t}) )
				set y-coordinate of {_v} to {_y} + ( 3 * cos({_s}) )
				set z-coordinate of {_v} to {_z} + ( 3 * sin({_s}) * sin({_t}) )
				chance of 3%:
					drawDot count 1, particle "redstone", RGB 50, 0, 50, center {_v}, visibleRange 30
				add 10 to {_t}
			add 10 to {_s}
		wait a tick
	if {Stats.%{_player}%::SpatialDistorterNow} is {_now}:
		delete {Stats.%{_player}%::SpatialDistorterNow}
	wait 5 seconds
	loop all players:
		{Stats.%loop-player%::FallRemove} is {_now}
		delete {Stats.%loop-player%::FallRemove}

function kitSkill_Knocker_5(player: player):
	toolCT({_player}, "Knocker", 5)
	kitMsg({_player}, "§c地面に衝撃を与えて敵を吹き飛ばします!")
	set {Stats.%{_player}%::DiveImpact} to true
	push {_player} upwards at speed 2.5
	playSound("entity.wither.shoot", 1, 0.8, {_player})
	drawDot count 1, particle "fallingdust", material light blue concrete powder, center {_player}, visibleRange 32, keepFor 5 ticks
	wait 5 ticks
	loop 100 times:
		if {_t} is not set:
			if block below {_player} is not passable:
				set {_t} to true
				playSound("entity.wither.spawn", 1, 0.5, {_player})
				loop all blocks in radius 5 around {_player}:
					y-coordinate of loop-block is y-coordinate of block at {_player}
					loop-block is passable
					drawDot count 1, particle "blockcrack", material purple wool, center location of loop-block, visibleRange 32, keepFor 5 ticks
			else:
				drawDot count 1, particle "fallingdust", material light blue concrete powder, center {_player}, visibleRange 32
				wait a tick
	loop all entities in radius 5 around {_player}:
		kitCheckTeam(loop-entity, {_player}, false)
		block below loop-entity is not passable
		make a fake explosion at loop-entity
		kitDamage({_player}, loop-entity, 2)
		push loop-entity upwards at speed 1.5

on damage of player:
	metadata value "gametype" of victim is "Kit"
	damage was caused by fall
	{Stats.%victim%::DiveImpact} is true
	cancel event
	delete {Stats.%victim%::DiveImpact}

function kitSkill_Knocker_6(player: player):
	toolCT({_player}, "Knocker", 6)
	kitMsg({_player}, "§1§lShock Grenade §9を投擲!")
	playSound("entity.arrow.shoot", 1, 0.5, {_player})
	shoot a snowball from {_player} at speed 0.9
	set metadata value "shockgrenade" of shot projectile to "true"
	set item of shot projectile to beacon
	drawDot count 1, particle "endrod", center shot projectile, visibleRange 32, keepFor 1 second

on projectile hit:
	projectile is a snowball
	metadata value "shockgrenade" of projectile is "true"
	set {_now} to now
	set {_from} to location of projectile 
	playSound("entity.blaze.ambient", 1, 1.5, shooter)
	loop all entities in radius 5 around {_from}:
		kitCheckTeam(loop-entity, shooter, false) is true
		kitDamage(shooter, loop-entity, 1)
		set {_to} to location of loop-entity
		set {_vector} to setVector({_from}, {_to}, 3)
		set velocity of loop-entity to {_vector}
		if type of loop-entity is a player:
			set {Stats.%loop-entity%::FallRemove} to {_now}
	set {_s} to 0
	set {_t} to 0
	loop 19 time:
		loop 36 time:
			set {_el} to {_from}
			set {_v} to {_el}
			set {_x} to x-coordinate of {_el}
			set {_y} to y-coordinate of {_el}
			set {_z} to z-coordinate of {_el}
			set x-coordinate of {_v} to {_x} + ( 5 * sin({_s}) * cos({_t}) )
			set y-coordinate of {_v} to {_y} + ( 5 * cos({_s}) )
			set z-coordinate of {_v} to {_z} + ( 5 * sin({_s}) * sin({_t}) )
			chance of 30%:
				drawDot count 1, particle "mobspell", RGB 0, 100, 200, center {_v}, visibleRange 30
			add 10 to {_t}
		add 10 to {_s}
	wait 5 seconds
	loop all players:
		{Stats.%loop-player%::FallRemove} is {_now}
		delete {Stats.%loop-player%::FallRemove}

function kitSkill_Knocker_7(player: player):
	toolCT({_player}, "Knocker", 7)
	kitMsg({_player}, "§8チェーンを発射します...")
	set {_baseloc} to location of head of {_player}
	set {_m} to 0
	loop 30 times:
		{_target} is not set
		add 1 to {_m}
		set {_frontloc} to location {_m} meters in front of {_baseloc}
		playSound("block.chain.place", 1, 1, {_frontloc})
		loop all players in radius 2 around {_frontloc}:
			{_target} is not set
			kitCheckTeam({_player}, loop-player, false) is true
			set {_target} to loop-player
			set {Stats.%loop-player%::LinkageChain} to true
			set {Stats.%{_player}%::LinkageChain} to true
		kitKnockerChainParticles({_baseloc}, {_m})
		wait a tick
	if {_target} is set:
		kitMsg({_player}, "§6%{_target}% §7がチェーンに引っ掛かった!")
		message formatted "§8チェーンに引っ掛かってしまった..." to {_target}
		playSound("block.glass.break", 1, 0.5, {_target})
		set {_max} to {_m} + 5
		loop 100 times:
			{Stats.%{_player}%::LinkageChain} is true
			{Stats.%{_target}%::LinkageChain} is true
			kitKnockerConnectParticles({_player}, {_target})
			set {_dis} to distance between {_player} and {_target}
			if {_dis} < {_m}:
				LastKiller({_target}, {_player})
				playSound("block.chain.hit", 0.8, 1, {_player})
				playSound("block.chain.hit", 0.8, 1, {_target})
				set {_vector} to setVector(location of {_player}, location of {_target}, 0.5)
				set velocity of {_target} to {_vector}
			if {_dis} > {_max}:
				LastKiller({_target}, {_player})
				playSound("block.chain.hit", 0.8, 1, {_player})
				playSound("block.chain.hit", 0.8, 1, {_target})
				set {_vector} to setVector(location of {_target}, location of {_player}, 0.5)
				set velocity of {_target} to {_vector}
			wait a tick
		kitMsg({_player}, "§eチェーンが外れました")
		message formatted "§7チェーンが取り外された!" to {_target}

options:
	radiusm: 0.25

function kitKnockerChainParticles(baseloc: location, meter: number):
	set {_m} to 0
	loop {_meter} times:
		add 1 to {_m}
		set {_horim} to {_m} - 0.75
		set {_vertm} to {_m} - 0.25
		set {_horiloc} to location {_horim} meters in front of {_baseloc}
		set {_vertloc} to location {_vertm} meters in front of {_baseloc}
		# horizontal(水平) chain作成
		set {_rad} to 0
		loop 10 times:
			set {_h.eb} to {_horiloc}
			# 縦方向
			set {_h.m1} to {_horiloc}
			set {_h.r1} to {@radiusm} * cos({_rad})
			set {_h.t1} to location {_h.r1} meters in front of {_h.m1}
			# 横方向
			set {_h.m2} to {_horiloc}
			set pitch of {_h.m2} to 0
			set {_h.r2} to {@radiusm} * sin({_rad})
			set {_h.t2} to location {_h.r2} meters to the right of {_h.m2}
			set x-coordinate of {_h.eb} to x-coordinate of {_h.t1} + x-coordinate of {_h.t2} - x-coordinate of {_h.eb}
			set y-coordinate of {_h.eb} to y-coordinate of {_h.t1} + y-coordinate of {_h.t2} - y-coordinate of {_h.eb}
			set z-coordinate of {_h.eb} to z-coordinate of {_h.t1} + z-coordinate of {_h.t2} - z-coordinate of {_h.eb}
			chance of 10%:
				drawDot count 1, particle "redstone", RGB 119, 136, 153, center {_h.eb}, visibleRange 50
			add 36 to {_rad}
		# vertical(垂直) chain作成
		set {_rad} to 0
		loop 10 times:
			set {_v.eb} to {_vertloc}
			# 縦方向
			set {_v.m1} to {_vertloc}
			set {_p} to pitch of {_v.m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_v.m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_v.m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_v.m1} to {_p}
			set {_v.r1} to {@radiusm} * cos({_rad})
			set {_v.t1} to location {_v.r1} meters in front of {_v.m1}
			# 横方向
			set {_v.m2} to {_vertloc}
			set pitch of {_v.m2} to 0
			set {_v.r2} to {@radiusm} * sin({_rad})
			set {_v.t2} to location {_v.r2} meters in front of  {_v.m2}
			set x-coordinate of {_v.eb} to x-coordinate of {_v.t1} + x-coordinate of {_v.t2} - x-coordinate of {_v.eb}
			set y-coordinate of {_v.eb} to y-coordinate of {_v.t1} + y-coordinate of {_v.t2} - y-coordinate of {_v.eb}
			set z-coordinate of {_v.eb} to z-coordinate of {_v.t1} + z-coordinate of {_v.t2} - z-coordinate of {_v.eb}
			chance of 10%:
				drawDot count 1, particle "redstone", RGB 112, 128, 144, center {_v.eb}, visibleRange 50
			add 36 to {_rad}

function kitKnockerConnectParticles(player1: player, player2: player):
	set {_dis} to distance between {_player1} and {_player2}
	set {_dis} to round({_dis})
	set {_vector} to setVector({_player1}, {_player2})
	set {_baseloc} to location of {_player1}
	add 1 to y-coordinate of {_baseloc}
	set yaw of {_baseloc} to yaw of {_vector}
	set pitch of {_baseloc} to pitch of {_vector}
	set {_m} to 0
	loop {_dis} times:
		add 1 to {_m}
		set {_horim} to {_m} - 0.75
		set {_vertm} to {_m} - 0.25
		set {_horiloc} to location {_horim} meters in front of {_baseloc}
		set {_vertloc} to location {_vertm} meters in front of {_baseloc}
		# horizontal(水平) chain作成
		set {_rad} to 0
		loop 10 times:
			set {_h.eb} to {_horiloc}
			# 縦方向
			set {_h.m1} to {_horiloc}
			set {_h.r1} to {@radiusm} * cos({_rad})
			set {_h.t1} to location {_h.r1} meters in front of {_h.m1}
			# 横方向
			set {_h.m2} to {_horiloc}
			set pitch of {_h.m2} to 0
			set {_h.r2} to {@radiusm} * sin({_rad})
			set {_h.t2} to location {_h.r2} meters to the right of {_h.m2}
			set x-coordinate of {_h.eb} to x-coordinate of {_h.t1} + x-coordinate of {_h.t2} - x-coordinate of {_h.eb}
			set y-coordinate of {_h.eb} to y-coordinate of {_h.t1} + y-coordinate of {_h.t2} - y-coordinate of {_h.eb}
			set z-coordinate of {_h.eb} to z-coordinate of {_h.t1} + z-coordinate of {_h.t2} - z-coordinate of {_h.eb}
			chance of 10%:
				drawDot count 1, particle "redstone", RGB 119, 136, 153, center {_h.eb}, visibleRange 50
			add 36 to {_rad}
		# vertical(垂直) chain作成
		set {_rad} to 0
		loop 10 times:
			set {_v.eb} to {_vertloc}
			# 縦方向
			set {_v.m1} to {_vertloc}
			set {_p} to pitch of {_v.m1}
			if {_p} < 0:
				set {_p} to -1 * 90 - {_p}
				set {_y} to yaw of {_v.m1}
				add 180 to {_y}
				if {_y} >= 360:
					set {_y} to {_y} - 360
				set yaw of {_v.m1} to {_y}
			else:
				set {_p} to {_p} - 90
			set pitch of {_v.m1} to {_p}
			set {_v.r1} to {@radiusm} * cos({_rad})
			set {_v.t1} to location {_v.r1} meters in front of {_v.m1}
			# 横方向
			set {_v.m2} to {_vertloc}
			set pitch of {_v.m2} to 0
			set {_v.r2} to {@radiusm} * sin({_rad})
			set {_v.t2} to location {_v.r2} meters in front of {_v.m2}
			set x-coordinate of {_v.eb} to x-coordinate of {_v.t1} + x-coordinate of {_v.t2} - x-coordinate of {_v.eb}
			set y-coordinate of {_v.eb} to y-coordinate of {_v.t1} + y-coordinate of {_v.t2} - y-coordinate of {_v.eb}
			set z-coordinate of {_v.eb} to z-coordinate of {_v.t1} + z-coordinate of {_v.t2} - z-coordinate of {_v.eb}
			chance of 10%:
				drawDot count 1, particle "redstone", RGB 112, 128, 144, center {_v.eb}, visibleRange 50
			add 36 to {_rad}

function kitSkill_Knocker_8(player: player):
	toolCT({_player}, "Knocker", 8)
	kitMsg({_player}, "§2風の妖精 §aが§e§lイタズラ§aをしにやって来ました!")
	playSound("item.trident.riptide_3", 1, 2, {_player})
	set {_baseloc} to location of head of {_player}
	loop 10 times:
		add {_baseloc} to {_sylphies::*}
	loop 200 times:
		loop {_sylphies::*}:
			set {_sl} to loop-value-2
			delete {_ok}
			loop 10 times:
				{_ok} is not set
				set {_dl} to {_sl}
				set {_dv} to randomVector({_sl})
				set yaw of {_dl} to yaw of {_dv}
				set pitch of {_dl} to pitch of {_dv}
				if block at location 1 meters in front of {_dl} is passable:
					set {_ok} to true
			if {_ok} is true:
				set {_m} to a random number between 0 and 1
				set {_sl} to location {_m} meters in front of {_dl}
				set {_sylphies::%loop-index%} to {_sl}
			loop a random integer between 0 and 2 times:
				set {_el} to {_sl}
				add a random number between 0 and 0.5 to x-coordinate of {_el}
				add a random number between 0 and 0.5 to y-coordinate of {_el}
				add a random number between 0 and 0.5 to z-coordinate of {_el}
				drawDot count 1, particle "redstone", RGB 152, 251, 152, center {_el}, visibleRange 30
			set {_s} to 0
			set {_t} to 0
			loop 10 time:
				loop 9 time:
					set {_el} to {_sl}
					set {_v} to {_el}
					set {_x} to x-coordinate of {_el}
					set {_y} to y-coordinate of {_el}
					set {_z} to z-coordinate of {_el}
					set x-coordinate of {_v} to {_x} + ( 3 * sin({_s}) * cos({_t}) )
					set y-coordinate of {_v} to {_y} + ( 3 * cos({_s}) )
					set z-coordinate of {_v} to {_z} + ( 3 * sin({_s}) * sin({_t}) )
					chance of 1%:
						drawDot count 1, particle "mobspell", RGB 127, 255, 212, center {_v}, visibleRange 30
					add 40 to {_t}
				add 20 to {_s}
			loop all entities in radius 3 around {_sl}:
				kitCheckTeam(loop-entity, {_player}, false) is true
				LastKiller(loop-entity, {_player})
				set {_to} to location of loop-entity
				set {_vector} to setVector({_sl}, {_to}, 0.5)
				set velocity of loop-entity to {_vector}
				playSound("item.trident.throw", 0.5, 2, loop-entity)
		wait a tick
	kitMsg({_player}, "§2風の妖精 §bは去っていきました")

on death of player:
	{Class::%{LastKiller::%victim%}%} is "Knocker"
	give 8 arrows to {LastKiller::%victim%}

# Ultimate
function kitUltKnocker(player: player):
	message "§c自身を中心に半径10mの絶対領域を展開します!" to {_player}
	message "§c展開時,中に居た敵は脱出が不可能になります!" to {_player}
	message "§c展開時,外に居た敵は侵入が不可能になります!" to {_player}
	set {_loc} to location of {_player}
	loop all entities in radius 10 around {_loc}:
		kitCheckTeam(loop-entity, {_player}, false) is true
		add id of loop-entity to {_ats::*}
	loop 200 times:
		if mod(loop-number, 20) is 0:
			playSound("block.portal.ambient", 0.5, 1, {_loc})
		loop all entities:
			kitCheckTeam(loop-entity, {_player}, false) is true
			set {_dis} to distance between loop-entity and {_loc}
			set {_to} to location of loop-entity
			if {_ats::*} contains id of loop-entity:
				if {_dis} > 20:
					teleport loop-entity to {_loc}
				else if {_dis} > 10:
					set {_vector} to setVector({_to}, {_loc})
					set velocity of loop-entity to {_vector}
			else:
				if {_dis} <= 10:
					set {_vector} to setVector({_loc}, {_to})
					set velocity of loop-entity to {_vector}
		set {_s} to 0
		set {_t} to 0
		loop 37 time:
			loop 72 time:
				set {_el} to {_loc}
				set {_v} to {_el}
				set {_x} to x-coordinate of {_el}
				set {_y} to y-coordinate of {_el}
				set {_z} to z-coordinate of {_el}
				set x-coordinate of {_v} to {_x} + ( 10 * sin({_s}) * cos({_t}) )
				set y-coordinate of {_v} to {_y} + ( 10 * cos({_s}) )
				set z-coordinate of {_v} to {_z} + ( 10 * sin({_s}) * sin({_t}) )
				chance of 0.5%:
					drawDot count 1, particle "redstone", RGB 150, 0, 150, center {_v}, visibleRange 100, keepFor 5 ticks
				add 5 to {_t}
			add 5 to {_s}
		wait a tick

function kitTimerKnocker(player: player):
	while {Class::%{_player}%} is "Knocker":
		set {_tool} to {_player}'s tool
		set {_item.type} to kitItemTypeChecker({_tool})
		set {_item.num} to kitItemNumberChecker({_tool})
		add 1 to {_timer}
		if {_timer} >= 20:
			set {_timer} to 0
		if {_timer} = 0:
			if {Stats.%{_player}%::SpatialDistorter} is set:
				if {Stats.%{_player}%::SpatialDistorter} < 60:
					add 1 to {Stats.%{_player}%::SpatialDistorter}
		if {_item.type} is "Weapon.main":
			if {_item.num} is 4:
				if {_player} is sneaking:
					if block at location 0.1 meters below {_player} is passable:
						apply slow falling 1 to {_player} for 10 ticks replacing existing effect
						chance of 50%:
							playSound("block.wool.break", 0.6, 2, {_player})
						set {_rad} to 0
						set {_baseloc} to location of {_player}
						loop 10 times:
							add 36 to {_rad}
							set {_el} to {_baseloc}
							add 0.5 * sin({_rad}) to x-coordinate of {_el}
							add 0.5 * cos({_rad}) to z-coordinate of {_el}
							chance of 10%:
								drawDot count 1, particle "mobspell", RGB 135, 206, 235, center {_el}, visibleRange 30
				else:
					remove slow falling from {_player}
			else if {_item.num} is 5:
				if {Stats.%{_player}%::BindBow} is set:
					set {_barcount} to {Stats.%{_player}%::BindBow}
				else:
					set {Stats.%{_player}%::BindBow} to 60
					set {_barcount} to 60
				set {_bar} to 0
				set {_bartext} to ""
				loop 60 times:
					add 1 to {_bar}
					if {_bar} <= {_barcount}:
						set {_bartext} to "%{_bartext}%§a|"
					else:
						set {_bartext} to "%{_bartext}%§8|"
				send action bar "§e§l[ %{_bartext}% §e§l]" to {_player}
				if {_player} is sneaking:
					if {Stats.%{_player}%::BindBow} > 0:
						subtract 1 from {Stats.%{_player}%::BindBow}
						set {_baseloc} to location of {_player}
						playSound("block.chain.fall", 0.6, 2, {_baseloc})
						loop all entities in radius 5 around {_baseloc}:
							kitCheckTeam(loop-entity, {_player}, false) is true
							LastKiller(loop-entity, {_player})
							set {_to} to location of loop-entity
							set {_vector} to setVector({_baseloc}, {_to}, 0.5)
							set velocity of loop-entity to {_vector}
						set {_rad} to 0
						loop 36 times:
							add 10 to {_rad}
							set {_el} to {_baseloc}
							add 5 * sin({_rad}) to x-coordinate of {_el}
							add 5 * cos({_rad}) to z-coordinate of {_el}
							drawDot count 1, particle "witchspell", center {_el}, visibleRange 30
		else if {_item.type} is "Skill":
			if {_item.num} is 4:
				if {Stats.%{_player}%::SpatialDistorter} is set:
					set {_barcount} to {Stats.%{_player}%::SpatialDistorter}
				else:
					set {_barcount} to 60
				set {_bar} to 0
				set {_bartext} to ""
				loop 60 times:
					add 1 to {_bar}
					if {_bar} <= {_barcount}:
						set {_bartext} to "%{_bartext}%§a|"
					else:
						set {_bartext} to "%{_bartext}%§8|"
				send action bar "§e§l[ %{_bartext}% §e§l]" to {_player}
		wait a tick