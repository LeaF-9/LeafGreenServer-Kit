import:
	net.kyori.adventure.text.Component
	net.kyori.adventure.text.format.TextColor
	net.kyori.adventure.text.format.TextDecoration
	org.bukkit.Material
	org.bukkit.inventory.ItemStack
	org.bukkit.NamespacedKey
	org.bukkit.inventory.meta.components.consumable.ConsumableComponent$Animation
	com.google.common.collect.Lists

options:
	prefix: §a[§eSkill§a]

on load:
	register block tag named "genre-concretes" using red concrete, yellow concrete, lime concrete, light blue concrete, blue concrete, pink concrete
	register block tag named "cancel-glass" using white stained glass pane, red stained glass pane

command /kitskilllist <text> <text>:
	permission: sk.admin
	executable by: player
	trigger:
# 調整めんどくさいのでここ後回し
#		if arg 1 is "add":
#			if {Kit-Classes::%arg 2%} is set:
#				add player's tool to {Kit-Skill.%arg 2%::*}
#				message "{@prefix} §a%name of player's tool%§bを§e%arg 2%§bのSkillに設定しました" to player
#			else:
#				message "{@prefix} §cKitが存在しません" to player
#		else if arg 1 is "addoption":
#			add player's tool to {Kit-Skill.%arg 2%::*}
#			message "{@prefix} §a%name of player's tool%§bを§e%arg 2%§bのSkillに設定しました" to player
#		if arg 1 is "give":
#			loop {Kit-Skill.%arg 2%::*}:
#				give loop-value to player
#			message "{@prefix} §e%arg 2%§bに設定された§aSkill§bを全て手渡しました" to player
#		else if arg 1 is "delete":
#			if arg 2 is "all":
#				loop {Kit-ClassList::*}:
#					delete {Kit-Skill.%loop-value%::*}
#				message "{@prefix} §c全てののSkillを削除しました" to player
#			else:
#				delete {Kit-Skill.%arg 2%::*}
#				message "{@prefix} §e%arg 2%§cのSkillを全削除しました" to player
		if arg 1 is "list":
			message "{@prefix} §c%arg 2%§a's Skill§7:" to player
			load yml "plugins/skript-yaml/Kit Classes/%arg 2%.yml" as "class.%arg 2%"
			loop yaml node keys "skill" from "class.%arg 2%":
				set {_skill} to yml value "%loop-node%" from "class.%arg 2%"
				message "{@prefix} §7- §d%display name of {_skill}%" to player
				message "{@prefix}   §7- §5%lore of {_skill}%" to player
				message "§7----------" to player
			unload yml "class.%arg 2%"

command /kitweaponlist <text> <text>:
	permission: sk.admin
	executable by: player
	trigger:
#		if arg 1 is "add":
#			if {Kit-Classes::%arg 2%} is set:
#				add player's tool to {Kit-Skill.%arg 2%::*}
#				message "{@prefix} §a%name of player's tool%§bを§e%arg 2%§bのSkillに設定しました" to player
#			else:
#				message "{@prefix} §cKitが存在しません" to player
#		else if arg 1 is "addoption":
#			add player's tool to {Kit-Skill.%arg 2%::*}
#			message "{@prefix} §a%name of player's tool%§bを§e%arg 2%§bのSkillに設定しました" to player
#		if arg 1 is "give":
#			loop {Kit-Skill.%arg 2%::*}:
#				give loop-value to player
#			message "{@prefix} §e%arg 2%§bに設定された§aSkill§bを全て手渡しました" to player
#		else if arg 1 is "delete":
#			if arg 2 is "all":
#				loop {Kit-ClassList::*}:
#					delete {Kit-Skill.%loop-value%::*}
#				message "{@prefix} §c全てののSkillを削除しました" to player
#			else:
#				delete {Kit-Skill.%arg 2%::*}
#				message "{@prefix} §e%arg 2%§cのSkillを全削除しました" to player
		if arg 1 is "list":
			message "{@prefix} §c%arg 2%§a's Weapon§7:" to player
			load yml "plugins/skript-yaml/Kit Classes/%arg 2%.yml" as "class.%arg 2%"
			loop yaml node keys "weapon" from "class.%arg 2%":
				set {_main} to yml value "%loop-node%" from "class.%arg 2%"
				message "{@prefix} §7- §d%display name of {_main}%" to player
				message "§7----------" to player
			unload yml "class.%arg 2%"

# ここらへんkitskillsaveに変えても良いかも

command /kitskillsave <text>:
	usage: /kitskillsave <kit>
	permission: sk.admin
	executable by: player
	trigger:
		set {_kit} to arg 1

		set {_skillamount} to 8
		load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "classloading"

		loop {_skillamount} times:
			add 1 to {_num}
			set {_skilltag} to yml value "skill.%{_num}%.name" from "classloading"
			load yml "plugins/skript-yaml/Kit Loadouts/Skills/%{_Kit}%/%{_skilltag}%.yml" as "loadout.%{_skilltag}%"
			set {_namecheck} to yml value "name" from "loadout.%{_skilltag}%"
			unload yml "loadout.%{_skilltag}%"
			if {_namecheck} is not {_skilltag}:
				message formatted "§e%{_skilltag}% §cというSkillは存在しません §7(§b§l§o%{_num}%§7)" to player
				continue

			set {_skillitem} to buildLoadout({_kit}, "skill", {_skilltag}, {_num})
			set yml value "skill.%{_num}%.item" from "classloading" to {_skillitem}
		
		save yml "classloading"
		message formatted "§a%{_kit}% §bのSkillを再設定しました" to player

command /kitweaponsave <text>:
	usage: /kitweaponsave <kit>
	permission: sk.admin
	executable by: player
	trigger:
		set {_kit} to arg 1

		set {_weaponamount} to 3
		set {_num} to 0
		load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "classloading"
		loop {_weaponamount} times:
			add 1 to {_num}
			set {_weapontag} to yml value "weapon.%{_num}%.name" from "classloading"
			load yml "plugins/skript-yaml/Kit Loadouts/Weapons/%{_Kit}%/%{_weapontag}%.yml" as "loadout.%{_weapontag}%"
			set {_namecheck} to yml value "name" from "loadout.%{_weapontag}%"
			unload yml "loadout.%{_weapontag}%"
			if {_namecheck} is not {_weapontag}:
				message formatted "§e%{_weapontag}% §cというWeaponは存在しません §7(§b§l§o%{_num}%§7)" to player
				continue

			set {_weaponitem} to buildLoadout({_kit}, "weapon", {_weapontag})
			set yml value "weapon.%{_num}%.item" from "classloading" to {_weaponitem}

		save yml "classloading"
		message formatted "§a%{_kit}% §bのSkillを再設定しました" to player

# LoadousファイルからItemStackをビルドする関数
local function buildLoadout(kit: text, type: text, name: text, num: number = 0) :: item:
	if {_type} is "skill":
		load yml "plugins/skript-yaml/Kit Loadouts/Skills/%{_kit}%/%{_name}%.yml" as "build.%{_name}%"
		set {_material} to getSkillItemType({_kit}, {_num})
		set {_amount} to yml value "amount" from "build.%{_name}%"
		set {_amount} to 1 if {_amount} is not set
		set {_ItemStack} to new ItemStack({_material}, {_amount})
		
		# Custom Name
		set {_name.yml} to yml value "name" from "build.%{_name}%"
		set {_name-color.yml} to yml value "name-color" from "build.%{_name}%"
		set {_name-shadow-color.yml} to yml value "name-shadow-color" from "build.%{_name}%"

		set {_ItemMeta} to {_ItemStack}.getItemMeta()
		if {_name-shadow-color.yml} is set:
			set {_Component} to Component.text({_name.yml}).color(TextColor.fromCSSHexString({_name-color.yml})).decoration(TextDecoration.ITALIC, false).shadowColor(TextColor.fromCSSHexString({_name-shadow-color.yml}))
		else:
			set {_Component} to Component.text({_name.yml}).color(TextColor.fromCSSHexString({_name-color.yml})).decoration(TextDecoration.ITALIC, false)
		{_ItemMeta}.customName({_Component})

		# Lore
		set {_lore-summary.yml} to yml value "lore-summary" from "build.%{_name}%"
		set {_lore-effect.yml::*} to yml list "lore-effect" from "build.%{_name}%"
		set {_lore-additional.yml::*} to yml list "lore-additional" from "build.%{_name}%"
		set {_cooltime.yml} to yml value "cooltime" from "build.%{_name}%"
		set {_difficulty.yml} to yml value "difficulty" from "build.%{_name}%"

		set {_lores} to Lists.newArrayList()
		set {_lore.1} to "§f%{_lore.summary.yml}%"
		{_lores}.add({_lore.1})
		{_lores}.add("§5§m------------------------------")
		{_lores}.add("§f[§d§l効果§f]")
		loop {_lore-effect.yml::*}:
			set {_looplore} to loop-value
			{_lores}.add({_looplore})

		if {_cooltime.yml} is set:
			{_lores}.add("")
			{_lores}.add("§bCoolTime§7: §a%{_cooltime.yml}%")
		{_lores}.add("§5§m------------------------------")

		if {_lore-additional.yml::1} is set:
			{_lores}.add("§f[§9§l補足§f]")
			loop {_lore-additional.yml::*}:
				set {_looplore} to loop-value
				{_lores}.add({_looplore})
			{_lores}.add("§5§m------------------------------")
		
		if {_difficulty.yml} is 1:
			set {_color.dif} to "§d"
			set {_text.dif} to "超簡単"
			set {_star.dif} to "★☆☆☆☆"
		else if {_difficulty.yml} is 2:
			set {_color.dif} to "§b"
			set {_text.dif} to "簡単"
			set {_star.dif} to "★★☆☆☆"
		else if {_difficulty.yml} is 3:
			set {_color.dif} to "§a"
			set {_text.dif} to "普通"
			set {_star.dif} to "★★★☆☆"
		else if {_difficulty.yml} is 4:
			set {_color.dif} to "§e"
			set {_text.dif} to "難関"
			set {_star.dif} to "★★★★☆"
		else if {_difficulty.yml} is 5:
			set {_color.dif} to "§c"
			set {_text.dif} to "超難関"
			set {_star.dif} to "★★★★★"
		
		{_lores}.add("§f[§6§l難易度§f]")
		{_lores}.add("§8- %{_color.dif}%§l%{_text.dif}% §6[%{_color.dif}%%{_star.dif}%§6]")

		{_ItemMeta}.setLore({_lores})

		# Consumable / Food
		set {_consumable-animation.yml} to yml value "consumable-animation" from "build.%{_name}%"
		if {_consumable-animation.yml} is set:
			set {_Consumable} to {_ItemMeta}.getConsumable()
			set {_Animation} to Animation.valueOf({_consumable-animation.yml})
			{_Consumable}.setAnimation({_Animation})
			{_Consumable}.setConsumeParticles(false)
			{_Consumable}.setConsumeSeconds(2147483647)
			{_ItemMeta}.setConsumable({_Consumable})

			set {_Food} to {_ItemMeta}.getFood()
			{_Food}.setCanAlwaysEat(true)
			{_Food}.setNutrition(0)
			{_Food}.setSaturation(0)
			{_ItemMeta}.setFood({_Food})

		# Item Model
		set {_type.yml} to yml value "type" from "build.%{_name}%"
		set {_namespacedkey} to NamespacedKey.minecraft({_type.yml})
		{_ItemMeta}.setItemModel({_namespacedkey})

		{_ItemStack}.setItemMeta({_ItemMeta})

	else if {_type} is "weapon":
		load yml "plugins/skript-yaml/Kit Loadouts/Weapons/%{_kit}%/%{_name}%.yml" as "build.%{_name}%"
		set {_type.yml} to yml value "type" from "build.%{_name}%"
		set {_weapon-type.yml} to yml value "weapon-type" from "build.%{_name}%"
		set {_material} to getWeaponItemType({_type.yml}, {_weapon-type.yml})
		set {_amount} to yml value "amount" from "build.%{_name}%"
		set {_amount} to 1 if {_amount} is not set
		set {_ItemStack} to new ItemStack({_material}, {_amount})
		
		# Attributes
		

		# Custom Name
		set {_name.yml} to yml value "name" from "build.%{_name}%"
		set {_name-color.yml} to yml value "name-color" from "build.%{_name}%"
		set {_name-shadow-color.yml} to yml value "name-shadow-color" from "build.%{_name}%"

		set {_ItemMeta} to {_ItemStack}.getItemMeta()
		if {_name-shadow-color.yml} is set:
			set {_Component} to Component.text({_name.yml}).color(TextColor.fromCSSHexString({_name-color.yml})).decoration(TextDecoration.ITALIC, false).shadowColor(TextColor.fromCSSHexString({_name-shadow-color.yml}))
		else:
			set {_Component} to Component.text({_name.yml}).color(TextColor.fromCSSHexString({_name-color.yml})).decoration(TextDecoration.ITALIC, false)
		{_ItemMeta}.customName({_Component})

		# Lore
		set {_lore-summary.yml} to yml value "lore-summary" from "build.%{_name}%"
		set {_lore-effect.yml::*} to yml list "lore-effect" from "build.%{_name}%"
		set {_lore-additional.yml::*} to yml list "lore-additional" from "build.%{_name}%"
		set {_cooltime.yml} to yml value "cooltime" from "build.%{_name}%"
		set {_difficulty.yml} to yml value "difficulty" from "build.%{_name}%"

		set {_lores} to Lists.newArrayList()
		set {_lore.1} to "§f%{_lore.summary.yml}%"
		{_lores}.add({_lore.1})
		{_lores}.add("§5§m------------------------------")
		{_lores}.add("§f[§d§l効果§f]")
		loop {_lore-effect.yml::*}:
			set {_looplore} to loop-value
			{_lores}.add({_looplore})

		if {_cooltime.yml} is set:
			{_lores}.add("")
			{_lores}.add("§bCoolTime§7: §a%{_cooltime.yml}%")
		{_lores}.add("§5§m------------------------------")

		if {_lore-additional.yml::1} is set:
			{_lores}.add("§f[§9§l補足§f]")
			loop {_lore-additional.yml::*}:
				set {_looplore} to loop-value
				{_lores}.add({_looplore})
			{_lores}.add("§5§m------------------------------")
		
		if {_difficulty.yml} is 1:
			set {_color.dif} to "§d"
			set {_text.dif} to "超簡単"
			set {_star.dif} to "★☆☆☆☆"
		else if {_difficulty.yml} is 2:
			set {_color.dif} to "§b"
			set {_text.dif} to "簡単"
			set {_star.dif} to "★★☆☆☆"
		else if {_difficulty.yml} is 3:
			set {_color.dif} to "§a"
			set {_text.dif} to "普通"
			set {_star.dif} to "★★★☆☆"
		else if {_difficulty.yml} is 4:
			set {_color.dif} to "§e"
			set {_text.dif} to "難関"
			set {_star.dif} to "★★★★☆"
		else if {_difficulty.yml} is 5:
			set {_color.dif} to "§c"
			set {_text.dif} to "超難関"
			set {_star.dif} to "★★★★★"
		
		{_lores}.add("§f[§6§l難易度§f]")
		{_lores}.add("§8- %{_color.dif}%§l%{_text.dif}% §6[%{_color.dif}%%{_star.dif}%§6]")

		{_ItemMeta}.setLore({_lores})

		# Consumable / Food
		set {_consumable-animation.yml} to yml value "consumable-animation" from "build.%{_name}%"
		if {_consumable-animation.yml} is set:
			set {_Consumable} to {_ItemMeta}.getConsumable()
			set {_Animation} to Animation.valueOf({_consumable-animation.yml})
			{_Consumable}.setAnimation({_Animation})
			{_Consumable}.setConsumeParticles(false)
			{_Consumable}.setConsumeSeconds(2147483647)
			{_ItemMeta}.setConsumable({_Consumable})

			set {_Food} to {_ItemMeta}.getFood()
			{_Food}.setCanAlwaysEat(true)
			{_Food}.setNutrition(0)
			{_Food}.setSaturation(0)
			{_ItemMeta}.setFood({_Food})

		# Item Model
		set {_type.yml} to yml value "type" from "build.%{_name}%"
		set {_namespacedkey} to NamespacedKey.minecraft({_type.yml})
		{_ItemMeta}.setItemModel({_namespacedkey})

		{_ItemStack}.setItemMeta({_ItemMeta})

	unload yml "build.%{_name}%"
	return {_ItemStack}

local function getSkillItemType(kit: text, num: number) :: object:
	if {_kit} is "Thief":
		return Material.ANGLER_POTTERY_SHARD if {_num} is 1
		return Material.ARCHER_POTTERY_SHARD if {_num} is 2
		return Material.BLADE_POTTERY_SHARD if {_num} is 3
		return Material.BREWER_POTTERY_SHARD if {_num} is 4
		return Material.BURN_POTTERY_SHARD if {_num} is 5
		return Material.DANGER_POTTERY_SHARD if {_num} is 6
		return Material.EXPLORER_POTTERY_SHARD if {_num} is 7
		return Material.FLOW_POTTERY_SHARD if {_num} is 8
	return Material.FLOWER_BANNER_PATTERN if {_num} is 1
	return Material.CREEPER_BANNER_PATTERN if {_num} is 2
	return Material.SKULL_BANNER_PATTERN if {_num} is 3
	return Material.MOJANG_BANNER_PATTERN if {_num} is 4
	return Material.GLOBE_BANNER_PATTERN if {_num} is 5
	return Material.PIGLIN_BANNER_PATTERN if {_num} is 6
	return Material.FLOW_BANNER_PATTERN if {_num} is 7
	return Material.GUSTER_BANNER_PATTERN if {_num} is 8

local function getWeaponItemType(type: text, weapontype: text) :: object:
	return Material.STICK if {_weapontype} is "melee"
	return Material.valueOf({_type})

# 変更予定 (β1.5.0)
command /kitskillgive <text>:
	usage: /kitskillgive <kit>
	permission: sk.admin
	executable by: player
	trigger:
		set {_skills::*} to kitSkillList(arg 1)
		remove all items from player's inventory
		loop {_skills::*}:
			give loop-value to player

# 変更予定 (β1.5.0)
command /kitweapongive <text>:
	usage: /kitweapongive <kit>
	permission: sk.admin
	executable by: player
	trigger:
		set {_weapons::*} to kitWeaponList(arg 1)
		remove all items from player's inventory
		loop {_weapons::*}:
			give loop-value to player

# #####################################################################

# command /kitskillset <player> <text>:
# 	description: 初期Skillが設定されていない場合の対処
# 	permission: sk.admin
# 	trigger:
# 		if {Kit-Skill-%arg 1's UUID%.%arg 2%::1} is not set:
# 			set {Kit-Skill-%arg 1's UUID%.%arg 2%::1} to {Kit-Skill.%arg 2%::1}
# 		if {Kit-Skill-%arg 1's UUID%.%arg 2%::2} is not set:
# 			set {Kit-Skill-%arg 1's UUID%.%arg 2%::2} to {Kit-Skill.%arg 2%::2}
# 		if {Kit-Skill-%arg 1's UUID%.%arg 2%::3} is not set:
# 			set {Kit-Skill-%arg 1's UUID%.%arg 2%::3} to {Kit-Skill.%arg 2%::3}
# 		loop 3 times:
# 			give {Kit-Skill-%arg 1's UUID%.%arg 2%::%loop-number%} to arg 1

# #####################################################################

# command /kitskillunset <text>:
# 	permission: sk.admin
# 	trigger:
# 		loop {UUID::*}:
# 			delete {Kit-Skill-%loop-index%.%arg 1%::*}
# 		message "§a%arg 1% §cのSkill選択状態をリセットしました" to player

# command /kitweaponunset <text>:
# 	permission: sk.admin
# 	trigger:
# 		loop {UUID::*}:
# 			delete {Kit-Weapon-%loop-index%::%arg 1%}
# 			delete {Kit-SubWeapon-%loop-index%::%arg 1%}
# 		message "§a%arg 1% §cのWeapon選択状態をリセットしました" to player

on rightclick on smithing table:
	if block below event-block is barrier:
		set {_enable} to true
	if block above event-block is light block:
		set {_enable} to true

	{_enable} is true
	make player execute command "/kitcustom Weapon"

on rightclick on fletching table:
	if block below event-block is barrier:
		set {_enable} to true
	if block above event-block is light block:
		set {_enable} to true

	{_enable} is true
	make player execute command "/kitcustom Skill"

on rightclick on cartography table:
	if block below event-block is barrier:
		set {_enable} to true
	if block above event-block is light block:
		set {_enable} to true

	{_enable} is true
	make player execute command "/kitcustom Unit"

command /kitcustom <text> <player=%player%>:
	trigger:
		openKitGenre(arg 2, arg 1)

on inventory click:
	type of event-inventory is chest inventory
	if name of event-inventory is "§bKit: §6Genre-Weapon":
		cancel event
		if type of event-item is tagged as tag "skript:genre-concretes":
			set {_genre} to name of event-item
			replace "§6§l" with "" in {_genre}
			close player's inventory
			openKitCustom(player, "Weapon", {_genre})
	else if name of event-inventory is "§bKit: §6Genre-Skill":
		cancel event
		if type of event-item is tagged as tag "skript:genre-concretes":
			set {_genre} to name of event-item
			replace "§6§l" with "" in {_genre}
			close player's inventory
			openKitCustom(player, "Skill", {_genre})
	else if name of event-inventory is "§bKit: §9Weapon Customize":
		cancel event
		if clicked slot is 0, 1, 2, 3, 4, 5, 6, 7 or 8:
			set {_genre} to name of event-item
			if {_genre} is set:
				replace "§6§l" with "" in {_genre}
				close player's inventory
				openKitWeaponCustom(player, {_genre})
	else if name of event-inventory is "§bKit: §9Skill Customize":
		cancel event
		if clicked slot is 0, 1, 2, 3, 4, 5, 6, 7 or 8:
			set {_genre} to name of event-item
			if {_genre} is set:
				replace "§6§l" with "" in {_genre}
				close player's inventory
				openKitSkillCustom(player, {_genre})
#	else if inventory name of event-inventory is "§bKit: §9Weapon Customize":
#		cancel event
#		if clicked slot is 0, 2, 4, 6, 8, 10, 12, 14 or 16:
#			set {_genre} to name of clicked item
#			if {_genre} is set:
#				replace "§6§l" with "" in {_genre}
#				close player's inventory
#				openKitWeaponCustom(player, {_genre})
	else:
		load yml "plugins/skript-yaml/Kit Classes/All Classes.yml" as "class.all"
		set {_classes.all::*} to yml list "Classes" from "class.all"
		unload yml "class.all"
		loop {_classes.all::*}:
			# Weapon Custom
			if name of event-inventory is "§bKit: §6%loop-value%§c's Weapon":
				cancel event
				set {_weapon} to event-item
				load yml "plugins/skript-yaml/Kit Classes/%loop-value%.yml" as "class.%loop-value%"
				loop yaml node keys "weapon" from "class.%loop-value%":
					set {_main} to yml value "%loop-node%" from "class.%loop-value-1%"
					add {_main} to {_main-weapon::*}
				unload yml "class.%loop-value%"
				loop {_main-weapon::*}:
					if loop-value-2 is {_weapon}:
						close player's inventory
						set {_uuid} to UUID of player
						load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "player.%player%"
						set {_index} to loop-index-2
						set {_index} to {_index} parsed as number
						set yml value "custom.%loop-value-1%.weapon" from "player.%player%" to {_index}
						save yml "player.%player%"
						message "{@prefix} §a選択したWeaponをセーブしました" to player

			# Skill Custom
			else if name of event-inventory is "§bKit: §6%loop-value%§e's Skill":
				set {_skill} to event-item
				set {_kit} to loop-value

				load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.select.%{_kit}%"
				loop yaml node keys "skill" from "class.select.%{_kit}%":
					set {_sk} to yml value "%loop-node%" from "class.select.%{_kit}%"
					add {_sk} to {_skills::*}
				unload yml "class.select.%{_kit}%"

				if {_skills::*} contains {_skill}:
					stop
				if {_skill} is not set:
					stop
				cancel event
				if {_skill} is a white stained glass pane named " ":
					stop
				if {_skill} is a red stained glass pane named "§c§l⇩ §a§lSkill Select §c§l⇩":
					stop

				# Unitインベントリ
				if name of {_skill} contains "Registered Unit":
					execute console command "/kit-unitlist %{_kit}% %player%"
				# 一部Kitのタイプ変更
				else if name of {_skill} contains "Type Change":
					changeCustomKitType(player, {_kit})
				# Skill保存
				else if name of {_skill} contains "Save Skills":
					saveCustomKitSkill(player, {_kit})
				close player's inventory



function openKitGenre(player: player, type: text):
	wait a tick
	open chest with 6 row named "§bKit: §6Genre-%{_type}%" to {_player}
	wait a tick
	set {_num} to 0
	loop 9 times:
		if {_type} is "Weapon":
			set slot {_num} of {_player}'s current inventory to red stained glass pane named "§4Weapon Customize"
		else if {_type} is "Skill":
			set slot {_num} of {_player}'s current inventory to lime stained glass pane named "§2Skill Customize"
		else if {_type} is "Unit":
			set slot {_num} of {_player}'s current inventory to blue stained glass pane named "§1Unit Customize"
		else if {_type} is "Stats":
			set slot {_num} of {_player}'s current inventory to orange stained glass pane named "§eSELECT §6Kit Genre §7- §bStats"
		add 1 to {_num}
	loop 36 times:
		if {_num} is 9, 10, 11, 18, 19 or 20:
			set slot {_num} of {_player}'s current inventory to red concrete named "§6§lAttacker" with lore "§f近接攻撃に特化したKitです", "§f近接戦闘では圧倒的火力で猛威を奮うことが出来ます" and "§f遠距離戦闘は苦手なので,得意な距離で戦いましょう"
		else if {_num} is 12, 13, 14, 21, 22 or 23:
			set slot {_num} of {_player}'s current inventory to yellow concrete named "§6§lMagician" with lore "§f特殊な攻撃方法で戦うKitです", "§f戦闘法が独特であり,PvP技術が不必要なのが魅力です" and "§f扱いがとても難しい為,Kitへの深い理解が必要です"
		else if {_num} is 15, 16, 17, 24, 25 or 26:
			set slot {_num} of {_player}'s current inventory to lime concrete named "§6§lShooter" with lore "§f遠距離からの攻撃を得意とするKitです", "§f圧倒的な射程距離を誇り,安全な位置から攻撃できます" and "§f接近されると上手く戦えない為,敵とは離れて戦いましょう"
		else if {_num} is 27, 28, 29, 36, 37 or 38:
			set slot {_num} of {_player}'s current inventory to light blue concrete named "§6§lAcrobat" with lore "§f高い機動力で敵を翻弄するKitです", "§f3次元的な戦闘が可能であり,容易に急接近出来ます" and "§f防御面は不安な為,攻撃を受けない様に戦いましょう"
		else if {_num} is 30, 31, 32, 39, 40 or 41:
			set slot {_num} of {_player}'s current inventory to blue concrete named "§6§lTank" with lore "§f圧倒的な防御力を所持するKitです", "§f防御面でのサポートを行ない,要塞を築くことが出来ます" and "§f攻撃力が低く決定打に欠けるので,連携して戦いましょう"
		else if {_num} is 33, 34, 35, 42, 43 or 44:
			set slot {_num} of {_player}'s current inventory to pink concrete named "§6§lSupport" with lore "§f味方の援護を専門とするKitです", "§f味方の援護を行なうことでチームの戦闘力を引き上げます" and "§f自身は戦闘に不向きなので,援護に徹して立ち回りましょう"
		add 1 to {_num}
	loop 9 times:
		if {_type} is "Weapon":
			set slot {_num} of {_player}'s current inventory to red stained glass pane named "§4Weapon Customize"
		else if {_type} is "Skill":
			set slot {_num} of {_player}'s current inventory to lime stained glass pane named "§2Skill Customize"
		else if {_type} is "Unit":
			set slot {_num} of {_player}'s current inventory to blue stained glass pane named "§1Unit Customize"
		else if {_type} is "Stats":
			set slot {_num} of {_player}'s current inventory to orange stained glass pane named "§eSELECT §6Kit Genre §7- §bStats"
		add 1 to {_num}
	
function openKitCustom(player: player, type: text, genre: text, special: boolean = false):
	wait a tick
	open chest with 1 row named "§bKit: §9%{_type}% Customize" to {_player}
	wait a tick
	set {_slot} to 0
	load yml "plugins/skript-yaml/Kit Classes/All Classes.yml" as "class.all"
	set {_classes::*} to yml list "Classes" from "class.all"
	unload yml "class.all"
	loop {_classes::*}:
		load yml "plugins/skript-yaml/Kit Classes/%loop-value%.yml" as "class.%{_player}%.check"
		yml value "type" from "class.%{_player}%.check" is {_genre}
		yml value "enable" from "class.%{_player}%.check" is true
#		if {_special} is false:
#		if {_player} has permission "kit.class.%loop-value%":
		set {_uuid} to UUID of {_player}
		set {_item.%loop-value%} to yml value "item" from "class.%{_player}%.check"
		unload yml "class.%{_player}%.check"
		delete {_use::*}
		set {_use::weapon} to kitPlayerWeaponItem({_player}, loop-value)
		set {_use::skill-1} to kitPlayerSkillItem({_player}, loop-value, 1)
		set {_use::skill-2} to kitPlayerSkillItem({_player}, loop-value, 2)
		set {_use::skill-3} to kitPlayerSkillItem({_player}, loop-value, 3)
		set slot {_slot} of {_player}'s current inventory to {_item.%loop-value%} named "§6§l%loop-value%" with lore " ", "§4Weapon: §r%display name of {_use::weapon}%", "§6Skill 1: §r%display name of {_use::skill-1}%", "§6Skill 2: §r%display name of {_use::skill-2}%" and "§6Skill 3: §r%display name of {_use::skill-3}%"
		add 1 to {_slot}

function openKitSkillCustom(player: player, kit: text):
	wait a tick
	open chest with 5 row named "§bKit: §6%{_kit}%§e's Skill" to {_player}
	wait a tick
	set {_num} to -1
	loop 27 times:
		add 1 to {_num}
		if {_num} is 0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25 or 26:
			set slot {_num} of {_player}'s current inventory to a white stained glass pane named " "
		else if {_num} is 1, 4 or 7:
			set slot {_num} of {_player}'s current inventory to a red stained glass pane named "§c§l⇩ §a§lSkill Select §c§l⇩"
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.custom.%{_kit}%"
	loop yaml node keys "skill" from "class.custom.%{_kit}%":
		set {_skill} to yml value "%loop-node%" from "class.custom.%{_kit}%"
		add {_skill} to {_skills::*}
	unload yml "class.custom.%{_kit}%"
	loop {_skills::*}:
		add 1 to {_num}
		set slot {_num} of {_player}'s current inventory to loop-value
	set slot 38 of {_player}'s current inventory to a chest named "§9Registered Unit" with lore "§b登録済であるSkill編成に変更します"
	if {_kit} is "Werewolf", "Werewolf_Instinct", "Vampire" or "Vampire_Bat":
		set slot 42 of {_player}'s current inventory to a redstone item named "§cType Change" with lore "§7Kitのタイプを変更します" and "§9Kit§7: §4§lWerewolf§7, §4§lVampire"
	set slot 44 of {_player}'s current inventory to nether star named "§eSave Skills" with lore "§a選択したSkillをセーブします"

function openKitWeaponCustom(player: player, kit: text):
	wait a tick
	open chest with 3 row named "§bKit: §6%{_kit}%§c's Weapon" to {_player}
	wait a tick
	# set slot 0 of {_player}'s current inventory to a red glass pane named "§4§lMain Weapon" with lore "§fKitのメインとなる武器です" and "§aこの列のアイテムを選択して下さい"
	# set slot 9 of {_player}'s current inventory to a yellow glass pane named "§e§lSub Weapon" with lore "§fKitのオフハンドに装備する武器です" and "§cこの列のアイテムは選択できません"

	set {_num} to -1
	loop 27 times:
		add 1 to {_num}
		if {_num} is 0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25 or 26:
			set slot {_num} of {_player}'s current inventory to a white stained glass pane named " "
		else if {_num} is 1, 4 or 7:
			set slot {_num} of {_player}'s current inventory to a red stained glass pane named "§4§l⇩ §c§lWeapon Select §4§l⇩"

	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.custom.%{_kit}%"
	loop yaml node keys "weapon" from "class.custom.%{_kit}%":
		set {_main} to yml value "%loop-node%" from "class.custom.%{_kit}%"
		add {_main} to {_main-weapon::*}
		# set {_sub} to yml value "%loop-node%.sub" from "class.custom.%{_kit}%"
		# add {_sub} to {_sub-weapon::*}
	unload yml "class.custom.%{_kit}%"

	set {_slot} to 10
	loop {_main-weapon::*}:
		set slot {_slot} of {_player}'s current inventory to loop-value
		add 3 to {_slot}
	# set {_slot} to 11
	# loop {_sub-weapon::*}:
	# 	set slot {_slot} of {_player}'s current inventory to loop-value
	# 	add 1 to {_slot}



local function changeCustomKitType(player: player, kit: text):
	saveCustomKitSkill({_player}, {_kit})
	if {_kit} is "Werewolf":
		set {_type} to "Werewolf_Instinct"
	else if {_kit} is "Vampire":
		set {_type} to "Vampire_Bat"
	else:
		message "{@prefix} §c§lこのKitは別Typeが存在しません!" to {_player}
		stop
	make {_player} execute command "/skillcustom %{_type}%"

local function saveCustomKitSkill(player: player, kit: text):
	set {_skill1} to slot 10 of {_player}'s current inventory
	set {_skill2} to slot 13 of {_player}'s current inventory
	set {_skill3} to slot 16 of {_player}'s current inventory
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.custom.%{_kit}%"
	loop yaml node keys "skill" from "class.custom.%{_kit}%":
		set {_skill} to yml value "%loop-node%" from "class.custom.%{_kit}%"
		add {_skill} to {_skills::*}
	unload yml "class.custom.%{_kit}%"
	loop {_skills::*}:
		if {_skill1} is loop-value:
			add 1 to {_con}
			set {_skillslot-1} to loop-index parsed as number
		if {_skill2} is loop-value:
			add 1 to {_con}
			set {_skillslot-2} to loop-index parsed as number
		if {_skill3} is loop-value:
			add 1 to {_con}
			set {_skillslot-3} to loop-index parsed as number
	if {_con} is 3:
		# 重複チェック
		set {_doubled} to false
		set {_ln} to 0
		loop 3 times:
			add 1 to {_ln}
			set {_ln.next} to {_ln} + 1
			if {_ln.next} > 3:
				set {_ln.next} to 1
			
			if {_skillslot-%{_ln}%} is {_skillslot-%{_ln.next}%}:
				set {_doubled} to true
		if {_doubled} is true:
			message formatted "{@prefix} §c選択アイテムが§4§l重複§cしています!" to {_player}	
			stop

		set {_uuid} to UUID of {_player}
		load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "player.%{_player}%.custom"
		set yml value "custom.%{_kit}%.skill.1" from "player.%{_player}%.custom" to {_skillslot-1}
		set yml value "custom.%{_kit}%.skill.2" from "player.%{_player}%.custom" to {_skillslot-2}
		set yml value "custom.%{_kit}%.skill.3" from "player.%{_player}%.custom" to {_skillslot-3}
		save yml "player.%{_player}%.custom"
		message "{@prefix} §a選択したSkillをセーブしました" to {_player}
		if {Kit-tochu} is true:
			if {Join::%{_player}%} is "Kit":
				execute console command "/class %{_kit}% %{_player}% true"
	else:
		message "{@prefix} §c選択したアイテムはSkillではありません" to {_player}
	close {_player}'s inventory



command /kitskillusage <text>:
	permission: sk.admin
	trigger:
		message formatted "{@prefix} §c§l%arg 1%§2's Skill Usage:" to player
		load yml "plugins/skript-yaml/Kit Classes/%arg 1%.yml" as "skill.use.item"
		loop yaml node keys "skill" from "skill.use.item":
			set {_skill} to yml value "%loop-node%" from "skill.use.item"
			add {_skill} to {_skills::*}
		loop all offline players:
			set {_uuid} to loop-offline player's UUID
			load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "skill.use.player"
			yml value "custom.%arg 1%.skill.1" from "skill.use.player" is set
			add 1 to {_sum}
			loop 3 times:
				set {_slotnum} to yml value "custom.%arg 1%.skill.%loop-number%" from "skill.use.player"
				set {_skill} to yml value "skill.%{_slotnum}%" from "skill.use.item"
				set {_name} to display name of {_skill}
				add 1 to {_U-%{_name}%}
		unload yml "skill.use.player"
		unload yml "skill.use.item"
		loop {_skills::*}:
			set {_name} to display name of {_skills::%loop-index%}
			if {_U-%{_name}%} is not set:
				set {_U-%{_name}%} to 0
			set {_per} to ({_U-%{_name}%} / {_sum}) * 100
			message formatted "{@prefix} - %{_name}%§7 §a%{_per}%§e%%" to player

command /kitweaponusage <text>:
	permission: sk.admin
	trigger:
		message formatted "{@prefix} §c§l%arg 1%§2's Weapon Usage:" to player
		load yml "plugins/skript-yaml/Kit Classes/%arg 1%.yml" as "weapon.use.item"
		loop yaml node keys "weapon" from "weapon.use.item":
			set {_weapon} to yml value "%loop-node%" from "weapon.use.item"
			add {_weapon} to {_weapons::*}
		loop all offline players:
			set {_uuid} to loop-offline player's UUID
			load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "weapon.use.player"
			yml value "custom.%arg 1%.weapon" from "weapon.use.player" is set
			add 1 to {_sum}
			set {_slotnum} to yml value "custom.%arg 1%.weapon" from "weapon.use.player"
			set {_weapon} to yml value "weapon.%{_slotnum}%" from "weapon.use.item"
			set {_name} to display name of {_weapon}
			add 1 to {_U-%{_name}%}
		unload yml "weapon.use.player"
		unload yml "weapon.use.item"
		loop {_weapons::*}:
			set {_name} to display name of {_weapons::%loop-index%}
			if {_U-%{_name}%} is not set:
				set {_U-%{_name}%} to 0
			set {_per} to ({_U-%{_name}%} / {_sum}) * 100
			message formatted "{@prefix} - %{_name}%§7 §a%{_per}%§e%%" to player

# Kitの特定のSkillを取得
function kitSkillItem(kit: text, num: number) :: item:
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.%{_kit}%"
	set {_item} to yml value "skill.%{_num}%" from "class.%{_kit}%"
	unload yml "class.%{_kit}%"
	return {_item}

# Kitの特定のWeaponを取得
function kitWeaponItem(kit: text, num: number) :: item:
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.%{_kit}%"
	set {_item} to yml value "weapon.%{_num}%" from "class.%{_kit}%"
	unload yml "class.%{_kit}%"
	return {_item}

# KitのSkillリストを取得
function kitSkillList(kit: text) :: items:
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.%{_kit}%"
	loop yaml node keys "skill" from "class.%{_kit}%":
		set {_skill} to yml value "%loop-node%" from "class.%{_kit}%"
		add {_skill} to {_skills::*}
	unload yml "class.%{_kit}%"
	return {_skills::*}

# KitのWeaponリストを取得
function kitWeaponList(kit: text) :: items:
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.%{_kit}%"
	loop yaml node keys "weapon" from "class.%{_kit}%":
		set {_weapon} to yml value "%loop-node%" from "class.%{_kit}%"
		add {_weapon} to {_weapons::*}
	unload yml "class.%{_kit}%"
	return {_weapons::*}

# プレイヤーが選択しているSkillの取得
function kitPlayerSkillItem(player: player, kit: text, slot: number) :: item:
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.%{_player}%.kit"
	set {_uuid} to UUID of {_player}
	load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "player.%{_player}%.kit"
	set {_num} to yml value "custom.%{_kit}%.skill.%{_slot}%" from "player.%{_player}%.kit"
	set {_item} to yml value "skill.%{_num}%" from "class.%{_player}%.kit"
	unload yml "class.%{_player}%.kit"
	unload yml "player.%{_player}%.kit"
	return {_item}

# プレイヤーが選択しているWeaponの取得
function kitPlayerWeaponItem(player: player, kit: text) :: item:
	load yml "plugins/skript-yaml/Kit Classes/%{_kit}%.yml" as "class.%{_player}%.kit"
	set {_uuid} to UUID of {_player}
	load yml "plugins/skript-yaml/Kit Players/%{_uuid}%.yml" as "player.%{_player}%.kit"
	set {_num} to yml value "custom.%{_kit}%.weapon" from "player.%{_player}%.kit"
	set {_item} to yml value "weapon.%{_num}%" from "class.%{_player}%.kit"
	unload yml "class.%{_player}%.kit"
	unload yml "player.%{_player}%.kit"
	return {_item}

#function kitSkillUpdate(kit: text):
#	loop {Kit-Skill.%{_kit}%::*}:
#		set {_name.base} to display name of {Kit-Skill.%{_kit}%::%loop-index%}
#		loop all offline players:
#			set {_uuid} to loop-offline player's UUID
#			{Kit-Skill-%{_uuid}%.%{_kit}%::1} is set
#			set {_ln} to 0
#			loop 3 times:
#				add 1 to {_ln}
#				set {_name.use} to display name of {Kit-Skill-%{_uuid}%.%{_kit}%::%{_ln}%}
#				if {_name.base} is {_name.use}:
#					set {Kit-Skill-%{_uuid}%.%{_kit}%::%{_ln}%} to {Kit-Skill.%{_kit}%::%loop-index%}
#
#function kitWeaponUpdate(kit: text):
#	loop {Kit-Weapon.%{_kit}%::*}:
#		set {_name.base} to display name of {Kit-Weapon.%{_kit}%::%loop-index%}
#		loop all offline players:
#			set {_uuid} to loop-offline player's UUID
#			{Kit-Weapon-%{_uuid}%::%{_kit}%} is set
#			set {_name.use} to display name of {Kit-Weapon-%{_uuid}%::%{_kit}%}
#			if {_name.base} is {_name.use}:
#				set {Kit-Weapon-%{_uuid}%::%{_kit}%} to {Kit-Weapon.%{_kit}%::%loop-index%}
#				set {Kit-SubWeapon-%{_uuid}%::%{_kit}%} to {Kit-SubWeapon.%{_kit}%::%loop-index%}