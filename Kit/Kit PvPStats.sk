options:
	prefix: §9[§bPvPStats§9]

on death of player:
	{LastKiller::%victim%} is set
	kitDeathEvent(victim, {LastKiller::%victim%}, damage cause)

function kitDeathEvent(victim: player, attacker: player, damagecause: damage cause):
# 自殺であるかどうかの確認
	{_attacker} is not {_victim}
# 試合進行中、試合参加中であるかどうかの確認
	{Kit-tochu} is true
	{Join::%{_victim}%} is "Kit"
# Banditでないかどうかの確認
	{TrueTeam::%{_victim}%} is not "purple"
	{TrueTeam::%{_attacker}%} is not "purple"
# Ultのチャージ
	if {Ulting::%{_attacker}%} is not set:
		add 5 to {Ultimate::%{_attacker}%}
	set {_killid} to kitSaveKillInfo({_victim}, {_damagecause})
	message "{@prefix} §e%{_victim}% §dをキルしました" to {_attacker}
# データ保存
	set {_attacker.UUID} to uuid of {_attacker}
	set {_victim.UUID} to uuid of {_victim}
# Soulの贈与
	add 2 to {Kit-Soul::%{_attacker.UUID}%}
# Assist Check
# # 自身をAssist候補から省く
	set {_true.%{_attacker}%} to true
# # victimに攻撃を与えた者をループ
	loop {damager.%{_victim}%::*}:
		loop-value is not {_attacker}  # アシスト者とキラーが同一人物でないかどうか
		{TrueTeam::%loop-value%} is {TrueTeam::%{_attacker}%}  # チームが同一であるかどうか
		{_true.%loop-value%} is not set  # 既にアシストとして換算済でないかどうか
		add loop-value to {_supporters::*}  # サポート者の保存
		kitSaveAssistInfo(loop-value, {_killid})
		if {Ulting::%loop-value%} is not set:  # Ultのチャージ
			add 3 to {Ultimate::%loop-value%}
		set {_true.%loop-value%} to true  # 換算済として設定
		message "{@prefix} §e%{_victim}% §aのキルアシストをしました" to loop-value  # メッセージ送信
		add 1 to {Kit-Soul::%loop-value's UUID%}  # Soulの贈与
# Killerにアシストした者をループ
	loop {supporter.%{_attacker}%::*}:
		loop-value is not {_attacker}  # アシスト者とキラーが同一人物でないかどうか
		{TrueTeam::%loop-value%} is {TrueTeam::%{_attacker}%}  # チームが同一であるかどうか
		{_true.%loop-value%} is not set  # 既にアシストとして換算済でないかどうか
		add loop-value to {_supporters::*}  # サポート者の保存
		kitSaveAssistInfo(loop-value, {_killid})
		if {Ulting::%loop-value%} is not set:  # Ultのチャージ
			add 3 to {Ultimate::%loop-value%}
		set {_true.%loop-value%} to true  # 換算済として設定
		message "{@prefix} §e%{_victim}% §aのキルアシストをしました" to loop-value  # メッセージ送信
		add 1 to {Kit-Soul::%loop-value's UUID%}  # Soulの贈与
# 進行中のゲームに対して情報を送信する
	kitRuleDeathEvent({_attacker}, {_victim}, {_supporters::*})
#
	wait 5 ticks
	delete {damager.%{_victim}%::*}
	delete {supporter.%{_victim}%::*}
	delete {supporter.%{_attacker}%::*}
	delete {LastKiller::%{_victim}%}

#command /topstatslist <text>:
#	permission: sk.admin
#	trigger:
#		make player execute command "/topstats kill %arg 1%"
#		make player execute command "/topstats kd %arg 1%"
#		make player execute command "/topstats death %arg 1%"
#		make player execute command "/topstats count %arg 1%"
#		make player execute command "/topstats assist %arg 1%"

function kitRuleDeathEvent(attacker: player, victim: player, supporters: players):
	if {Kit-GameStage::rule} is "TDM":
		kitDeathEvent_TDM({_attacker}, {_victim}, {_supporters::*})
	else if {Kit-GameStage::rule} is "DTC":
		kitDeathEvent_DTC({_attacker}, {_victim}, {_supporters::*})
	else if {Kit-GameStage::rule} is "CTF":
		kitDeathEvent_CTF({_attacker}, {_victim}, {_supporters::*})
	else if {Kit-GameStage::rule} is "SH":
		kitDeathEvent_SH({_attacker}, {_victim}, {_supporters::*})
	else if {Kit-GameStage::rule} is "CP":
		kitDeathEvent_CP({_attacker}, {_victim}, {_supporters::*})

command /kitclearplayerstats <offline player> <text>:
	permission: sk.admin
	trigger:
		delete {%arg 1%-Kill.all::%arg 1's UUID%}
		delete {%arg 1%-Kill.GoK::%arg 1's UUID%}
		delete {%arg 1%-Kill.RtL::%arg 1's UUID%}
		delete {%arg 1%-Kill.BEC::%arg 1's UUID%}
		delete {%arg 1%-Kill.StW::%arg 1's UUID%}
		delete {%arg 1%-Kill.EmJ::%arg 1's UUID%}
		delete {%arg 1%-Kill.CPA::%arg 1's UUID%}
		delete {%arg 1%-Death.all::%arg 1's UUID%}
		delete {%arg 1%-Death.GoK::%arg 1's UUID%}
		delete {%arg 1%-Death.RtL::%arg 1's UUID%}
		delete {%arg 1%-Death.BEC::%arg 1's UUID%}
		delete {%arg 1%-Death.StW::%arg 1's UUID%}
		delete {%arg 1%-Death.EmJ::%arg 1's UUID%}
		delete {%arg 1%-Death.CPA::%arg 1's UUID%}
		delete {%arg 1%-KD.all::%arg 1's UUID%}
		delete {%arg 1%-KD.GoK::%arg 1's UUID%}
		delete {%arg 1%-KD.RtL::%arg 1's UUID%}
		delete {%arg 1%-KD.BEC::%arg 1's UUID%}
		delete {%arg 1%-KD.StW::%arg 1's UUID%}
		delete {%arg 1%-KD.EmJ::%arg 1's UUID%}
		delete {%arg 1%-KD.CPA::%arg 1's UUID%}
		delete {%arg 1%-Win.all::%arg 1's UUID%}
		delete {%arg 1%-Win.GoK::%arg 1's UUID%}
		delete {%arg 1%-Win.RtL::%arg 1's UUID%}
		delete {%arg 1%-Win.BEC::%arg 1's UUID%}
		delete {%arg 1%-Win.StW::%arg 1's UUID%}
		delete {%arg 1%-Win.EmJ::%arg 1's UUID%}
		delete {%arg 1%-Win.CPA::%arg 1's UUID%}
		delete {%arg 1%-Assist.all::%arg 1's UUID%}
		delete {%arg 1%-Assist.GoK::%arg 1's UUID%}
		delete {%arg 1%-Assist.RtL::%arg 1's UUID%}
		delete {%arg 1%-Assist.BEC::%arg 1's UUID%}
		delete {%arg 1%-Assist.StW::%arg 1's UUID%}
		delete {%arg 1%-Assist.EmJ::%arg 1's UUID%}
		delete {%arg 1%-Assist.CPA::%arg 1's UUID%}
		loop {Kits::*}:
			delete {%arg 1%-Kill.%loop-value%::%arg 1's UUID%}
			delete {%arg 1%-Death.%loop-value%::%arg 1's UUID%}
			delete {%arg 1%-KD.%loop-value%::%arg 1's UUID%}
			delete {%arg 1%-Assist.%loop-value%::%arg 1's UUID%}

#command /kitclearstats:
#	permission: sk.admin
#	trigger:
#		delete {Kit-Kill.all::*}
#		delete {Kit-Kill.GoK::*}
#		delete {Kit-Kill.RtL::*}
#		delete {Kit-Kill.BEC::*}
#		delete {Kit-Kill.StW::*}
#		delete {Kit-Kill.EmJ::*}
#		delete {Kit-Kill.CPA::*}
#		delete {Kit-Death.all::*}
#		delete {Kit-Death.GoK::*}
#		delete {Kit-Death.RtL::*}
#		delete {Kit-Death.BEC::*}
#		delete {Kit-Death.StW::*}
#		delete {Kit-Death.EmJ::*}
#		delete {Kit-Death.CPA::*}
#		delete {Kit-KD.all::*}
#		delete {Kit-KD.GoK::*}
#		delete {Kit-KD.RtL::*}
#		delete {Kit-KD.BEC::*}
#		delete {Kit-KD.StW::*}
#		delete {Kit-KD.EmJ::*}
#		delete {Kit-KD.CPA::*}
#		delete {Kit-Win.all::*}
#		delete {Kit-Win.GoK::*}
#		delete {Kit-Win.RtL::*}
#		delete {Kit-Win.BEC::*}
#		delete {Kit-Win.StW::*}
#		delete {Kit-Win.EmJ::*}
#		delete {Kit-Win.CPA::*}
#		delete {Kit-Assist.all::*}
#		delete {Kit-Assist.GoK::*}
#		delete {Kit-Assist.RtL::*}
#		delete {Kit-Assist.BEC::*}
#		delete {Kit-Assist.StW::*}
#		delete {Kit-Assist.EmJ::*}
#		delete {Kit-Assist.CPA::*}
#		loop {Kits::*}:
#			delete {Kit-Kill.%loop-value%::*}
#			delete {Kit-Death.%loop-value%::*}
#			delete {Kit-KD.%loop-value%::*}
#			delete {Kit-Assist.%loop-value%::*}

function kitClearStats():
	delete {Kit-Kill.all::*}
	delete {Kit-Kill.month::*}
	delete {Kit-Kill.week::*}
	delete {Kit-Death.all::*}
	delete {Kit-Death.month::*}
	delete {Kit-Death.week::*}
	delete {Kit-KD.all::*}
	delete {Kit-KD.month::*}
	delete {Kit-KD.week::*}
	delete {Kit-Win.all::*}
	delete {Kit-Win.month::*}
	delete {Kit-Win.week::*}
	delete {Kit-Win.TDM::*}
	delete {Kit-Win.DTC::*}
	delete {Kit-Win.CTF::*}
	delete {Kit-Win.SH::*}
	delete {Kit-Win.CP::*}
	delete {Kit-Assist.all::*}
	delete {Kit-Assist.month::*}
	delete {Kit-Assist.week::*}
	load yml "plugins/skript-yaml/Kit Classes/All Classes.yml" as "classes"
	set {_kits::*} to yml list "Classes" from "classes"
	unload yml "classes"
	loop {_kits::*}:
		delete {Kit-Kill.%loop-value%::*}
		delete {Kit-Death.%loop-value%::*}
		delete {Kit-KD.%loop-value%::*}
		delete {Kit-Assist.%loop-value%::*}