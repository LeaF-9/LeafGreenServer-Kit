function packetGlowing(player: player, target: entity, color: color = white):
	# waiting update of skript-packet...
	# #
	# set {_pkt} to new play_server_entity_metadata packet
	# set field 0 of {_pkt} to id of {_target}
	# set {_dw} to new data watcher for {_target}
	# set datawatcher index 0 of {_dw} to (64 as byte) # 0x40
	# set field 1 of {_pkt} to {_dw}
	# send {_player} packet {_pkt}
	reflectGlowing({_player}, {_target})

function packetUnglowing(player: player, target: entity):
	# waiting update of skript-packet...
	# #
	# set {_pkt} to new play_server_entity_metadata packet
	# set field 0 of {_pkt} to id of {_target}
	# set {_dw} to new data watcher for {_target}
	# set datawatcher index 0 of {_dw} to (0 as byte) # 0x40
	# set field 1 of {_pkt} to {_dw}
	# send {_player} packet {_pkt}
	reflectUnglowing({_player}, {_target})

import:
	java.util.ArrayList
	com.comphenix.protocol.ProtocolLibrary
	com.comphenix.protocol.PacketType
	com.comphenix.protocol.events.ListeningWhitelist
	com.comphenix.protocol.events.PacketContainer
	com.comphenix.protocol.events.PacketListener
	com.comphenix.protocol.utility.MinecraftReflection
	com.comphenix.protocol.wrappers.WrappedDataValue
	com.comphenix.protocol.wrappers.WrappedDataWatcher
	com.comphenix.protocol.wrappers.WrappedWatchableObject
	com.google.common.collect.Lists

# expression watchable collection %number% of %object%:
# 	set:
# 		expr-2.getWatchableCollectionModifier().write(expr-1, change value)
# 	get:
# 		return expr-2.getWatchableCollectionModifier().read(expr-1)
# 	add:
# 		set {_list} to expr-2.getDataValueCollectionModifier().read(expr-1)
# 		set {_values} to Lists.newArrayList(change value)
# 		expr-2.getDataValueCollectionModifier().write(expr-1, {_values})

function new_watchable_object(index: number, value: object) :: object:
	return new WrappedDataValue({_index}, WrappedDataWatcher.Registry.get(class of {_value}), {_value})

function reflectGlowing(player: player, target: entity):
	set {_p} to new PacketContainer(PacketType.Play.Server.ENTITY_METADATA)
	{_p}.getIntegers().write(0, id of {_target})

	set {_list} to Lists.newArrayList()

	set {_value} to new_watchable_object(0, 64.byteValue())

	{_list}.add({_value})

	{_p}.getDataValueCollectionModifier().write(0, {_list})
	ProtocolLibrary.getProtocolManager().sendServerPacket({_player}, {_p})

function reflectUnglowing(player: player, target: entity):
	set {_p} to new PacketContainer(PacketType.Play.Server.ENTITY_METADATA)
	{_p}.getIntegers().write(0, id of {_target})

	set {_dw} to WrappedDataWatcher.getEntityWatcher({_target}).deepClone()
	set {_value} to new_watchable_object(0, 0.byteValue())
	{_dw}.setObject(0, {_value})

	set {_list} to Lists.newArrayList()

	set {_watchableobjects::*} to {_dw}.getWatchableObjects()

	loop {_watchableobjects::*}:
		set {_obj} to loop-value

		if {_obj} is null:
			continue

		set {_wo} to {_obj}.getWatcherObject()
		{_list}.add(new WrappedDataValue({_wo}.getIndex(), {_wo}.getSerializer(), {_obj}.getRawValue()))

	{_p}.getDataValueCollectionModifier().write(0, {_list})
	ProtocolLibrary.getProtocolManager().sendServerPacket({_player}, {_p})

function skacketGlowing(player: player, target: entity):
	set client glowing of {_target} to true for {_player}

function skacketUnglowing(player: player, target: entity):
	set client glowing of {_target} to false for {_player}

# clientside particles
function targetParticles(player: player, target: entity, color: color):
	if "%type of {_target}%" is not "player":
		stop
	# ターゲットの方向を示す直線
	set {_baseloc.player} to location of {_player}
	add 1 to y-pos of {_baseloc.player}
	set {_vector} to setVector(location of {_player}, location of {_target})
	set {_baseloc.player} to setDirToVec({_baseloc.player}, {_vector})
	set {_dis} to round(distance between {_player} and {_target}) * 2
	loop {_dis} times:
		set {_el} to location 0.5 * loop-number meters in front of {_baseloc.player}
		spawnParticle_Dust({_color}, 0.5, {_el}, {_player})
	# ターゲットを囲う箱
	set {_baseloc.target} to location of {_target}
	set {_baseloc} to {_baseloc.target}
	subtract 0.5 from x-pos of {_baseloc}
	subtract 0.5 from z-pos of {_baseloc}
	set yaw of {_baseloc} to 270
	set pitch of {_baseloc} to 0
	loop 4 times:
		set {_ln} to 0
		loop 5 times:
			set {_el} to location 0.2 * {_ln} meters in front of {_baseloc}
			spawnParticle_Dust({_color}, 0.5, {_el}, {_player})
			set {_el} to location 2 meters above {_el}
			spawnParticle_Dust({_color}, 0.5, {_el}, {_player})
			add 1 to {_ln}
		loop 10 times:
			set {_el} to location 0.2 * loop-number-2 meters above {_baseloc}
			spawnParticle_Dust({_color}, 0.5, {_el}, {_player})
		set {_baseloc} to location 1 meter in front of {_baseloc}
		add 90 to yaw of {_baseloc}