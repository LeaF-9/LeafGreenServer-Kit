function checkHitEntities(loc: location) :: entities:
	loop all entities in radius 3 around {_loc}:
		delete {_continue}
		if checkEntityType(loop-entity, armor stand) is true:
			continue
		if checkEntityType(loop-entity, block display) is true:
			continue
		if checkEntityType(loop-entity, item display) is true:
			continue
		if checkEntityType(loop-entity, text display) is true:
			continue
		if checkEntityType(loop-entity, falling block) is true:
			continue

		if metadata value "shield entity" of loop-entity is true:
			if {_shield} is set:
				continue
			set {_shield} to true
		
		if {_continue} is true:
			continue
		checkHitting(loop-entity, {_loc}) is true
		add loop-entity to {_entities::*}
	return {_entities::*}

function checkHitting(entity: entity, loc: location) :: boolean:
	set {_bool} to false
	set {_BoundingBox} to {_entity}.getBoundingBox()
	set {_vec.min} to {_boundingBox}.getMin()
	set {_vec.max} to {_boundingBox}.getMax()

	set {_world} to world of {_entity}
	set {_loc.min} to location of {_vec.min} in {_world}
	set {_loc.max} to location of {_vec.max} in {_world}

	if:
		x-pos of {_loc} is between x-pos of {_loc.min} and x-pos of {_loc.max}
		y-pos of {_loc} is between y-pos of {_loc.min} and y-pos of {_loc.max}
		z-pos of {_loc} is between z-pos of {_loc.min} and z-pos of {_loc.max}
	then:
		set {_bool} to true
	return {_bool}



# 球体状の攻撃判定に被弾判定が触れているか検知
function checkHitting_Sphere(entity: entity, loc: location, radius: number) :: boolean:
	# 球体の中心座標と半径
	set {_sphere.x} to x-pos of {_loc}
	set {_sphere.y} to y-pos of {_loc}
	set {_sphere.z} to z-pos of {_loc}

	# 直方体の中心座標とサイズ
	set {_BoundingBox} to {_entity}.getBoundingBox()
	set {_vec.min} to {_BoundingBox}.getMin()
	set {_vec.max} to {_BoundingBox}.getMax()

	# 直方体の各頂点を計算
	set {_world} to world of {_loc}
	set {_vertices::1} to location((x of {_vec.min}), (y of {_vec.min}), (z of {_vec.min}), {_world})
	set {_vertices::2} to location((x of {_vec.min}), (y of {_vec.min}), (z of {_vec.max}), {_world})
	set {_vertices::3} to location((x of {_vec.max}), (y of {_vec.min}), (z of {_vec.min}), {_world})
	set {_vertices::4} to location((x of {_vec.max}), (y of {_vec.min}), (z of {_vec.max}), {_world})
	set {_vertices::5} to location((x of {_vec.min}), (y of {_vec.max}), (z of {_vec.min}), {_world})
	set {_vertices::6} to location((x of {_vec.min}), (y of {_vec.max}), (z of {_vec.max}), {_world})
	set {_vertices::7} to location((x of {_vec.max}), (y of {_vec.max}), (z of {_vec.min}), {_world})
	set {_vertices::8} to location((x of {_vec.max}), (y of {_vec.max}), (z of {_vec.max}), {_world})

	# 当たり判定の計算
	set {_hit} to false
	set {_ln} to 0
	loop 8 times:
		continue if {_hit} is true
		add 1 to {_ln}
		set {_vx} to x-pos of {_vertices::%{_ln}%}
		set {_vy} to y-pos of {_vertices::%{_ln}%}
		set {_vz} to z-pos of {_vertices::%{_ln}%}
		# 距離計算
		set {_dis} to (({_vx} - {_sphere.x}) ^ 2) + (({_vy} - {_sphere.y}) ^ 2) + (({_vz} - {_sphere.z}) ^ 2)
		set {_distance} to sqrt({_dis})
		if {_distance} <= {_radius}:
			set {_hit} to true
	
	return {_hit}