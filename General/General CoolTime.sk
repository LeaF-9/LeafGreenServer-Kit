function playerCoolTimer(player: player):
	if {CoolTimer::%{_player}%} is true:
		stop
	set {CoolTimer::%{_player}%} to true
	set {_timer} to true
	while {_timer} is true:
		# 麻痺時の処理
		if getDebuffs({_player}, "Palsy") is true:
			if (size of {_palsied::*}) = 0:
				loop all items in {_player}'s inventory:
					set {_loopKit} to kitItemKitChecker(loop-item)
					continue if {_loopKit} is not set
					set {_loopType} to kitItemTypeChecker(loop-item)
					continue if {_loopType} is not "skill"

					set {_loopKey} to name of loop-item
					set {_palsied::%{_loopKey}%} to loop-item

			loop {_palsied::*}:
				set {_loop-item} to loop-value
				set item cooldown of {_loop-item} for {_player} to 10000 seconds
			wait a tick
			continue

		# 麻痺終了時の処理
		if (size of {_palsied::*}) is not 0:
			loop {_palsied::*}:
				delete {_palsied::%loop-index%}
				{CT.%{_player}%::%loop-index%} is not set
				set item cooldown of {_palsied::%loop-index%} for {_player} to 0 seconds

		# CT未存在時はタイマーストップ
		if size of {CT.%{_player}%::*} is 0:
			delete {_timer}
			continue

		loop {CT.%{_player}%::*}:
			if {_ctitem.%loop-index%} is not set:
				loop all items in {_player}'s inventory:
					name of loop-item contains loop-index
					set {_ctitem.%loop-index%} to loop-item

			if loop-value <= 0:
				delete {CT.%{_player}%::%loop-index%}

				set {_bar} to true
				if {_ctitem.%loop-index%} is set:
					set item cooldown of {_ctitem.%loop-index%} for {_player} to 0 seconds
					send action bar "§a%loop-index% §bのクールタイムが終了しました!" to {_player}
					playSound("entity.player.levelup", 0.5, 1, {_player}, true)

			else:
				if {_maxct::%loop-index%} is not set:  # maxctの取得
					set {_maxct::%loop-index%} to {CT.%{_player}%::%loop-index%}
				if {CTStop.%{_player}%::%loop-index%} is true:
					set {_sub} to 0
				else if getKitStats({_player}, "FastCT") is true:
					set {_sub} to 0.15
				else:
					set {_sub} to 0.05
				subtract {_sub} from {CT.%{_player}%::%loop-index%}

				if {CT.%{_player}%::%loop-index%} <= 0:
					delete {CT.%{_player}%::%loop-index%}

					if {_ctitem.%loop-index%} is set:
						set item cooldown of {_ctitem.%loop-index%} for {_player} to 0 seconds
						set {_bar} to true
						send action bar "§a%loop-index% §bのクールタイムが終了しました!" to {_player}
						playSound("entity.player.levelup", 0.5, 1, {_player}, true)

				else:
					if {_player}'s inventory contains {_ctitem.%loop-index%}:
						set {_itemtime} to 10000 seconds
					else:
						set {_itemtime} to 0 seconds
					set item cooldown of {_ctitem.%loop-index%} for {_player} to {_itemtime}
					if name of tool of {_player} contains loop-index:
						set {_bar} to true
						barCT({_player}, {CT.%{_player}%::%loop-index%}, {_maxct::%loop-index%})

		if {_bar} is true:
			set {_bar} to false
		else if {_bar} is false:
			delete {_bar}
			send action bar " " to {_player}
		wait a tick
	delete {CoolTimer::%{_player}%}

local function barCT(player: player, ct: number, max: number):
	# 進捗数字
	set {_baseliner} to {_ct} / {_max} * 50 + 1  # +1はBarの見た目を整えるための数値
	# bar表記
	set {_line} to ""
	loop 50 times:
		if loop-number <= {_baseliner}:
			set {_line} to "%{_line}%§b|"
		else:
			set {_line} to "%{_line}%§8|"
	# 数字表記
	set {_time} to {_ct}
	set {_timetexts::*} to "%{_time}%" split at "."
	if size of {_timetexts::*} is 1:
		set {_timetext} to "%{_time}%.00"
	else if length of {_timetexts::2} is 1:
		set {_timetext} to "%{_time}%0"
	else:
		set {_timetext} to "%{_time}%"
	set {_line} to "%{_line}%   §c§l%{_timetext}% §a秒"
	send action bar {_line} to {_player}

every a second:
	loop all players:
		getDebuffs(loop-player, "Palsy") is false
		if size of {CT.%loop-player%::*} is not 0:
			set {_checker::%loop-player%} to loop-player
			loop {CT.%loop-player%::*}:
				if {_index.%loop-player%} is set:
					continue
				set {_index.%loop-player%} to loop-index
			set {_checkCT::%loop-player%} to {CT.%loop-player%::%{_index.%loop-player%}%}
	if size of {_checker::*} is 0:
		stop
	wait 0.5 seconds
	loop {_checker::*}:
		{CTStop.%loop-value%::%{_index.%loop-value%}%} is not true
		if {CT.%loop-value%::%{_index.%loop-value%}%} is {_checkCT::%loop-value%}:
			set {CoolTimer::%loop-value%} to false
			playerCoolTimer(loop-value)

function detectCT(player: player, skill: item):
	# ### LoreからCTを取得する方法 ###
	# set {_name} to display name of {_skill}
	# set {_lore::*} to lore of {_skill}
	# loop {_lore::*}:
	# 	loop-value contains "§bCoolTime§7: §a"
	# 	set {_ct} to loop-value
	# if {_ct} is not set:
	# 	stop
	# replace every "§bCoolTime§7: §a" with "" in {_ct}
	# set {_ct} to {_ct} parsed as number
	set {_ct} to getNamespacedKey({_skill}, "cooltime", "float")
	if {_ct} is not set:
		log "%display name of {_skill}%のクールタイムを取得できませんでした"
		stop

	set {_name} to display name of {_skill}
	setCT({_player}, {_name}, {_ct})

function setCT(player: player, skill: text, second: number):
	set {CT.%{_player}%::%{_skill}%} to {_second}
	playerCoolTimer({_player})
	# if {_count} is true:
	# 	if {Join::%{_player}%} is "Kit":
	# 		add 1 to {Kit-SkillCount.%{_player}%::%{_skill}%}

function toolCT(player: player, kit: text, num: number, type: text = "Skill"):
	set {_tool} to {_player}'s tool
	if kitItemKitChecker({_tool}) is {_kit}:
		if kitItemTypeChecker({_tool}) is {_type}:
			if kitItemNumberChecker({_tool}) is {_num}:
				set {_cttool} to {_tool}
	if {_cttool} is not set:
		loop all items in {_player}'s inventory:
			kitItemKitChecker(loop-item) is {_kit}
			kitItemTypeChecker(loop-item) is {_type}
			kitItemNumberChecker(loop-item) is {_num}
			set {_cttool} to loop-item
	detectCT({_player}, {_cttool})

function nameCT(player: player, name: text):
	set {_tool} to {_player}'s tool
	set {_toolname} to display name of {_tool}
	set {_toolname} to unformatted {_toolname}
	set {_cttool} to {_tool} if {_toolname} is {_name}

	if {_cttool} is not set:
		loop all items in {_player}'s inventory:
			set {_toolname} to display name of loop-item
			set {_toolname} to unformatted {_toolname}
			if {_toolname} is {_name}:
				set {_cttool} to loop-item
	detectCT({_player}, {_cttool}) if {_cttool} is set

function checkCT(player: player, skill: text, only: boolean = false) :: boolean:
	if getDebuffs({_player}, "Palsy") is true:
		loop 30 times:
			set {_loc} to location of {_player}
			add 1 to y-coordinate of {_loc}
			spawnParticle_Vector(enchanted_hit, randomVector(), 1, {_loc})
			playSound("entity.bee.pollinate", 1, 2, {_player}, true)
		return false
	if {CT.%{_player}%::%{_skill}%} is not set:
		return true
	else:
		if {_only} is false:
			send action bar "§c§lクールタイムが終わっていません!" to {_player}
		return false

command /ctreset <player=%player%>:
	permission: sk.admin
	trigger:
		set {CT.%arg 1%::*} to 0
		delete {CTStop.%arg 1%::*}
		loop all items in arg 1's inventory:
			set item cooldown of loop-item for arg 1 to 0 seconds

# 武器Cooldown
function setItemCT(player: player, item: item):
	# ### LoreからCTを取得する方法 ###
	# set {_lore::*} to lore of {_item}
	# loop {_lore::*}:
	# 	loop-value contains "§9発動間隔§7: §a"
	# 	set {_ct} to loop-value
	# if {_ct} is not set:
	# 	stop
	# replace every "§9発動間隔§7: §a" with "" in {_ct}

	set {_ct} to getNamespacedKey({_item}, "cooldown", "float")
	if {_ct} is not set:
		log "%display name of {_item}%のクールダウンを取得できませんでした"
		stop

	set {_ct} to "%{_ct}% seconds" parsed as time span
	set item cooldown of {_item} for {_player} to {_ct}

function toolItemCT(player: player, kit: text, num: number, type: text = "Weapon"):
	set {_tool} to {_player}'s tool
	if kitItemAllChecker({_tool}, {_kit}, {_type}, {_num}) is true:
		set {_cttool} to {_tool}
	if {_cttool} is not set:
		loop all items in {_player}'s inventory:
			kitItemAllChecker({_tool}, {_kit}, {_type}, {_num}) is true
			set {_cttool} to loop-item
	setItemCT({_player}, {_cttool})

function nameItemCT(player: player, name: text):
	set {_tool} to {_player}'s tool
	set {_toolname} to display name of {_tool}
	set {_toolname} to unformatted {_toolname}
	set {_cttool} to {_tool} if {_toolname} is {_name}

	if {_cttool} is not set:
		loop all items in {_player}'s inventory:
			set {_toolname} to display name of loop-item
			set {_toolname} to unformatted {_toolname}
			if {_toolname} is {_name}:
				set {_cttool} to loop-item
	setItemCT({_player}, {_cttool}) if {_cttool} is set

function checkItemCT(player: player, item: item) :: boolean:
	if item cooldown of {_item} for {_player} is 0 seconds:
		return true
	return false