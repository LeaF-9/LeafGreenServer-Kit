function playerCoolTimer(player: player):
	if {CoolTimer::%{_player}%} is true:
		stop
	set {CoolTimer::%{_player}%} to true
	set {_timer} to true
	while {_timer} is true:
		if {Kit-Palsy::%{_player}%} is set:
			wait a tick
			continue
		if size of {CT.%{_player}%::*} is 0:
			delete {_timer}
			continue
		loop {CT.%{_player}%::*}:
			if loop-value <= 0:
				delete {CT.%{_player}%::%loop-index%}
				delete {_ok}
				loop all items in {_player}'s inventory:
					name of loop-item is loop-index
					set {_ok} to true
				if {_ok} is true:
					send action bar "§a%loop-index% §bのクールタイムが終了しました!" to {_player}
					playSound("entity.player.levelup", 0.5, 1, {_player}, true)
			else:
				if {_maxct::%loop-index%} is not set:  # maxctの取得
					set {_maxct::%loop-index%} to {CT.%{_player}%::%loop-index%}
				if {CTStop.%{_player}%::%loop-index%} is true:
					set {_sub} to 0
				else if {Stats.%{_player}%::FastCT} is true:
					set {_sub} to 0.15
				else:
					set {_sub} to 0.05
				subtract {_sub} from {CT.%{_player}%::%loop-index%}
				if {CT.%{_player}%::%loop-index%} <= 0:
					delete {CT.%{_player}%::%loop-index%}
					delete {_ok}
					loop all items in {_player}'s inventory:
						name of loop-item contains loop-index
						set {_ok} to true
					if {_ok} is true:
						send action bar "§a%loop-index% §bのクールタイムが終了しました!" to {_player}
						playSound("entity.player.levelup", 0.5, 1, {_player}, true)
				else:
					if name of tool of {_player} contains loop-index:
						barCT({_player}, {CT.%{_player}%::%loop-index%}, {_maxct::%loop-index%})
		wait a tick
	delete {CoolTimer::%{_player}%}

local function barCT(player: player, ct: number, max: number):
	# 進捗数字
	set {_baseliner} to {_ct} / {_max} * 50
	# bar表記
	set {_line} to ""
	loop 50 times:
		if loop-number <= {_baseliner}:
			set {_line} to "%{_line}%§b|"
		else:
			set {_line} to "%{_line}%§8|"
	# 数字表記
	set {_time} to {_ct}
	set {_timetexts::*} to "%{_time}%" split at "."
	if size of {_timetexts::*} is 1:
		set {_timetext} to "%{_time}%.00"
	else if length of {_timetexts::2} is 1:
		set {_timetext} to "%{_time}%0"
	else:
		set {_timetext} to "%{_time}%"
	set {_line} to "%{_line}%   §c§l%{_timetext}% §a秒"
	send action bar {_line} to {_player}

every a second:
	loop all players:
		{Kit-Palsy::%loop-player%} is not set
		if size of {CT.%loop-player%::*} is not 0:
			set {_checker::%loop-player%} to loop-player
			set {_checkCT::%loop-player%} to {CT.%loop-player%::1}
	if size of {_checker::*} is 0:
		stop
	wait 0.5 seconds
	loop {_checker::*}:
		if {CT.%loop-value%::1} is {_checkCT::%loop-value%}:
			set {CoolTimer::%loop-value%} to false
			playerCoolTimer(loop-value)

function detectCT(player: player, skill: item, count: boolean = true):
	set {_name} to display name of {_skill}
	set {_lore::*} to lore of {_skill}
	loop {_lore::*}:
		loop-value contains "§bCoolTime"
		set {_ct} to loop-value
	if {_ct} is not set:
		stop
	replace every "§bCoolTime§7: §a" with "" in {_ct}
	set {_ct} to {_ct} parsed as number
	setCT({_player}, {_name}, {_ct}, {_count})

function setCT(player: player, skill: text, second: number, count: boolean = true):
	set {CT.%{_player}%::%{_skill}%} to {_second}
	playerCoolTimer({_player})
	# if {_count} is true:
	# 	if {Join::%{_player}%} is "Kit":
	# 		add 1 to {Kit-SkillCount.%{_player}%::%{_skill}%}

function toolCT(player: player, kit: text, num: number, type: text = "Skill"):
	set {_tool} to {_player}'s tool
	if kitItemKitChecker({_tool}) is {_kit}:
		if kitItemTypeChecker({_tool}) is {_type}:
			if kitItemNumberChecker({_tool}) is {_num}:
				set {_cttool} to {_tool}
	if {_cttool} is not set:
		loop all items in {_player}'s inventory:
			kitItemKitChecker(loop-item) is {_kit}
			kitItemTypeChecker(loop-item) is {_type}
			kitItemNumberChecker(loop-item) is {_num}
			set {_cttool} to loop-item
	detectCT({_player}, {_cttool})

function checkCT(player: player, skill: text, only: boolean = false) :: boolean:
	if {Kit-Palsy::%{_player}%} is true:
		loop 30 times:
			set {_loc} to location of {_player}
			add 1 to y-coordinate of {_loc}
			spawnParticle_Vector(enchanted_hit, randomVector(), 1, {_loc})
		return false
		stop
	if {CT.%{_player}%::%{_skill}%} is not set:
		return true
	else:
		if {_only} is false:
			send action bar "§c§lクールタイムが終わっていません!" to {_player}
		return false

# 武器Cooldown
function setItemCT(player: player, item: item):
	set {_lore::*} to lore of {_item}
	loop {_lore::*}:
		loop-value contains "§9発射間隔§7: §a"
		set {_ct} to loop-value
	if {_ct} is not set:
		stop
	replace every "§9発射間隔§7: §a" with "" in {_ct}
	set {_ct} to "%{_ct}% seconds" parsed as time span
	set item cooldown of {_item} for {_player} to {_ct}

function toolItemCT(player: player, kit: text, num: number, type: text = "Weapon.main"):
	set {_tool} to {_player}'s tool
	if kitItemAllChecker({_tool}, {_kit}, {_type}, {_num}) is true:
		set {_cttool} to {_tool}
	if {_cttool} is not set:
		loop all items in {_player}'s inventory:
			kitItemAllChecker({_tool}, {_kit}, {_type}, {_num}) is true
			set {_cttool} to loop-item
	setItemCT({_player}, {_cttool})

function checkItemCT(player: player, item: item) :: boolean:
	if item cooldown of {_item} for {_player} is 0 seconds:
		return true
	return false