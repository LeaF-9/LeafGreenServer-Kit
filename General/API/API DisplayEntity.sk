import:
	java.lang.Integer

	org.bukkit.entity.Display$Brightness

	org.bukkit.util.Transformation

	org.joml.Vector3f
	org.joml.AxisAngle4f
	org.joml.Quaternionf
	org.joml.Matrix4f

# Brightness
function setBrightness(entity: entity, level: number = 15):
	set {_bright} to Integer.valueOf({_level})
	set {_brightness} to new Brightness({_bright}, {_bright})
	{_entity}.setBrightness({_brightness})

# Transform
function getVector3f(x: number, y: number, z: number) :: object:
	set {_vector} to new Vector3f({_x}, {_y}, {_z})
	return {_vector}

function getAxisAngle4f(x: number, y: number, z: number, angle: number) :: object:
	set {_axisAngle} to new AxisAngle4f({_angle}, {_x}, {_y}, {_z})
	return {_axisAngle}

function getQuaternionf(x: number, y: number, z: number, w: number) :: object:
	set {_quaternion} to new Quaternionf({_x}, {_y}, {_z}, {_w})
	return {_quaternion}

function getMatrix4f(m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number) :: object:
	set {_matrix} to new Matrix4f({_m00}, {_m01}, {_m02}, {_m03}, {_m10}, {_m11}, {_m12}, {_m13}, {_m20}, {_m21}, {_m22}, {_m23}, {_m30}, {_m31}, {_m32}, {_m33})
	return {_matrix}

function getAdjustedMatrix4f(m00: number, m01: number, m02: number, m03: number, m10: number, m11: number, m12: number, m13: number, m20: number, m21: number, m22: number, m23: number, m30: number, m31: number, m32: number, m33: number) :: object:
	set {_matrix} to new Matrix4f({_m00}, {_m10}, {_m20}, {_m30}, {_m01}, {_m11}, {_m21}, {_m31}, {_m02}, {_m12}, {_m22}, {_m32}, {_m03}, {_m13}, {_m23}, {_m33})
	return {_matrix}

function getQuaternionFromMatrix(matrix: object) :: object:
	set {_quaternion} to new Quaternionf()
	set {_quaternion} to {_matrix}.getNormalizedRotation({_quaternion})
	return {_quaternion}

function getTranslationFromMatrix(matrix: object) :: object:
	set {_tx} to {_matrix}.get(0, 3)
	set {_ty} to {_matrix}.get(1, 3)
	set {_tz} to {_matrix}.get(2, 3)
	set {_vector} to new Vector3f({_tx}, {_ty}, {_tz})
	# set {_vector} to {_matrix}.getTranslation({_vector})
	return {_vector}

function getScaleFromMatrix(matrix: object) :: object:
	set {_vector} to new Vector3f()
	set {_vector} to {_matrix}.getScale({_vector})
	return {_vector}

function convertMatrixToTransformation(matrix: object) :: object:
	set {_leftRotation} to getQuaternionFromMatrix({_matrix})
	set {_rightRotation} to getQuaternionf(0, 0, 0, 1)
	set {_translation} to getTranslationFromMatrix({_matrix})
	set {_scale} to getScaleFromMatrix({_matrix})
	set {_transformation} to getTransformation({_leftRotation}, {_rightRotation}, {_translation}, {_scale})
	return {_transformation}

function getTransformation(leftRotation: object, rightRotation: object, translation: object, scale: object) :: object:
	set {_transformation} to new Transformation({_translation}, {_leftRotation}, {_scale}, {_rightRotation})
	return {_transformation}

function setTransformation(entity: entity, leftRotation: object, rightRotation: object, translation: object, scale: object):
	set {_transformation} to new Transformation({_translation}, {_leftRotation}, {_scale}, {_rightRotation})
	{_entity}.setTransformation({_transformation})



# Item Display
function setDisplayItem(entity: entity, item: item type):
	set {_item} to {_item}.getMaterial()
	set {_isItem} to {_item}.isItem()
	stop if {_item}.isItem() is false

	set {_item} to {_item}.asItemType().createItemStack()
	{_entity}.setItemStack({_item})

# Block Display
function setDisplayBlock(entity: entity, block: object):
	{_entity}.setBlock({_block})

function getBlockData(block: item type) :: object:
	set {_block} to {_block}.getMaterial().createBlockData()
	return {_block}