# memo:
#	デフォルトのマックスチャージまでの時間は 24 ticks
options:
	draw-time: "BOW-draw time"
	draw-start: "BOW-draw start"

on rightclick holding a bow:
	set {_time} to 0
	set metadata value {@draw-time} of player to {_time}
	set {_now} to now
	set metadata value {@draw-start} of player to {_now}

	while metadata value {@draw-time} of player is set:
		wait a tick
		if getBowDrawTime(player) is not set:
			stop
		if type of player's tool is not a bow:
			stop
		if getBowDrawStart(player) is not {_now}:
			stop
		add 1 to {_time}
		set metadata value {@draw-time} of player to {_time}

on shoot with priority MONITOR:
	getBowDrawTime(shooter) is set
	delete metadata value {@draw-time} of shooter
	delete metadata value {@draw-start} of shooter

function getBowDrawTime(player: player, maxTime: number = 24) :: number:
	set {_time} to metadata value {@draw-time} of {_player}
	if {_time} > {_maxTime}:
		set {_time} to {_maxTime}
	return {_time}

function getBowDrawStart(player: player) :: date:
	set {_startTime} to metadata value {@draw-start} of {_player}
	return {_startTime}



on damage with priority LOW:
	damage was caused by projectile
	projectile is an arrow
	if metadata value "arrowdamage" of projectile is set:
		set {_damage} to metadata value "arrowdamage" of projectile
		setDamageModification_SET(victim, {_damage})
	else if metadata value "arromultiple" of projectile is set:
		set {_multiple} to metadata value "arrowmultiple" of projectile
		setDamageModification_MUL(victim, {_multiple})

on shoot:
	projectile is an arrow
	set {_tool} to tool of shooter
	type of {_tool} is bow or crossbow
	kitItemTypeChecker({_tool}) is "Weapon.main"
	set {_lores::*} to lore of {_tool}
	loop {_lores::*}:
		loop-value contains "§9威力§7: §ex"
		set {_pow} to loop-value
		replace "§9威力§7: §ex" with "" in {_pow}
		set {_pow} to {_pow} parsed as number
	if {_pow} is set:
		set metadata value "arrowmultiple" of projectile to {_pow}



function startTrackProjectile(proj: projectile):
	# metadata setting
	set {_now} to now
	set metadata value "projectile tracking - START" of {_proj} to {_now}

	set {_enable} to true
	set {_rad} to 0
	while {_enable} is true:
		wait a tick
		if metadata value "projectile tracking - START" of {_proj} is not {_now}:
			delete {_enable}
			stop
		
		set {_loc} to location of {_proj}
		set {_proloc} to metadata value "projectile tracking - SAVE" of {_proj}
		if {_proloc} is set:
			if {_proloc} is {_loc}:
				delete metadata value "projectile tracking - START" of {_proj}
				delete metadata value "projectile tracking - SAVE" of {_proj}
				delete {_enable}
				stop

		set metadata value "projectile tracking - SAVE" of {_proj} to {_loc}

function getProjectilePreviousLocation(proj: projectile) :: location:
	set {_proloc} to metadata value "projectile tracking - SAVE" of {_proj}
	set {_loc} to location of {_proj}
	set {_proloc} to setDirToVec({_proloc}, setVector({_proloc}, {_loc}))
	return {_proloc}

on projectile hit:
	metadata value "projectile tracking - START" of projectile is set
	delete metadata value "projectile tracking - START" of projectile



function setShooter(proj: projectile, shooter: living entity):
	{_proj}.setShooter({_shooter})