
# attack speed
on join:
	ocmAttackSpeed({_player})

function ocmAttackSpeed(player: player):
	set attack speed attribute of {_player} to 24

# sweep attack
on damage:
	damage was caused by sweep attack
	cancel event

# Fish Hook Knockback
on shoot:
	projectile is a fish hook
	if name of shooter's tool contains "Grappling Hook":
		stop
	set metadata value "fish hook knockback" of projectile to true

on projectile hit:
	projectile is a fish hook
	metadata value "fish hook knockback" of projectile is true
	set {_victim} to event.getHitEntity()
	
	if {_victim} is not set:
		stop
	if checkEntityType({_victim}, sheep) is true:
		stop
	if kitCheckTeam({_victim}, shooter, true, true) is true:
		stop
	
	kitDamage(shooter, {_victim}, 0.01, "釣竿")
	set {_velocity} to hookKnockback(location of projectile, location 1 meter above {_victim})
	set velocity of {_victim} to {_velocity}

local function hookKnockback(from: location, to: location) :: vector:
	set {_vector} to setVector({_from}, {_to}, 0.5)
	add 0.4 to y of {_vector}
	if y of {_vector} > 0.4:
		set y of {_vector} to 0.4

	if block 1.1 meters below {_to} is not passable:
		set x of {_vector} to x of {_vector} * 1.5
		set z of {_vector} to z of {_vector} * 1.5

	return {_vector}

# Shield Reduction

import:
	org.bukkit.event.entity.EntityDamageEvent$DamageModifier

# 盾でダメージを防いだ際の被ダメージ量を変更する処理
on damage of player:
	victim is blocking

	# Damage取得 (取得されたダメージは ❤10 = 20 であることに注意)
	set {_damage.base} to event.getDamage(DamageModifier.BASE)  # 元のダメージ (3)
	set {_damage.blocking} to event.getDamage(DamageModifier.BLOCKING)  # 減らすダメージ (-3)

	set {_damagereduction} to {_damage.blocking} * 0.5  # (-1.5)

	# attacker toolがaxeだった場合、別の処理を実行
	if damage was caused by attack:
		set {_tooltype} to type of tool of attacker
		if "%{_tooltype}%" contains "axe":
			cancel event
			playSound("item.shield.block", 1, 1, victim)
			set {_attacker} to getAttacker(victim)
			kitDamageNull({_attacker}, victim, {_damage.base} / 4, "防御", true)
			stop

	event.setDamage(DamageModifier.BLOCKING, {_damagereduction})