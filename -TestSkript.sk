#command /testeffecter:
#	trigger:
#		drawLine particle soulfireflame, center player, id "test", density 30, length 30, visibleRange 100, displacementXYZ 0, 1.5, 0
#		wait 5 seconds
#		stopEffect "test"

#command /testshield:
#	trigger:
#		spawn a skeleton at player with nbt "{NoGravity:1b,ArmorItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b},{id:""minecraft:blue_stained_glass_pane"",Count:1b}],HandItems:[{id:""minecraft:air"",Count:1b},{id:""minecraft:air"",Count:1b}],ArmorDropChances:[0.085F,0.085F,0.085F,0.0F],CanPickUpLoot:1b,NoAI:1,Silent:1}"
#		apply ambient invisibility 1 to spawned zombie for 10 seconds
#		set spawned zombie's display name to "%player%"

#command /testleft:
#	trigger:
#		set {_l} to location of player
#		spawn an armor stand 1 meters to the left of {_l}

#command /testlocation:
#	trigger:
#		set {_l} to location of player
#		loop 10 times:
#			add 1 to {_r}
#			set {_tl} to location {_r} meters in front of {_l}
#			drawDot particle "redstone", center {_tl}, visibleRange 30, keepFor 5 seconds

#command /testcircle:
#	trigger:
#		set {_loc} to location of player
#		add 1.5 to y-coordinate of {_loc}
#		loop 30 times:
#			set {_num} to loop-number
#			set {_block} to location {_num} meters in front of {_loc}
#			playSound("entity.wither.shoot", 0.5, 2, {_block})
#			set {_rad} to 0
#			loop 36 times:
#				set {_eb} to {_block}
#				set {_yaw} to round(yaw of {_eb})
#				set {_pitch} to round(pitch of {_eb})
#				set {_m1} to {_eb}
#				set {_p} to pitch of {_m1}
#				if {_p} < 0:
#					set {_p} to -1 * 90 - {_p}
#					set {_y} to yaw of {_m1}
#					add 180 to {_y}
#					if {_y} >= 360:
#						set {_y} to {_y} - 360
#					set yaw of {_m1} to {_y}
#				else:
#					set {_p} to {_p} - 90
#				set pitch of {_m1} to {_p}
#				set {_test1} to 5 * cos({_rad})
#				set {_t1} to location {_test1} meters in front of {_m1}
#				set {_m2} to {_eb}
#				set pitch of {_m2} to 0
#				set {_test2} to 5 * sin({_rad})
#				set {_t2} to location {_test2} meters to the right of {_m2}
#				set x-coordinate of {_eb} to x-coordinate of {_t1} + x-coordinate of {_t2} - x-coordinate of {_eb}
#				set y-coordinate of {_eb} to y-coordinate of {_t1} + y-coordinate of {_t2} - y-coordinate of {_eb}
#				set z-coordinate of {_eb} to z-coordinate of {_t1} + z-coordinate of {_t2} - z-coordinate of {_eb}
#				drawDot count 1, particle "redstone", RGB 255, 0, 0, center {_t1}, visibleRange 100
#				drawDot count 1, particle "redstone", RGB 0, 0, 255, center {_t2}, visibleRange 100
#				drawDot count 1, particle "redstone", RGB 255, 0, 255, center {_eb}, visibleRange 100
#				add 10 to {_rad}
#			wait a tick

#command /testtimecheck:
#	trigger:
#		set {_time} to now
#		set {_r} to a random integer between 180 and 300
#		set {_r} to "%{_r}% ticks" parsed as time span
#		wait {_r}
#		set {_timer} to "%difference between {_time} and now%"
#		replace every " and " with "" in {_timer}
#		replace every ", " with "" in {_timer}
#		replace every " hours" with "h:" in {_timer}
#		replace every " hour" with "h:" in {_timer}
#		replace every " minutes" with "m:" in {_timer}
#		replace every " minute" with "m:" in {_timer}
#		replace every " seconds" with "s" in {_timer}
#		replace every " second" with "s" in {_timer}
# #		replace every "." with ":" in {_timer}
#		set {_timers::*} to {_timer} split at ":"
#		loop {_timers::*}:
#			if loop-value contains "h":
#				set {_hour} to loop-value
#				replace every "h" with "" in {_hour}
#			if loop-value contains "m":
#				set {_minute} to loop-value
#				replace every "m" with "" in {_hour}
#			if loop-value contains "s":
#				if loop-value contains ".":
#					set {_seconds::*} to loop-value split at "."
#					loop {_seconds::*}:
#						if loop-value-2 contains "s":
#							set {_tick} to loop-value-2
#							replace every "s" with "" in {_tick}
#						else:
#							set {_second} to loop-value-2
#				else:
#					set {_second} to loop-value
#					replace every "s" with "" in {_second}
#		if {_hour} is not set:
#			set {_hour} to "00"
#		else:
#			set {_hour} to {_hour} parsed as number
#			if {_hour} < 10:
#				set {_hour} to "0%{_hour}%"
#		if {_minute} is not set:
#			set {_minute} to "00"
#		else:
#			set {_minute} to {_minute} parsed as number
#			if {_minute} < 10:
#				set {_minute} to "0%{_minute}%"
#		if {_second} is not set:
#			set {_second} to "00"
#		else:
#			set {_second} to {_second} parsed as number
#			if {_second} < 10:
#				set {_second} to "0%{_second}%"
#		if {_tick} is not set:
#			set {_tick} to "00"
#		else:
#			set {_tick} to {_tick} parsed as number
#			if {_tick} < 10:
#				set {_tick} to "%{_tick}%0"
#		broadcast "%{_hour}%:%{_minute}%:%{_second}%:%{_tick}%"


# ThatPacketAddon's glowing packet
# command /sendpkt1 <player> <player>: # makes arg-1 glow for the sender
# 	executable by: players
# 	trigger:
# 		set {_pkt} to new play_server_entity_metadata packet
# 		set int field 0 of {_pkt} to (arg-1).getEntityId() # set the entity using EID
# 		set {_dw} to new datawatcher
# 		set watched byte 0 of {_dw} to (64).byteValue() # 0x40
# 		set watchable collection field 0 of {_pkt} to {_dw}
# 		loop 100 times:
# 			send arg 2 packet {_pkt}
# 			wait a tick
# 		set {_pkt} to new play_server_entity_metadata packet
# 		set int field 0 of {_pkt} to (arg-1).getEntityId() # set the entity using EID
# 		set {_dw} to new datawatcher
# 		set watched byte 0 of {_dw} to (4).byteValue() # 0x40
# 		set watchable collection field 0 of {_pkt} to {_dw}
# 		send arg 2 packet {_pkt}

# skript-packet's glowing packet
# command /sendpkt1 <player> <player>: # makes arg-1 glow for the sender
# 	executable by: players
# 	trigger:
# 		set {_pkt} to new play_server_entity_metadata packet
# 		set field 0 of {_pkt} to (arg-1).getEntityId()
# 		set {_dw} to new data watcher for arg 1
# 		set datawatcher index 0 of {_dw} to (64 as byte)  # (64 as byte)
# 		set field 1 of {_pkt} to {_dw}
# 		loop 100 times:
# 			send arg 2 packet {_pkt}
# 			wait a tick
# 		set {_pkt} to new play_server_entity_metadata packet
# 		set field 0 of {_pkt} to (arg-1).getEntityId() # set the entity using EID
# 		set {_dw} to new data watcher for arg 1
# 		set datawatcher index 0 of {_dw} to (0 as byte) # 0x40
# 		set field 1 of {_pkt} to {_dw}
# 		send arg 2 packet {_pkt}

# Spectatorの観戦の疑似再現
# command /sendpkt2:
# 	executable by: players
# 	trigger:
# 		set {_pkt} to new play_server_camera packet
# 		loop all creepers in radius 5 around player:
# 			set int field 0 of {_pkt} to id of loop-creeper
# 		send player packet {_pkt}

command /ptst:
	trigger:
		stop all particle effects

#command /testsk:
#	trigger:
#		set {_loc} to location of player
#		set {_vector0} to {_loc}
#		set {_vector1} to {_loc}
#		set {_x} to x-coordinate of {_loc}
#		set {_y} to y-coordinate of {_loc}
#		set {_z} to z-coordinate of {_loc}
#		set {_alpha} to 0
#		loop 37 time:
#			set {_vx1} to {_loc}
#			set pitch of {_vx1} to 0
#			set {_vx} to location 1 meters to the right of {_vx1}
#			set {_vy} to {_loc}
#			set {_y1p} to pitch of {_vy}
#			set {_y2p} to abs({_y1p}) - 90
#			if {_y1p} < 0:
#				set {_y3p} to yaw of {_loc}
#				if {_y3p} < 180:
#					add 180 to {_y3p}
#				else:
#					add -180 to {_y3p}
#				set yaw of {_vy} to {_y3p}
#			set pitch of {_vy} to {_y2p}
#			set {_vy} to location 1 meters in front of {_vy}
#			set {_vz} to location 1 meters in front of {_loc}
#			set {_vector0} to location (3 * {_alpha}) meters in front of {_loc}
#			set {_v0x} to x-coordinate of {_vector0}
#			set {_v0y} to y-coordinate of {_vector0}
#			set {_v0z} to z-coordinate of {_vector0}
#			if ({_v0x} - {_x}) ^ 2 + ({_v0y} - {_y}) ^ 2 + ({_v0z} - {_z}) ^ 2 < 10201:
#				drawDot count 1, particle "redstone", RGB 255, 255, 0, center {_vector0}, visibleRange 100, keepFor 1 seconds
#			set {_s} to 0
#			set {_t} to 0
#			loop 8 time:
#				add 1 to {_t}
#				loop 5 time:
#					set x-coordinate of {_vector1} to (0.5 * {_t} * cos(72 * {_s} + 14 * {_t} - 14 - 2 * {_alpha})) * (x-coordinate of {_vx} - {_x}) + (0.5 * {_t} * sin(72 * {_s} + 14 * {_t} - 14 - 2 * {_alpha})) * (x-coordinate of {_vy} - {_x}) + (3 * 2 ^ ((8 - {_t}) / 4) - 9 + {_alpha}) * (x-coordinate of {_vz} - {_x}) + {_x}
#					set y-coordinate of {_vector1} to (0.5 * {_t} * cos(72 * {_s} + 14 * {_t} - 14 - 2 * {_alpha})) * (y-coordinate of {_vx} - {_y}) + (0.5 * {_t} * sin(72 * {_s} + 14 * {_t} - 14 - 2 * {_alpha})) * (y-coordinate of {_vy} - {_y}) + (3 * 2 ^ ((8 - {_t}) / 4) - 9 + {_alpha}) * (y-coordinate of {_vz} - {_y}) + {_y}
#					set z-coordinate of {_vector1} to (0.5 * {_t} * cos(72 * {_s} + 14 * {_t} - 14 - 2 * {_alpha})) * (z-coordinate of {_vx} - {_z}) + (0.5 * {_t} * sin(72 * {_s} + 14 * {_t} - 14 - 2 * {_alpha})) * (z-coordinate of {_vy} - {_z}) + (3 * 2 ^ ((8 - {_t}) / 4) - 9 + {_alpha}) * (z-coordinate of {_vz} - {_z}) + {_z}
#					drawDot count 1, particle "redstone", RGB 255, 255, (32 * {_t}), center {_vector1}, visibleRange 100, keepFor 0.05 seconds
#					add 1 to {_s}
#			add 3 to {_alpha}
#			wait a tick

command /testfallblock:
	trigger:
		set {_block} to "falling %targeted block%" parsed as entity type
		shoot {_block} from player at speed 3

command /testyaml:
	trigger:
		load yml "plugins/skript-yaml/Kit Stages/Rome Sky.yml" as "test"
		loop yaml node keys "cpa-rule.areas" from "test":
			broadcast "%loop-node% | %loop-key% | %loop-subnodekeys%"
#				" respawns.red.1 | 1 | x, y, z, yaw, pitch and world "

command /testsphere:
	trigger:
		set {_s} to 0
		set {_t} to 0
		set {_pl} to location of player
		loop 19 time:
			loop 36 time:
				set {_loc} to {_pl}
				set {_vector} to {_loc}
				set {_x} to x-coordinate of {_loc}
				set {_y} to y-coordinate of {_loc}
				set {_z} to z-coordinate of {_loc}
				set x-coordinate of {_vector} to {_x} + ( 5 * sin({_s}) * cos({_t}) )
				set y-coordinate of {_vector} to {_y} + ( 5 * cos({_s}) )
				set z-coordinate of {_vector} to {_z} + ( 5 * sin({_s}) * sin({_t}) )
				drawDot count 1, particle "redstone", RGB 0, 255, 0, center {_vector}, visibleRange 100, keepFor 5 seconds
				add 10 to {_t}
			add 10 to {_s}
			wait a tick

command /testballdirection:
	trigger:
		set {_s} to 0
		set {_t} to 0
		set {_pl} to location of player
		loop 19 time:
			loop 36 time:
				set {_loc} to {_pl}
				set {_vector} to {_loc}
				set {_x} to x-coordinate of {_loc}
				set {_y} to y-coordinate of {_loc}
				set {_z} to z-coordinate of {_loc}
				set {_vx} to takeVX({_loc})
				set {_vy} to takeVY({_loc})
				set {_vz} to takeVZ({_loc})
				set x-coordinate of {_vector} to ( 5 * sin({_s}) * cos({_t}) ) * (x-coordinate of {_vx} - {_x}) + ( 5 * cos({_s}) ) * (x-coordinate of {_vy} - {_x}) + ( 5 * sin({_s}) * sin({_t}) ) * (x-coordinate of {_vz} - {_x}) + {_x}
				set y-coordinate of {_vector} to ( 5 * sin({_s}) * cos({_t}) ) * (y-coordinate of {_vx} - {_y}) + ( 5 * cos({_s}) ) * (y-coordinate of {_vy} - {_y}) + ( 5 * sin({_s}) * sin({_t}) ) * (y-coordinate of {_vz} - {_y}) + {_y}
				set z-coordinate of {_vector} to ( 5 * sin({_s}) * cos({_t}) ) * (z-coordinate of {_vx} - {_z}) + ( 5 * cos({_s}) ) * (z-coordinate of {_vy} - {_z}) + ( 5 * sin({_s}) * sin({_t}) ) * (z-coordinate of {_vz} - {_z}) + {_z}
				drawDot count 1, particle "redstone", RGB 255, 255, 0, center {_vector}, visibleRange 100, keepFor 5 seconds
				add 10 to {_t}
			add 10 to {_s}
			wait a tick
		drawDot count 1, particle "redstone", RGB 0, 0, 255, center {_vx}, visibleRange 100, keepFor 5 seconds
		drawDot count 1, particle "redstone", RGB 0, 255, 0, center {_vy}, visibleRange 100, keepFor 5 seconds
		drawDot count 1, particle "redstone", RGB 255, 0, 0, center {_vz}, visibleRange 100, keepFor 5 seconds

function takeVX(loc: location) :: location:
	set {_vx1} to {_loc}
	set pitch of {_vx1} to 0
	set {_vx} to location 1 meters to the right of {_vx1}
	return {_vx}

function takeVY(loc: location) :: location:
	set {_vy} to {_loc}
	set {_y1p} to pitch of {_loc}
	set {_y2p} to abs({_y1p}) - 90
	if {_y1p} < 0:
		set {_y3p} to yaw of {_loc}
		if {_y3p} < 180:
			add 180 to {_y3p}
		else:
			add -180 to {_y3p}
		set yaw of {_vy} to {_y3p}
	set pitch of {_vy} to {_y2p}
	set {_vy} to location 1 meters in front of {_vy}
	return {_vy}

function takeVZ(loc: location) :: location:
	set {_vz} to location 1 meters in front of {_loc}
	return {_vz}

on rightclick with a clock:
	broadcast "%name of event-item%"

command /testsize:
	trigger:
		set {_sizecheck} to size of {_sizes::*}
		broadcast "%{_sizecheck}%"
		add "hey" to {_sizes::*}
		set {_sizecheck} to size of {_sizes::*}
		broadcast "%{_sizecheck}%"

#on portal:
#	cancel event

#on arm swing:
#	set {_tg} to target entity
#	if type of {_tg} is armor stand:
#		message "armor" to player
#	else if type of {_tg} is falling block:
#		message "block" to player

#on death of zombie:
#	victim's display name is "%attacker%"
#	delete victim

# なにこれ
# function test() :: boolean:
# 	return true

#command /testdamage:
#	trigger:
#		set player's health to 5

#on damage of player:
#	broadcast "damage"

#on heal:
#	type of event-entity is sheep
#	cancel event

#on rightclick holding a shield:
#	wait 6 ticks
#	if player is blocking with shield:
#		broadcast "true"
#	else:
#		broadcast "false"

#on projectile hit:
#	projectile is a snowball
#	make a safe explosion of force 3 at projectile

#on damage:
#	type of victim is not armor stand
#	broadcast "%victim%"
#	broadcast "%type of victim%"

# projectileの名称
# on shoot:
# 	message "%projectile%" to shooter

# KARTのテスト
# command /testkart:
# 	trigger:
# 		spawn an armor stand at location of player
# 		make player ride spawned armor stand
# 		wait 10 seconds
# 		loop all entities in radius 3 around player:
# 			type of loop-entity is an armor stand
# 			delete loop-entity

# on packet event play_client_steer_vehicle:
# 	set {_s} to float pnum 0 of event-packet
# 	set {_f} to float pnum 1 of event-packet
# 	set {_j} to boolean pinfo 0 of event-packet
# 	if {_s} is higher than 0:
# 		set {_button2} to "A"
# 	else if {_s} is not 0:
# 		set {_button2} to "D"
# 	if {_f} is higher than 0:
# 		set {_button} to "W"
# 	else if {_f} is not 0:
# 		set {_button} to "S"
# 	else if {_j} is not set:
# 		stop
# 	set {_loc} to location of vehicle of player
# 	set pitch of {_loc} to 0
# 	if {_button2} is "A":
# 		add -10 to yaw of {_loc}
# 		set (vehicle of player).getHandle().yaw to yaw of {_loc}
# 		set {_v} to setVector({_loc}, location 1 meter in front of {_loc})
# 		set velocity of vehicle of player to {_v}
# 	else if {_button2} is "D":
# 		set {_v} to velocity of vehicle of player
# 		add 10 to yaw of {_loc}
# 		set (vehicle of player).getHandle().yaw to yaw of {_loc}
# 		set {_v} to setVector({_loc}, location 1 meter in front of {_loc})
# 		set velocity of vehicle of player to {_v}
# 	if {_button} is "W":
# 		set {_v} to setVector({_loc}, location 10 meters in front of {_loc})
# 		set velocity of vehicle of player to {_v}
# 	else if {_button} is "S":
# 		set {_v} to setVector({_loc}, location 10 meters behind {_loc})
# 		set velocity of vehicle of player to {_v}

command /testsight:
	trigger:
		loop 100 times:
			set {_yaw} to 10
			chance of 50%:
				set {_yaw} to -10
			set {_locyaw} to yaw of player
			add {_yaw} to {_locyaw}
			execute console command "execute as %player% at @s run teleport @s ~ ~ ~ %{_locyaw}% ~"
			wait a tick

command /testdamageanimation:
	executable by: players
	trigger:
		set {_pkt} to new play_server_animation packet
		set int field 0 of {_pkt} to id of player
		set int field 1 of {_pkt} to 1
		send player packet {_pkt}

# gamemode関係なしにon inventory clickを発生させるSkript
# slotはskriptのnumberとは異なる 
# 参照.player inventory: https://c4k3.github.io/wiki.vg/images/archive/1/13/20151231205457!Inventory-slots.png
# on packet event play_client_window_click:
# 	int field 1 of event-packet is 36
# 	message "Test Succeed!" to player

# on inventory click:
# 	broadcast "%type of clicked item%"

command /testyawcheck:
	trigger:
		set {_loc} to location of player
		set yaw of {_loc} to 450
		teleport player to {_loc}
		if yaw of player is 450:
			broadcast "check成功"

# on projectile collide:
# 	broadcast "shine"

# on heal:
# 	broadcast "%heal reason%"

# command /testsk:
# 	trigger:
# 		set {_v} to setVector(location of player, location 1 meters in front of player)
# 		draw 2 style 2 redstone particles at location of player with direction {_v}, speed 1 and RGB 20, 50, 80, keepFor 1 second

command /testyamlload:
	trigger:
		load yml "plugins/skript-yaml/Kit Classes/Knight.yml" as "class"
		loop yaml node keys "weapon" from "class":
			message "%loop-val%" to player
			message "%loop-node%" to player
			message "%loop-key%" to player
			message "%loop-subnodekey%" to player
		unload yml "class"

command /testmetadata:
	trigger:
		set {_item} to player's tool
		set {_kit} to tag "kit" of nbt of {_item}
		set {_type} to tag "type" of nbt of {_item}
		set {_tag} to tag "number" of nbt of {_item}
		broadcast " %{_kit}% | %{_type}% | %{_tag}%"

command /testvariables:
	trigger:
		set {_test::t1} to "test1"
		set {_test::t1::t2} to "test2"
		loop {_test::*}:
			broadcast "%loop-index% | %loop-value%"
		broadcast "---"
		loop {_test::t1::*}:
			broadcast "%loop-index% | %loop-value%"

command /testhd:
	trigger:
		set display name of player to "§2§l%name of player%"
		wait 10 seconds
		set display name of player to "%name of player%"

# on rightclick holding a bone:
# 	remove player's tool from player
# 	give a bonemeal to player

# on rightclick holding a bonemeal:
# 	broadcast "hey dame"

# TNTの爆発時間テスト
# on rightclick holding a tnt:
# 	spawn a primed tnt at player
# 	setFuseTime(spawned primed tnt, 20)

# NBTタグをいじるテスト
# on rightclick holding a green wool:
# 	set {_item} to player's tool
# 	set {_nbt} to nbt item compound of player's tool
# 	broadcast "%{_nbt}%"
# 	set tag "kit" of {_nbt} to "Knight"
# 	set player's tool to {_item} with nbt {_nbt}

# --- lambdaのテスト(失敗) ---
# command /testlambda:
# 	trigger:
# 		set {_a} to "testlambda"
# 		set {_lambda} to [%{_a}%(%player%)]

# function testlambda(player: player):
# 	broadcast "lambdaのテスト成功 実行者は%{_player}%"
# ----------------------

# ---リードのテストコマンド---
# command /testlead:
# 	trigger:
# 		spawn a magma cube at location 3 meters above player with nbt compound from "{NoAI:1b}"
# 		leash spawned magma cube to player
# 		loop 200 times:
# 			if distance between player and spawned magma cube > 3:
# 				teleport spawned magma cube to location 3 meters above player
# 			wait a tick
# 		delete spawned magma cube
# --------------------------

# ---アイテムからブロックデータが取れるかどうかのテスト---
command /testitemblock:
	trigger:
		message "%raw name of player's tool%" to player
# ----------------------------------------------------

# --- particle packetの送信 ---
# command /testpacketparticle:
# 	trigger:
# 		set {_pkt} to new play_server_entity_metadata packet
# 		set field 0 of {_pkt} to (arg-1).getEntityId()
# 		set {_dw} to new data watcher for arg 1
# 		set datawatcher index 0 of {_dw} to (64 as byte)  # (64 as byte)
# 		set field 1 of {_pkt} to {_dw}
# 		loop 100 times:
# 			send arg 2 packet {_pkt}
# 			wait a tick
# 		set {_pkt} to new play_server_entity_metadata packet
# 		set field 0 of {_pkt} to (arg-1).getEntityId() # set the entity using EID
# 		set {_dw} to new data watcher for arg 1
# 		set datawatcher index 0 of {_dw} to (0 as byte) # 0x40
# 		set field 1 of {_pkt} to {_dw}
# 		send arg 2 packet {_pkt}

# on packet event play_server_world_particles:
# 	broadcast "§b--- [ §9§lPARTICLE PACKET TEST §b] ---"
# 	# broadcast "%field 0 of event-packet%"  # X
# 	# broadcast "%field 1 of event-packet%"  # Y
# 	# broadcast "%field 2 of event-packet%"  # Z
# 	# broadcast "%field 3 of event-packet%"  # Offset X
# 	# broadcast "%field 4 of event-packet%"  # Offset Y
# 	# broadcast "%field 5 of event-packet%"  # Offset Z
# 	# broadcast "%field 6 of event-packet%"  # Speed
# 	# broadcast "%field 7 of event-packet%"  # Count
# 	# broadcast "%field 8 of event-packet%"  # Long Distance
# 	broadcast "%field 9 of event-packet%"  # Data
# ----------------------------

# --- Particle関数のテスト ---

command /testparticle:
	trigger:
		set {_loc} to location of player
		loop 10 times:
			spawnParticle(composter, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Block(block, dirt, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Color(entity_effect, 100, 255, 0, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Dust(dust, 0, 255, 100, 10, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_DustTransition(dust_color_transition, 0, 0, 0, 255, 255, 255, 0.5, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Item(item, diamond, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Note(note, 10, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Size(explosion, 10, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			spawnParticle_Spread(glow, 1, {_loc})
			wait a tick
		loop 10 times:
			set {_v} to setVector({_loc}, location 10 meters in front of {_loc})
			spawnParticle_Vector(end_rod, {_v}, {_loc})
			wait a tick
		wait 10 ticks
		loop 10 times:
			set {_tl} to location 10 meters in front of {_loc}
			spawnParticle_Vibration(vibration, {_tl}, 1 second, {_loc})


# ---------------------------

# command /testwizardult:
# 	trigger:
# 		set {_effbaseloc} to location of player
# 		set {_base} to location 0.6 meters above {_effbaseloc}
# #	魔法陣の展開
# 		set {_tick} to 200
# 		set pitch of {_base} to 0
# 		playSound("block.respawn_anchor.set_spawn", 1.9, 1, {_base})
# #	原点と4点 A,B,C,S,T を設定する
# 		set {_p} to {_base}
# 		add 3 to y-coordinate of {_p}
# 		set {_prigin} to {_p}
# #
# 		set yaw of {_p} to 90
# 		set {_pS1} to {_p}
# 		set {_pA1} to {_p}
# 		set {_pA1} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_p} to 60
# 		set {_pB1} to {_p}
# 		set {_pB1} to location (20 / 3) meters in front of {_p}
# 		set {_pC1} to {_p}
# 		set {_pC1} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_pC1} to 180
# 		set {_pT1} to {_p}
# 		set {_pT1} to location (20 / 3) meters in front of {_p}
# #
# 		set yaw of {_p} to 150
# 		set {_pS2} to {_p}
# 		set {_pA2} to {_p}
# 		set {_pA2} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_p} to 120
# 		set {_pB2} to {_p}
# 		set {_pB2} to location (20 / 3) meters in front of {_p}
# 		set {_pC2} to {_p}
# 		set {_pC2} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_pC2} to 240
# 		set {_pT2} to {_p}
# 		set {_pT2} to location (20 / 3) meters in front of {_p}
# #
# 		set yaw of {_p} to 210
# 		set {_pS3} to {_p}
# 		set {_pA3} to {_p}
# 		set {_pA3} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_p} to 180
# 		set {_pB3} to {_p}
# 		set {_pB3} to location (20 / 3) meters in front of {_p}
# 		set {_pC3} to {_p}
# 		set {_pC3} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_pC3} to 300
# 		set {_pT3} to {_p}
# 		set {_pT3} to location (20 / 3) meters in front of {_p}
# #
# 		set yaw of {_p} to 270
# 		set {_pS4} to {_p}
# 		set {_pA4} to {_p}
# 		set {_pA4} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_p} to 240
# 		set {_pB4} to {_p}
# 		set {_pB4} to location (20 / 3) meters in front of {_p}
# 		set {_pC4} to {_p}
# 		set {_pC4} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_pC4} to 0
# 		set {_pT4} to {_p}
# 		set {_pT4} to location (20 / 3) meters in front of {_p}
# #
# 		set yaw of {_p} to 330
# 		set {_pS5} to {_p}
# 		set {_pA5} to {_p}
# 		set {_pA5} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_p} to 300
# 		set {_pB5} to {_p}
# 		set {_pB5} to location (20 / 3) meters in front of {_p}
# 		set {_pC5} to {_p}
# 		set {_pC5} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_pC5} to 60
# 		set {_pT5} to {_p}
# 		set {_pT5} to location (20 / 3) meters in front of {_p}
# #
# 		set yaw of {_p} to 30
# 		set {_pS6} to {_p}
# 		set {_pA6} to {_p}
# 		set {_pA6} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_p} to 0
# 		set {_pB6} to {_p}
# 		set {_pB6} to location (20 / 3) meters in front of {_p}
# 		set {_pC6} to {_p}
# 		set {_pC6} to location (20 / 3) meters in front of {_p}
# 		set yaw of {_pC6} to 120
# 		set {_pT6} to {_p}
# 		set {_pT6} to location (20 / 3) meters in front of {_p}
# #
# #		線をかく
# 		set {_time} to "%{_tick}% ticks" parsed as time span
# 		drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_p}, visibleRange 100, keepFor {_time}
# #
# 		loop 10 times:
# 			set {_time} to "%{_tick}% ticks" parsed as time span
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pS1}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pS2}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pS3}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pS4}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pS5}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pS6}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pC1}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pC2}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pC3}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pC4}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pC5}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pC6}, visibleRange 100, keepFor {_time}
# 			set {_pS1} to location (2 / 3) meters in front of {_pS1}
# 			set {_pS2} to location (2 / 3) meters in front of {_pS2}
# 			set {_pS3} to location (2 / 3) meters in front of {_pS3}
# 			set {_pS4} to location (2 / 3) meters in front of {_pS4}
# 			set {_pS5} to location (2 / 3) meters in front of {_pS5}
# 			set {_pS6} to location (2 / 3) meters in front of {_pS6}
# 			set {_pC1} to location (2 / 3) meters in front of {_pC1}
# 			set {_pC2} to location (2 / 3) meters in front of {_pC2}
# 			set {_pC3} to location (2 / 3) meters in front of {_pC3}
# 			set {_pC4} to location (2 / 3) meters in front of {_pC4}
# 			set {_pC5} to location (2 / 3) meters in front of {_pC5}
# 			set {_pC6} to location (2 / 3) meters in front of {_pC6}
# 			subtract 1 from {_tick}
# 			wait 2 ticks
# #
# 		loop 7 times:
# 			set {_time} to "%{_tick}% ticks" parsed as time span
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pA1}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pA2}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pA3}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pA4}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pA5}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pA6}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pB1}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pB2}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pB3}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pB4}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pB5}, visibleRange 100, keepFor {_time}
# 			drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_pB6}, visibleRange 100, keepFor {_time}
# 			set {_pA1} to location (2 / 3) meters in front of {_pA1}
# 			set {_pA2} to location (2 / 3) meters in front of {_pA2}
# 			set {_pA3} to location (2 / 3) meters in front of {_pA3}
# 			set {_pA4} to location (2 / 3) meters in front of {_pA4}
# 			set {_pA5} to location (2 / 3) meters in front of {_pA5}
# 			set {_pA6} to location (2 / 3) meters in front of {_pA6}
# 			set {_pB1} to location (2 / 3) meters in front of {_pB1}
# 			set {_pB2} to location (2 / 3) meters in front of {_pB2}
# 			set {_pB3} to location (2 / 3) meters in front of {_pB3}
# 			set {_pB4} to location (2 / 3) meters in front of {_pB4}
# 			set {_pB5} to location (2 / 3) meters in front of {_pB5}
# 			set {_pB6} to location (2 / 3) meters in front of {_pB6}
# 			wait 2 ticks
# 			subtract 1 from {_tick}
# #
# 		set {_Vs} to 0
# 		set {_Vt} to 0
# 		set {_r} to {_p}
# 		set {_s} to {_p}
# 		loop 9 times:
# 			add 6 to {_Vs}
# 			set {_Vu} to 0
# 			loop 6 times:
# 				set yaw of {_p} to (90 - {_Vs}+{_Vt})
# 				set {_s} to location 10 meters in front of {_p}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_s}, visibleRange 100, keepFor {_time}
# 				add 60 to {_Vt}
# 			loop 2 times:
# 				set {_r} to location (10 / 3) meters in front of {_pT1}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_r}, visibleRange 100, keepFor {_time}
# 				set {_r} to location (10 / 3) meters in front of {_pT2}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_r}, visibleRange 100, keepFor {_time}
# 				set {_r} to location (10 / 3) meters in front of {_pT3}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_r}, visibleRange 100, keepFor {_time}
# 				set {_r} to location (10 / 3) meters in front of {_pT4}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_r}, visibleRange 100, keepFor {_time}
# 				set {_r} to location (10 / 3) meters in front of {_pT5}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_r}, visibleRange 100, keepFor {_time}
# 				set {_r} to location (10 / 3) meters in front of {_pT6}
# 				drawDot count 1, particle "redstone", RGB 128, 0, 192, center {_r}, visibleRange 100, keepFor {_time}
# 				set yaw of {_pT1} to (70 + 20 / 3 * {_Vs} + {_Vu})
# 				set yaw of {_pT2} to (130 + 20 / 3 * {_Vs} + {_Vu})
# 				set yaw of {_pT3} to (190 + 20 / 3 * {_Vs} + {_Vu})
# 				set yaw of {_pT4} to (250 + 20 / 3 * {_Vs} + {_Vu})
# 				set yaw of {_pT5} to (310 + 20 / 3 * {_Vs} + {_Vu})
# 				set yaw of {_pT6} to (10 + 20 / 3 * {_Vs} + {_Vu})
# 				add 20 to {_Vu}
# 			wait 2 ticks
# 			subtract 1 from {_tick}